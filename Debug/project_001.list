
project_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d2c  08006d2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d34  08006d34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000074  08006db0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08006db0  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ccf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aec  00000000  00000000  00032d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00036950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018859  00000000  00000000  00037930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150b3  00000000  00000000  00050189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924c5  00000000  00000000  0006523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  000f7754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bf0 	.word	0x08006bf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006bf0 	.word	0x08006bf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 feef 	bl	8001bfc <HAL_Delay>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <GPIO_Config>:


void GPIO_Config(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <DEV_I2C_Init+0x24>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <DEV_I2C_Init+0x28>)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	7013      	strb	r3, [r2, #0]
#endif
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000090 	.word	0x20000090
 8000e5c:	20000091 	.word	0x20000091

08000e60 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8000e70:	2300      	movs	r3, #0
 8000e72:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <I2C_Write_Byte+0x40>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2320      	movs	r3, #32
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <I2C_Write_Byte+0x44>)
 8000e94:	f001 feb2 	bl	8002bfc <HAL_I2C_Mem_Write>
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000091 	.word	0x20000091
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <I2C_Read_Byte+0x3c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <I2C_Read_Byte+0x40>)
 8000ed6:	f001 ff8b 	bl	8002df0 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000091 	.word	0x20000091
 8000ee8:	20000094 	.word	0x20000094

08000eec <I2C_Read_Word>:

int I2C_Read_Word(uint8_t Cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[2]={0, 0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x20);
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <I2C_Read_Word+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b299      	uxth	r1, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2320      	movs	r3, #32
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <I2C_Read_Word+0x48>)
 8000f1a:	f001 ff69 	bl	8002df0 <HAL_I2C_Mem_Read>
	return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	7b3a      	ldrb	r2, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
#endif
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000091 	.word	0x20000091
 8000f34:	20000094 	.word	0x20000094

08000f38 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000f3c:	f7ff ff73 	bl	8000e26 <GPIO_Config>
    DEV_I2C_Init(0x29<<1);
 8000f40:	2052      	movs	r0, #82	; 0x52
 8000f42:	f7ff ff77 	bl	8000e34 <DEV_I2C_Init>
    return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <TSL2591_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE TSL2591_Read_Byte(UBYTE Addr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f5c:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffa1 	bl	8000ea8 <I2C_Read_Byte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <TSL2591_Read_Word>:
parameter:
            Addr: Register address
Info:
******************************************************************************/
static UWORD TSL2591_Read_Word(UBYTE Addr)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f82:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Word(Addr);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffb0 	bl	8000eec <I2C_Read_Word>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29b      	uxth	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TSL2591_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void TSL2591_Write_Byte(UBYTE Addr, UBYTE Value)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
    Addr = Addr | COMMAND_BIT;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000fae:	71fb      	strb	r3, [r7, #7]
    I2C_Write_Byte(Addr, Value);
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff52 	bl	8000e60 <I2C_Write_Byte>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TSL2591_Enable>:
function:	Enable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Enable(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 8000fc8:	2193      	movs	r1, #147	; 0x93
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffe4 	bl	8000f98 <TSL2591_Write_Byte>
    ENABLE_AIEN | ENABLE_POWERON | ENABLE_AEN | ENABLE_NPIEN);
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TSL2591_Disable>:
function:	Disable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Disable(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ffdc 	bl	8000f98 <TSL2591_Write_Byte>
    ENABLE_POWEROFF);
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TSL2591_Get_Gain>:
function:	Read TSL2591 gain
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Get_Gain(void)
{   
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
        MEDIUM_AGAIN        = (0X10)        (25x)
        HIGH_AGAIN          = (0X20)        (428x)
        MAX_AGAIN           = (0x30)        (9876x)
    *************************************************/
    UBYTE data;
    data = TSL2591_Read_Byte(CONTROL_REGISTER);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ffae 	bl	8000f4c <TSL2591_Read_Byte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
    TSL2591_Gain = data & 0x30;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <TSL2591_Get_Gain+0x2c>)
 8000ffe:	701a      	strb	r2, [r3, #0]
    return data & 0x30;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000092 	.word	0x20000092

08001014 <TSL2591_Set_Gain>:
function:	Set the TSL2591 gain
parameter:
Info:
******************************************************************************/
void TSL2591_Set_Gain(UBYTE Gain)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
    if(Gain == LOW_AGAIN || Gain == MEDIUM_AGAIN \
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <TSL2591_Set_Gain+0x26>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d005      	beq.n	800103a <TSL2591_Set_Gain+0x26>
        || Gain == HIGH_AGAIN || Gain == MAX_AGAIN){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b20      	cmp	r3, #32
 8001032:	d002      	beq.n	800103a <TSL2591_Set_Gain+0x26>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b30      	cmp	r3, #48	; 0x30
 8001038:	d115      	bne.n	8001066 <TSL2591_Set_Gain+0x52>
            control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ff86 	bl	8000f4c <TSL2591_Read_Byte>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
            control &= 0xCf; //0b11001111
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800104a:	73fb      	strb	r3, [r7, #15]
            control |= Gain;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4313      	orrs	r3, r2
 8001052:	73fb      	strb	r3, [r7, #15]
            TSL2591_Write_Byte(CONTROL_REGISTER, control);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ff9d 	bl	8000f98 <TSL2591_Write_Byte>
            TSL2591_Gain = Gain;
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <TSL2591_Set_Gain+0x64>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	7013      	strb	r3, [r2, #0]
 8001064:	e003      	b.n	800106e <TSL2591_Set_Gain+0x5a>
    }else{
        printf("Gain Parameter Error\r\n");
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <TSL2591_Set_Gain+0x68>)
 8001068:	f004 fc68 	bl	800593c <puts>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000092 	.word	0x20000092
 800107c:	08006c08 	.word	0x08006c08

08001080 <TSL2591_Set_IntegralTime>:
function:	Set the TSL2591 Integral Time
parameter:
Info:
******************************************************************************/
void TSL2591_Set_IntegralTime(UBYTE Time)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
    if(Time < 0x06){
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d815      	bhi.n	80010c0 <TSL2591_Set_IntegralTime+0x40>
        control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff59 	bl	8000f4c <TSL2591_Read_Byte>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
        control &= 0xf8; //0b11111000
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f023 0307 	bic.w	r3, r3, #7
 80010a4:	73fb      	strb	r3, [r7, #15]
        control |= Time;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
        TSL2591_Write_Byte(CONTROL_REGISTER, control);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4619      	mov	r1, r3
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff70 	bl	8000f98 <TSL2591_Write_Byte>
        TSL2591_Time = Time;
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <TSL2591_Set_IntegralTime+0x50>)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	7013      	strb	r3, [r2, #0]
    }else{
        printf("Integral Time Parameter Error\r\n");
    }
}
 80010be:	e002      	b.n	80010c6 <TSL2591_Set_IntegralTime+0x46>
        printf("Integral Time Parameter Error\r\n");
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <TSL2591_Set_IntegralTime+0x54>)
 80010c2:	f004 fc3b 	bl	800593c <puts>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000093 	.word	0x20000093
 80010d4:	08006c20 	.word	0x08006c20

080010d8 <TSL2591_Read_Channel0>:
function:	Read channel data
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Channel0(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN0_LOW);
 80010dc:	2014      	movs	r0, #20
 80010de:	f7ff ff48 	bl	8000f72 <TSL2591_Read_Word>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TSL2591_Read_Channel1>:

UWORD TSL2591_Read_Channel1(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN1_LOW);
 80010ec:	2016      	movs	r0, #22
 80010ee:	f7ff ff40 	bl	8000f72 <TSL2591_Read_Word>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TSL2591_Init>:
function:	TSL2591 Initialization
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	DEV_I2C_Init(TSL2591_ADDRESS<<1);//8-bit address
 80010fc:	2052      	movs	r0, #82	; 0x52
 80010fe:	f7ff fe99 	bl	8000e34 <DEV_I2C_Init>
    printf("ID = 0x%X \r\n",TSL2591_Read_Byte(ID_REGISTER));
 8001102:	2012      	movs	r0, #18
 8001104:	f7ff ff22 	bl	8000f4c <TSL2591_Read_Byte>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <TSL2591_Init+0x3c>)
 800110e:	f004 fb8f 	bl	8005830 <iprintf>
    TSL2591_Enable();
 8001112:	f7ff ff57 	bl	8000fc4 <TSL2591_Enable>
    TSL2591_Set_Gain(MEDIUM_AGAIN);//25X GAIN
 8001116:	2010      	movs	r0, #16
 8001118:	f7ff ff7c 	bl	8001014 <TSL2591_Set_Gain>
    TSL2591_Set_IntegralTime(ATIME_200MS);//200ms Integration time
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffaf 	bl	8001080 <TSL2591_Set_IntegralTime>
    TSL2591_Write_Byte(PERSIST_REGISTER, 0x01);//filter
 8001122:	2101      	movs	r1, #1
 8001124:	200c      	movs	r0, #12
 8001126:	f7ff ff37 	bl	8000f98 <TSL2591_Write_Byte>
    TSL2591_Disable();
 800112a:	f7ff ff53 	bl	8000fd4 <TSL2591_Disable>
    return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08006c40 	.word	0x08006c40

08001138 <TSL2591_Read_Lux>:
function:	Read TSL2591 data to convert to Lux value
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Lux(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
    UWORD atime, max_counts,channel_0,channel_1;
    TSL2591_Enable();
 800113e:	f7ff ff41 	bl	8000fc4 <TSL2591_Enable>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001148:	e007      	b.n	800115a <TSL2591_Read_Lux+0x22>
        DEV_Delay_ms(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f7ff fe60 	bl	8000e10 <DEV_Delay_ms>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 8001150:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001154:	3301      	adds	r3, #1
 8001156:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800115a:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001164:	429a      	cmp	r2, r3
 8001166:	daf0      	bge.n	800114a <TSL2591_Read_Lux+0x12>
    }
    if(DEV_Digital_Read(INT_PIN) == 1)
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4867      	ldr	r0, [pc, #412]	; (800130c <TSL2591_Read_Lux+0x1d4>)
 800116e:	f001 f891 	bl	8002294 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d103      	bne.n	8001180 <TSL2591_Read_Lux+0x48>
            printf("INT 0\r\n"); 
 8001178:	4865      	ldr	r0, [pc, #404]	; (8001310 <TSL2591_Read_Lux+0x1d8>)
 800117a:	f004 fbdf 	bl	800593c <puts>
 800117e:	e002      	b.n	8001186 <TSL2591_Read_Lux+0x4e>
    else
             printf("INT 1\r\n"); 
 8001180:	4864      	ldr	r0, [pc, #400]	; (8001314 <TSL2591_Read_Lux+0x1dc>)
 8001182:	f004 fbdb 	bl	800593c <puts>
    channel_0 = TSL2591_Read_Channel0();
 8001186:	f7ff ffa7 	bl	80010d8 <TSL2591_Read_Channel0>
 800118a:	4603      	mov	r3, r0
 800118c:	84bb      	strh	r3, [r7, #36]	; 0x24
    channel_1 = TSL2591_Read_Channel1();
 800118e:	f7ff ffab 	bl	80010e8 <TSL2591_Read_Channel1>
 8001192:	4603      	mov	r3, r0
 8001194:	847b      	strh	r3, [r7, #34]	; 0x22
    TSL2591_Disable();
 8001196:	f7ff ff1d 	bl	8000fd4 <TSL2591_Disable>
    TSL2591_Enable();
 800119a:	f7ff ff13 	bl	8000fc4 <TSL2591_Enable>
    TSL2591_Write_Byte(0xE7, 0x13);
 800119e:	2113      	movs	r1, #19
 80011a0:	20e7      	movs	r0, #231	; 0xe7
 80011a2:	f7ff fef9 	bl	8000f98 <TSL2591_Write_Byte>
    TSL2591_Disable();
 80011a6:	f7ff ff15 	bl	8000fd4 <TSL2591_Disable>
    
    atime = 100 * TSL2591_Time + 100;
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	0091      	lsls	r1, r2, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	460b      	mov	r3, r1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	82fb      	strh	r3, [r7, #22]
    if(TSL2591_Time == ATIME_100MS){
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <TSL2591_Read_Lux+0x9e>
        max_counts = MAX_COUNT_100MS;
 80011ce:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80011d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011d4:	e002      	b.n	80011dc <TSL2591_Read_Lux+0xa4>
    }else{
        max_counts = MAX_COUNT;
 80011d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011da:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    UBYTE gain_t;
    if (channel_0 >= max_counts || channel_1 >= max_counts){
 80011dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d203      	bcs.n	80011ec <TSL2591_Read_Lux+0xb4>
 80011e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d32d      	bcc.n	8001248 <TSL2591_Read_Lux+0x110>
            gain_t = TSL2591_Get_Gain();
 80011ec:	f7ff fefa 	bl	8000fe4 <TSL2591_Get_Gain>
 80011f0:	4603      	mov	r3, r0
 80011f2:	757b      	strb	r3, [r7, #21]
            if(gain_t != LOW_AGAIN){
 80011f4:	7d7b      	ldrb	r3, [r7, #21]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d021      	beq.n	800123e <TSL2591_Read_Lux+0x106>
                gain_t = ((gain_t>>4)-1)<<4;
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	757b      	strb	r3, [r7, #21]
                TSL2591_Set_Gain(gain_t);
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff02 	bl	8001014 <TSL2591_Set_Gain>
                channel_0 = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	84bb      	strh	r3, [r7, #36]	; 0x24
                channel_1 = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 8001218:	e007      	b.n	800122a <TSL2591_Read_Lux+0xf2>
                    channel_0 = TSL2591_Read_Channel0();
 800121a:	f7ff ff5d 	bl	80010d8 <TSL2591_Read_Channel0>
 800121e:	4603      	mov	r3, r0
 8001220:	84bb      	strh	r3, [r7, #36]	; 0x24
                    channel_1 = TSL2591_Read_Channel1();
 8001222:	f7ff ff61 	bl	80010e8 <TSL2591_Read_Channel1>
 8001226:	4603      	mov	r3, r0
 8001228:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 800122a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f4      	beq.n	800121a <TSL2591_Read_Lux+0xe2>
 8001230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f1      	beq.n	800121a <TSL2591_Read_Lux+0xe2>
                }
                    DEV_Delay_ms(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f7ff fdea 	bl	8000e10 <DEV_Delay_ms>
 800123c:	e004      	b.n	8001248 <TSL2591_Read_Lux+0x110>
            }else{
                printf("Numerical overflow!/r/n");
 800123e:	4836      	ldr	r0, [pc, #216]	; (8001318 <TSL2591_Read_Lux+0x1e0>)
 8001240:	f004 faf6 	bl	8005830 <iprintf>
                return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e052      	b.n	80012ee <TSL2591_Read_Lux+0x1b6>
            }
    }
    double again;
    again = 1.0;
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <TSL2591_Read_Lux+0x1e4>)
 800124e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(TSL2591_Gain == MEDIUM_AGAIN){
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d105      	bne.n	8001266 <TSL2591_Read_Lux+0x12e>
        again = 25.0;
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <TSL2591_Read_Lux+0x1ec>)
 8001260:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001264:	e012      	b.n	800128c <TSL2591_Read_Lux+0x154>
    }else if(TSL2591_Gain == HIGH_AGAIN){
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d105      	bne.n	800127a <TSL2591_Read_Lux+0x142>
        again = 428.0;
 800126e:	a322      	add	r3, pc, #136	; (adr r3, 80012f8 <TSL2591_Read_Lux+0x1c0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001278:	e008      	b.n	800128c <TSL2591_Read_Lux+0x154>
    }else if(TSL2591_Gain == MAX_AGAIN){
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b30      	cmp	r3, #48	; 0x30
 8001280:	d104      	bne.n	800128c <TSL2591_Read_Lux+0x154>
        again = 9876.0;
 8001282:	a31f      	add	r3, pc, #124	; (adr r3, 8001300 <TSL2591_Read_Lux+0x1c8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    double Cpl;
    UWORD lux1,lux2=0;
 800128c:	2300      	movs	r3, #0
 800128e:	827b      	strh	r3, [r7, #18]
    
    Cpl = (atime * again) / LUX_DF;
 8001290:	8afb      	ldrh	r3, [r7, #22]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f946 	bl	8000524 <__aeabi_i2d>
 8001298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800129c:	f7ff f9ac 	bl	80005f8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <TSL2591_Read_Lux+0x1f0>)
 80012ae:	f7ff facd 	bl	800084c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lux1 = (int)((channel_0 - (2 * channel_1)) / Cpl);
 80012ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f92e 	bl	8000524 <__aeabi_i2d>
 80012c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012cc:	f7ff fabe 	bl	800084c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fba0 	bl	8000a1c <__aeabi_d2iz>
 80012dc:	4603      	mov	r3, r0
 80012de:	80fb      	strh	r3, [r7, #6]
    // lux2 = ((0.6 * channel_0) - (channel_1)) / Cpl;
    // This is a two segment lux equation where the first 
    // segment (Lux1) covers fluorescent and incandescent light 
    // and the second segment (Lux2) covers dimmed incandescent light

    if(lux1>lux2){
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	8a7b      	ldrh	r3, [r7, #18]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d901      	bls.n	80012ec <TSL2591_Read_Lux+0x1b4>
        return lux1;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	e000      	b.n	80012ee <TSL2591_Read_Lux+0x1b6>
    }else{
        return lux2;
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
    }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	00000000 	.word	0x00000000
 80012fc:	407ac000 	.word	0x407ac000
 8001300:	00000000 	.word	0x00000000
 8001304:	40c34a00 	.word	0x40c34a00
 8001308:	20000093 	.word	0x20000093
 800130c:	40020000 	.word	0x40020000
 8001310:	08006c50 	.word	0x08006c50
 8001314:	08006c58 	.word	0x08006c58
 8001318:	08006c60 	.word	0x08006c60
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	20000092 	.word	0x20000092
 8001324:	40390000 	.word	0x40390000
 8001328:	4087d000 	.word	0x4087d000

0800132c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <MX_GPIO_Init+0x98>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2120      	movs	r1, #32
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <MX_GPIO_Init+0x9c>)
 8001380:	f000 ffa0 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001384:	2320      	movs	r3, #32
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <MX_GPIO_Init+0x9c>)
 800139c:	f000 fdf6 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 80013a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0x9c>)
 80013b6:	f000 fde9 	bl	8001f8c <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2C1_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x50>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_I2C1_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2C1_Init+0x50>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C1_Init+0x50>)
 800140a:	f000 ff8f 	bl	800232c <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 f96e 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000094 	.word	0x20000094
 8001420:	40005400 	.word	0x40005400
 8001424:	000186a0 	.word	0x000186a0

08001428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12c      	bne.n	80014a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146c:	2312      	movs	r3, #18
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001478:	2304      	movs	r3, #4
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_I2C_MspInit+0x8c>)
 8001484:	f000 fd82 	bl	8001f8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fb2c 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f834 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f7ff ff32 	bl	800132c <MX_GPIO_Init>
  MX_TIM10_Init();
 80014c8:	f000 fa36 	bl	8001938 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80014cc:	f000 fa80 	bl	80019d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80014d0:	f7ff ff7c 	bl	80013cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <main+0x68>)
 80014d6:	f003 f805 	bl	80044e4 <HAL_TIM_Base_Start_IT>
  DEV_ModuleInit();
 80014da:	f7ff fd2d 	bl	8000f38 <DEV_ModuleInit>
  TSL2591_Init();
 80014de:	f7ff fe0b 	bl	80010f8 <TSL2591_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	value = TSL2591_Read_Lux();
 80014e2:	f7ff fe29 	bl	8001138 <TSL2591_Read_Lux>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <main+0x6c>)
 80014ec:	801a      	strh	r2, [r3, #0]
	counter = counter + 0.01;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <main+0x70>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f828 	bl	8000548 <__aeabi_f2d>
 80014f8:	a307      	add	r3, pc, #28	; (adr r3, 8001518 <main+0x60>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7fe fec5 	bl	800028c <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff faaf 	bl	8000a6c <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	4a05      	ldr	r2, [pc, #20]	; (8001528 <main+0x70>)
 8001512:	6013      	str	r3, [r2, #0]
	value = TSL2591_Read_Lux();
 8001514:	e7e5      	b.n	80014e2 <main+0x2a>
 8001516:	bf00      	nop
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f847ae1 	.word	0x3f847ae1
 8001520:	20000154 	.word	0x20000154
 8001524:	2000013c 	.word	0x2000013c
 8001528:	20000140 	.word	0x20000140

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f004 f970 	bl	8005820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <SystemClock_Config+0xb4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <SystemClock_Config+0xb4>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <SystemClock_Config+0xb4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <SystemClock_Config+0xb8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <SystemClock_Config+0xb8>)
 8001576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <SystemClock_Config+0xb8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f002 faf9 	bl	8003b94 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015a8:	f000 f8a4 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fd5c 	bl	8004084 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015d2:	f000 f88f 	bl	80016f4 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM10) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d14c      	bne.n	8001694 <HAL_TIM_PeriodElapsedCallback+0xac>
		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		HAL_I2C_Master_Transmit(&hi2c1, (0x18 << 1), &TempReg, 1, HAL_MAX_DELAY);
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001604:	2130      	movs	r1, #48	; 0x30
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001608:	f000 ffd4 	bl	80025b4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (0x18 << 1), &buf[0], 2, HAL_MAX_DELAY);
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2302      	movs	r3, #2
 8001614:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001616:	2130      	movs	r1, #48	; 0x30
 8001618:	4822      	ldr	r0, [pc, #136]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800161a:	f001 f8c9 	bl	80027b0 <HAL_I2C_Master_Receive>
		temp_val = (uint8_t)(buf[0] << 4) + buf[1] / 16.0;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff7c 	bl	8000524 <__aeabi_i2d>
 800162c:	4604      	mov	r4, r0
 800162e:	460d      	mov	r5, r1
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001632:	785b      	ldrb	r3, [r3, #1]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff75 	bl	8000524 <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001640:	f7ff f904 	bl	800084c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fe1e 	bl	800028c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa08 	bl	8000a6c <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001660:	6013      	str	r3, [r2, #0]
		TemperatureInt = temp_val * 1000;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016b4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 2a90 	vmov	r2, s15
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800167a:	601a      	str	r2, [r3, #0]
		sprintf(message, "%d ", TemperatureInt);
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	490e      	ldr	r1, [pc, #56]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001686:	f004 f961 	bl	800594c <siprintf>

		HAL_UART_Transmit_IT(&huart1, message, sizeof(message)); //sending one byte
 800168a:	2250      	movs	r2, #80	; 0x50
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001690:	f003 f99b 	bl	80049ca <HAL_UART_Transmit_IT>
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	40014400 	.word	0x40014400
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000094 	.word	0x20000094
 80016a8:	20000144 	.word	0x20000144
 80016ac:	40300000 	.word	0x40300000
 80016b0:	2000014c 	.word	0x2000014c
 80016b4:	447a0000 	.word	0x447a0000
 80016b8:	20000138 	.word	0x20000138
 80016bc:	08006c78 	.word	0x08006c78
 80016c0:	200000e8 	.word	0x200000e8
 80016c4:	2000019c 	.word	0x2000019c

080016c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_UART_TxCpltCallback+0x24>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d103      	bne.n	80016e2 <HAL_UART_TxCpltCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016da:	2120      	movs	r1, #32
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <HAL_UART_TxCpltCallback+0x28>)
 80016de:	f000 fe0a 	bl	80022f6 <HAL_GPIO_TogglePin>
	}
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40020000 	.word	0x40020000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 fa0e 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017aa:	f002 fefd 	bl	80045a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000154 	.word	0x20000154

080017b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART1_IRQHandler+0x10>)
 80017be:	f003 f949 	bl	8004a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000019c 	.word	0x2000019c

080017cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017de:	f3af 8000 	nop.w
 80017e2:	4601      	mov	r1, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbf0      	blt.n	80017de <_read+0x12>
	}

return len;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e009      	b.n	800182c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf1      	blt.n	8001818 <_write+0x12>
	}
	return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001866:	605a      	str	r2, [r3, #4]
	return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f003 ff78 	bl	80057cc <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	20000150 	.word	0x20000150
 8001910:	200001f8 	.word	0x200001f8

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_TIM10_Init+0x40>)
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <MX_TIM10_Init+0x44>)
 8001940:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1599;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <MX_TIM10_Init+0x40>)
 8001944:	f240 623f 	movw	r2, #1599	; 0x63f
 8001948:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_TIM10_Init+0x40>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_TIM10_Init+0x40>)
 8001952:	f242 720f 	movw	r2, #9999	; 0x270f
 8001956:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_TIM10_Init+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_TIM10_Init+0x40>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_TIM10_Init+0x40>)
 8001966:	f002 fd6d 	bl	8004444 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001970:	f7ff fec0 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000154 	.word	0x20000154
 800197c:	40014400 	.word	0x40014400

08001980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_TIM_Base_MspInit+0x48>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d115      	bne.n	80019be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_TIM_Base_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_TIM_Base_MspInit+0x4c>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_TIM_Base_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2019      	movs	r0, #25
 80019b4:	f000 fa21 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019b8:	2019      	movs	r0, #25
 80019ba:	f000 fa3a 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40014400 	.word	0x40014400
 80019cc:	40023800 	.word	0x40023800

080019d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART1_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART1_UART_Init+0x4c>)
 8001a08:	f002 ff92 	bl	8004930 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f7ff fe6f 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000019c 	.word	0x2000019c
 8001a20:	40011000 	.word	0x40011000

08001a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_UART_MspInit+0x94>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d134      	bne.n	8001ab0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_UART_MspInit+0x98>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001a7e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a90:	2307      	movs	r3, #7
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_UART_MspInit+0x9c>)
 8001a9c:	f000 fa76 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2025      	movs	r0, #37	; 0x25
 8001aa6:	f000 f9a8 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aaa:	2025      	movs	r0, #37	; 0x25
 8001aac:	f000 f9c1 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ff11 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f003 fe71 	bl	80057d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fcdf 	bl	80014b8 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b08:	08006d3c 	.word	0x08006d3c
  ldr r2, =_sbss
 8001b0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b10:	200001f4 	.word	0x200001f4

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f94f 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fdd8 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f967 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f92f 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	20000008 	.word	0x20000008

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	200001e0 	.word	0x200001e0

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200001e0 	.word	0x200001e0

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff feb6 	bl	8001be4 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d008      	beq.n	8001e98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e052      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0216 	bic.w	r2, r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <HAL_DMA_Abort+0x62>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	e013      	b.n	8001f12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eea:	f7ff fe7b 	bl	8001be4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d90c      	bls.n	8001f12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e015      	b.n	8001f3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e4      	bne.n	8001eea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00c      	b.n	8001f7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2205      	movs	r2, #5
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e159      	b.n	800225c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8148 	bne.w	8002256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a2 	beq.w	8002256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a52      	ldr	r2, [pc, #328]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2f0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x202>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x1fe>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1fa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a46      	ldr	r2, [pc, #280]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a45      	ldr	r2, [pc, #276]	; (800228c <HAL_GPIO_Init+0x300>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1f2>
 800217a:	2304      	movs	r3, #4
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800217e:	2307      	movs	r3, #7
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218e:	2300      	movs	r3, #0
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a0:	4935      	ldr	r1, [pc, #212]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_GPIO_Init+0x304>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_GPIO_Init+0x304>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_GPIO_Init+0x304>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	f67f aea2 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e001      	b.n	80022b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4013      	ands	r3, r2
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43d9      	mvns	r1, r3
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	400b      	ands	r3, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e12b      	b.n	8002596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff f868 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002390:	f002 f830 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a81      	ldr	r2, [pc, #516]	; (80025a0 <HAL_I2C_Init+0x274>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d807      	bhi.n	80023b0 <HAL_I2C_Init+0x84>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a80      	ldr	r2, [pc, #512]	; (80025a4 <HAL_I2C_Init+0x278>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e006      	b.n	80023be <HAL_I2C_Init+0x92>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a7d      	ldr	r2, [pc, #500]	; (80025a8 <HAL_I2C_Init+0x27c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	bf94      	ite	ls
 80023b8:	2301      	movls	r3, #1
 80023ba:	2300      	movhi	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0e7      	b.n	8002596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a78      	ldr	r2, [pc, #480]	; (80025ac <HAL_I2C_Init+0x280>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9b      	lsrs	r3, r3, #18
 80023d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a6a      	ldr	r2, [pc, #424]	; (80025a0 <HAL_I2C_Init+0x274>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d802      	bhi.n	8002400 <HAL_I2C_Init+0xd4>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	e009      	b.n	8002414 <HAL_I2C_Init+0xe8>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_I2C_Init+0x284>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	3301      	adds	r3, #1
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	495c      	ldr	r1, [pc, #368]	; (80025a0 <HAL_I2C_Init+0x274>)
 8002430:	428b      	cmp	r3, r1
 8002432:	d819      	bhi.n	8002468 <HAL_I2C_Init+0x13c>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e59      	subs	r1, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002448:	400b      	ands	r3, r1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_I2C_Init+0x138>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e59      	subs	r1, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fbb1 f3f3 	udiv	r3, r1, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	e051      	b.n	8002508 <HAL_I2C_Init+0x1dc>
 8002464:	2304      	movs	r3, #4
 8002466:	e04f      	b.n	8002508 <HAL_I2C_Init+0x1dc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <HAL_I2C_Init+0x168>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e012      	b.n	80024ba <HAL_I2C_Init+0x18e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	0099      	lsls	r1, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Init+0x196>
 80024be:	2301      	movs	r3, #1
 80024c0:	e022      	b.n	8002508 <HAL_I2C_Init+0x1dc>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10e      	bne.n	80024e8 <HAL_I2C_Init+0x1bc>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1e58      	subs	r0, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	440b      	add	r3, r1
 80024d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Init+0x1dc>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e58      	subs	r0, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	0099      	lsls	r1, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	6809      	ldr	r1, [r1, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6911      	ldr	r1, [r2, #16]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	000186a0 	.word	0x000186a0
 80025a4:	001e847f 	.word	0x001e847f
 80025a8:	003d08ff 	.word	0x003d08ff
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
 80025c4:	4613      	mov	r3, r2
 80025c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff fb0c 	bl	8001be4 <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	f040 80e0 	bne.w	800279c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	4970      	ldr	r1, [pc, #448]	; (80027a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f001 f8f6 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0d3      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2C_Master_Transmit+0x50>
 8002600:	2302      	movs	r3, #2
 8002602:	e0cc      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d007      	beq.n	800262a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2210      	movs	r2, #16
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	893a      	ldrh	r2, [r7, #8]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a50      	ldr	r2, [pc, #320]	; (80027ac <HAL_I2C_Master_Transmit+0x1f8>)
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fde2 	bl	800323c <I2C_MasterRequestWrite>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e08d      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002698:	e066      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f001 f970 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d107      	bne.n	80026c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11b      	bne.n	800273c <HAL_I2C_Master_Transmit+0x188>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d017      	beq.n	800273c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	6a39      	ldr	r1, [r7, #32]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f001 f960 	bl	8003a06 <I2C_WaitOnBTFFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e01a      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d194      	bne.n	800269a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00100002 	.word	0x00100002
 80027ac:	ffff0000 	.word	0xffff0000

080027b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	461a      	mov	r2, r3
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
 80027c0:	4613      	mov	r3, r2
 80027c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fa0e 	bl	8001be4 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	f040 820b 	bne.w	8002bee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2319      	movs	r3, #25
 80027de:	2201      	movs	r2, #1
 80027e0:	497c      	ldr	r1, [pc, #496]	; (80029d4 <HAL_I2C_Master_Receive+0x224>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fff8 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
 80027f0:	e1fe      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_I2C_Master_Receive+0x50>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e1f7      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d007      	beq.n	8002826 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2222      	movs	r2, #34	; 0x22
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2210      	movs	r2, #16
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	893a      	ldrh	r2, [r7, #8]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a5c      	ldr	r2, [pc, #368]	; (80029d8 <HAL_I2C_Master_Receive+0x228>)
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002868:	8979      	ldrh	r1, [r7, #10]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fd66 	bl	8003340 <I2C_MasterRequestRead>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1b8      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d113      	bne.n	80028ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	623b      	str	r3, [r7, #32]
 800289a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e18c      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d11b      	bne.n	80028ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e16c      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d11b      	bne.n	800292e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002904:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	e14c      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002954:	e138      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b03      	cmp	r3, #3
 800295c:	f200 80f1 	bhi.w	8002b42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b01      	cmp	r3, #1
 8002966:	d123      	bne.n	80029b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f001 f88b 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e139      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ae:	e10b      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d14e      	bne.n	8002a56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	2200      	movs	r2, #0
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_I2C_Master_Receive+0x22c>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 ff08 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e10e      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
 80029d2:	bf00      	nop
 80029d4:	00100002 	.word	0x00100002
 80029d8:	ffff0000 	.word	0xffff0000
 80029dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a54:	e0b8      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4966      	ldr	r1, [pc, #408]	; (8002bf8 <HAL_I2C_Master_Receive+0x448>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 feb9 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0bf      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	494f      	ldr	r1, [pc, #316]	; (8002bf8 <HAL_I2C_Master_Receive+0x448>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fe8b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e091      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b40:	e042      	b.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 ff9e 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e04c      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d118      	bne.n	8002bc8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f aec2 	bne.w	8002956 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	00010004 	.word	0x00010004

08002bfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c16:	f7fe ffe5 	bl	8001be4 <HAL_GetTick>
 8002c1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	f040 80d9 	bne.w	8002ddc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2319      	movs	r3, #25
 8002c30:	2201      	movs	r2, #1
 8002c32:	496d      	ldr	r1, [pc, #436]	; (8002de8 <HAL_I2C_Mem_Write+0x1ec>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fdcf 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0cc      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Mem_Write+0x56>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0c5      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d007      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2221      	movs	r2, #33	; 0x21
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_I2C_Mem_Write+0x1f0>)
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cba:	88f8      	ldrh	r0, [r7, #6]
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4603      	mov	r3, r0
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fc06 	bl	80034dc <I2C_RequestMemoryWrite>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d052      	beq.n	8002d7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e081      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fe50 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d107      	bne.n	8002d02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06b      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d11b      	bne.n	8002d7c <HAL_I2C_Mem_Write+0x180>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1aa      	bne.n	8002cda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fe3c 	bl	8003a06 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d107      	bne.n	8002dac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e016      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	00100002 	.word	0x00100002
 8002dec:	ffff0000 	.word	0xffff0000

08002df0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0a:	f7fe feeb 	bl	8001be4 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	f040 8208 	bne.w	800322e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2319      	movs	r3, #25
 8002e24:	2201      	movs	r2, #1
 8002e26:	497b      	ldr	r1, [pc, #492]	; (8003014 <HAL_I2C_Mem_Read+0x224>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fcd5 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	e1fb      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x56>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e1f4      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2222      	movs	r2, #34	; 0x22
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	; 0x40
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_I2C_Mem_Read+0x228>)
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eae:	88f8      	ldrh	r0, [r7, #6]
 8002eb0:	893a      	ldrh	r2, [r7, #8]
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fba2 	bl	8003608 <I2C_RequestMemoryRead>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1b0      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d113      	bne.n	8002efe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e184      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d11b      	bne.n	8002f3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e164      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d11b      	bne.n	8002f7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	e144      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f94:	e138      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	f200 80f1 	bhi.w	8003182 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d123      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fd6b 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e139      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fee:	e10b      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d14e      	bne.n	8003096 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	2200      	movs	r2, #0
 8003000:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_I2C_Mem_Read+0x22c>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fbe8 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e10e      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000
 800301c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003094:	e0b8      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	2200      	movs	r2, #0
 800309e:	4966      	ldr	r1, [pc, #408]	; (8003238 <HAL_I2C_Mem_Read+0x448>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fb99 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0bf      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f8:	2200      	movs	r2, #0
 80030fa:	494f      	ldr	r1, [pc, #316]	; (8003238 <HAL_I2C_Mem_Read+0x448>)
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fb6b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e091      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003180:	e042      	b.n	8003208 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fc7e 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e04c      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d118      	bne.n	8003208 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	f47f aec2 	bne.w	8002f96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	00010004 	.word	0x00010004

0800323c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d006      	beq.n	8003266 <I2C_MasterRequestWrite+0x2a>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d003      	beq.n	8003266 <I2C_MasterRequestWrite+0x2a>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003264:	d108      	bne.n	8003278 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e00b      	b.n	8003290 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	2b12      	cmp	r3, #18
 800327e:	d107      	bne.n	8003290 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fa9b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d103      	bne.n	80032c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e035      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032cc:	d108      	bne.n	80032e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	e01b      	b.n	8003318 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e0:	897b      	ldrh	r3, [r7, #10]
 80032e2:	11db      	asrs	r3, r3, #7
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0306 	and.w	r3, r3, #6
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f063 030f 	orn	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <I2C_MasterRequestWrite+0xfc>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fac1 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e010      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4907      	ldr	r1, [pc, #28]	; (800333c <I2C_MasterRequestWrite+0x100>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fab1 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	00010008 	.word	0x00010008
 800333c:	00010002 	.word	0x00010002

08003340 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d006      	beq.n	800337a <I2C_MasterRequestRead+0x3a>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d003      	beq.n	800337a <I2C_MasterRequestRead+0x3a>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003378:	d108      	bne.n	800338c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e00b      	b.n	80033a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b11      	cmp	r3, #17
 8003392:	d107      	bne.n	80033a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa11 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ca:	d103      	bne.n	80033d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e079      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e0:	d108      	bne.n	80033f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	e05f      	b.n	80034b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033f4:	897b      	ldrh	r3, [r7, #10]
 80033f6:	11db      	asrs	r3, r3, #7
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f063 030f 	orn	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4930      	ldr	r1, [pc, #192]	; (80034d4 <I2C_MasterRequestRead+0x194>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa37 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e054      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4929      	ldr	r1, [pc, #164]	; (80034d8 <I2C_MasterRequestRead+0x198>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fa27 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e044      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003466:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f9af 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e017      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	11db      	asrs	r3, r3, #7
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f063 030e 	orn	r3, r3, #14
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4907      	ldr	r1, [pc, #28]	; (80034d8 <I2C_MasterRequestRead+0x198>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9e3 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	00010008 	.word	0x00010008
 80034d8:	00010002 	.word	0x00010002

080034dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	4608      	mov	r0, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	817b      	strh	r3, [r7, #10]
 80034ee:	460b      	mov	r3, r1
 80034f0:	813b      	strh	r3, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2200      	movs	r2, #0
 800350e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f960 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d103      	bne.n	8003536 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e05f      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	492d      	ldr	r1, [pc, #180]	; (8003604 <I2C_RequestMemoryWrite+0x128>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f998 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e04c      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6a39      	ldr	r1, [r7, #32]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fa02 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e02b      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e021      	b.n	80035f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f9dc 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e005      	b.n	80035fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00010002 	.word	0x00010002

08003608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2200      	movs	r2, #0
 800364a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8c2 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d103      	bne.n	8003672 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0aa      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	4952      	ldr	r1, [pc, #328]	; (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f8fa 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e097      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	6a39      	ldr	r1, [r7, #32]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f964 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d107      	bne.n	80036da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e076      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	e021      	b.n	8003734 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	6a39      	ldr	r1, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f93e 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b04      	cmp	r3, #4
 8003714:	d107      	bne.n	8003726 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e050      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6a39      	ldr	r1, [r7, #32]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f923 	bl	8003984 <I2C_WaitOnTXEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	2b04      	cmp	r3, #4
 800374a:	d107      	bne.n	800375c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e035      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800376e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2200      	movs	r2, #0
 8003778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f82b 	bl	80037d8 <I2C_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003796:	d103      	bne.n	80037a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e013      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	4906      	ldr	r1, [pc, #24]	; (80037d4 <I2C_RequestMemoryRead+0x1cc>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f863 	bl	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	00010002 	.word	0x00010002

080037d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	e025      	b.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d021      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe f9f7 	bl	8001be4 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d116      	bne.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e023      	b.n	800387e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10d      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	e00c      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d0b6      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003894:	e051      	b.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d123      	bne.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0204 	orr.w	r2, r3, #4
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e046      	b.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d021      	beq.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fe f975 	bl	8001be4 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e020      	b.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10c      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e00b      	b.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d18d      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003990:	e02d      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f8ce 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02d      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d021      	beq.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fe f91b 	bl	8001be4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e007      	b.n	80039fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d1ca      	bne.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a12:	e02d      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f88d 	bl	8003b34 <I2C_IsAcknowledgeFailed>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02d      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d021      	beq.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2c:	f7fe f8da 	bl	8001be4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e007      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d1ca      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a94:	e042      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d119      	bne.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e029      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7fe f884 	bl	8001be4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d1b5      	bne.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d11b      	bne.n	8003b84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e267      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e242      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6f      	ldr	r2, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6c      	ldr	r2, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd ffca 	bl	8001be4 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd ffc6 	bl	8001be4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e207      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd ffb6 	bl	8001be4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd ffb2 	bl	8001be4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1f3      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1c7      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd ff6b 	bl	8001be4 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd ff67 	bl	8001be4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1a8      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd ff4a 	bl	8001be4 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd ff46 	bl	8001be4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e187      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd ff2a 	bl	8001be4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd ff26 	bl	8001be4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e167      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e01b      	b.n	8003dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd ff13 	bl	8001be4 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd ff0f 	bl	8001be4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d907      	bls.n	8003de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e150      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	42470000 	.word	0x42470000
 8003ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ea      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b77      	ldr	r3, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b74      	ldr	r3, [pc, #464]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a73      	ldr	r2, [pc, #460]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fecf 	bl	8001be4 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fecb 	bl	8001be4 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e10c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2ea>
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a63      	ldr	r2, [pc, #396]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x30c>
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a5e      	ldr	r2, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a5b      	ldr	r2, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fe90 	bl	8001be4 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fe8c 	bl	8001be4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0cb      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	4b49      	ldr	r3, [pc, #292]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x334>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eec:	f7fd fe7a 	bl	8001be4 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fe76 	bl	8001be4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0b5      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a38      	ldr	r2, [pc, #224]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a1 	beq.w	8004074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f32:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d05c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d141      	bne.n	8003fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe4a 	bl	8001be4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fe46 	bl	8001be4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e087      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	491b      	ldr	r1, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fe1f 	bl	8001be4 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fe1b 	bl	8001be4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e05c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x416>
 8003fc8:	e054      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fe08 	bl	8001be4 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fe04 	bl	8001be4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e045      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
 8003ff6:	e03d      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e038      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8004004:	40023800 	.word	0x40023800
 8004008:	40007000 	.word	0x40007000
 800400c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d028      	beq.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d121      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d11a      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fd fd36 	bl	8001be4 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fd32 	bl	8001be4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f821 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fc96 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	08006c7c 	.word	0x08006c7c
 8004248:	20000004 	.word	0x20000004
 800424c:	20000008 	.word	0x20000008

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b090      	sub	sp, #64	; 0x40
 8004256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
 800425c:	2300      	movs	r3, #0
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	2300      	movs	r3, #0
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d00d      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x3a>
 8004282:	e09b      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004288:	e09b      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428e:	e098      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d028      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	627a      	str	r2, [r7, #36]	; 0x24
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b8:	2100      	movs	r1, #0
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042bc:	fb03 f201 	mul.w	r2, r3, r1
 80042c0:	2300      	movs	r3, #0
 80042c2:	fb00 f303 	mul.w	r3, r0, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	4a43      	ldr	r2, [pc, #268]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ca:	fba0 1202 	umull	r1, r2, r0, r2
 80042ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d0:	460a      	mov	r2, r1
 80042d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d6:	4413      	add	r3, r2
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	2200      	movs	r2, #0
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ea:	f7fc fc0f 	bl	8000b0c <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4613      	mov	r3, r2
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f6:	e053      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	2200      	movs	r2, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	617a      	str	r2, [r7, #20]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800430a:	f04f 0b00 	mov.w	fp, #0
 800430e:	4652      	mov	r2, sl
 8004310:	465b      	mov	r3, fp
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004320:	0150      	lsls	r0, r2, #5
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	ebb2 080a 	subs.w	r8, r2, sl
 800432a:	eb63 090b 	sbc.w	r9, r3, fp
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800433a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800433e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004342:	ebb2 0408 	subs.w	r4, r2, r8
 8004346:	eb63 0509 	sbc.w	r5, r3, r9
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	00eb      	lsls	r3, r5, #3
 8004354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004358:	00e2      	lsls	r2, r4, #3
 800435a:	4614      	mov	r4, r2
 800435c:	461d      	mov	r5, r3
 800435e:	eb14 030a 	adds.w	r3, r4, sl
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	eb45 030b 	adc.w	r3, r5, fp
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004376:	4629      	mov	r1, r5
 8004378:	028b      	lsls	r3, r1, #10
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004380:	4621      	mov	r1, r4
 8004382:	028a      	lsls	r2, r1, #10
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	2200      	movs	r2, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004394:	f7fc fbba 	bl	8000b0c <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3740      	adds	r7, #64	; 0x40
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	017d7840 	.word	0x017d7840

080043dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000004 	.word	0x20000004

080043f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043f8:	f7ff fff0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0a9b      	lsrs	r3, r3, #10
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	08006c8c 	.word	0x08006c8c

0800441c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004420:	f7ff ffdc 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0b5b      	lsrs	r3, r3, #13
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	08006c8c 	.word	0x08006c8c

08004444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e041      	b.n	80044da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd fa88 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 f9c0 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e044      	b.n	8004586 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_TIM_Base_Start_IT+0xb0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d013      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_TIM_Base_Start_IT+0xb4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_TIM_Base_Start_IT+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d111      	bne.n	8004574 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d010      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004572:	e007      	b.n	8004584 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40014000 	.word	0x40014000

080045a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0202 	mvn.w	r2, #2
 80045d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8ee 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8e0 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8f1 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d122      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0204 	mvn.w	r2, #4
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8c4 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8b6 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8c7 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b08      	cmp	r3, #8
 8004664:	d122      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b08      	cmp	r3, #8
 8004672:	d11b      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0208 	mvn.w	r2, #8
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f89a 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f88c 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f89d 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0210 	mvn.w	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f870 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f862 	bl	80047b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f873 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0201 	mvn.w	r2, #1
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fc ff5e 	bl	80015e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8e2 	bl	800491c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f838 	bl	80047f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b20      	cmp	r3, #32
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b20      	cmp	r3, #32
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0220 	mvn.w	r2, #32
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8ac 	bl	8004908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a31      	ldr	r2, [pc, #196]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a30      	ldr	r2, [pc, #192]	; (80048f4 <TIM_Base_SetConfig+0xec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01b      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d017      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <TIM_Base_SetConfig+0xe8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <TIM_Base_SetConfig+0xec>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <TIM_Base_SetConfig+0xf0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <TIM_Base_SetConfig+0xf4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <TIM_Base_SetConfig+0xf8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <TIM_Base_SetConfig+0xfc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <TIM_Base_SetConfig+0xe4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000
 8004900:	40014400 	.word	0x40014400
 8004904:	40014800 	.word	0x40014800

08004908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e03f      	b.n	80049c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd f864 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fcb5 	bl	80052e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d130      	bne.n	8004a46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Transmit_IT+0x26>
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e029      	b.n	8004a48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Transmit_IT+0x38>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e022      	b.n	8004a48 <HAL_UART_Transmit_IT+0x7e>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b0ba      	sub	sp, #232	; 0xe8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_UART_IRQHandler+0x66>
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb5b 	bl	800516e <UART_Receive_IT>
      return;
 8004ab8:	e256      	b.n	8004f68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80de 	beq.w	8004c80 <HAL_UART_IRQHandler+0x22c>
 8004ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80d1 	beq.w	8004c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_UART_IRQHandler+0xae>
 8004aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_UART_IRQHandler+0xd2>
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0202 	orr.w	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_UART_IRQHandler+0xf6>
 8004b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <HAL_UART_IRQHandler+0x126>
 8004b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0208 	orr.w	r2, r3, #8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 81ed 	beq.w	8004f5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x14e>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fae6 	bl	800516e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <HAL_UART_IRQHandler+0x17a>
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d04f      	beq.n	8004c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9ee 	bl	8004fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d141      	bne.n	8004c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3314      	adds	r3, #20
 8004be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1d9      	bne.n	8004be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d013      	beq.n	8004c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4a7d      	ldr	r2, [pc, #500]	; (8004e30 <HAL_UART_IRQHandler+0x3dc>)
 8004c3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fd f97f 	bl	8001f46 <HAL_DMA_Abort_IT>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e00e      	b.n	8004c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f990 	bl	8004f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e00a      	b.n	8004c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f98c 	bl	8004f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e006      	b.n	8004c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f988 	bl	8004f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c7a:	e170      	b.n	8004f5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	bf00      	nop
    return;
 8004c7e:	e16e      	b.n	8004f5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 814a 	bne.w	8004f1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8143 	beq.w	8004f1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 813c 	beq.w	8004f1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	f040 80b4 	bne.w	8004e34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8140 	beq.w	8004f62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cea:	429a      	cmp	r2, r3
 8004cec:	f080 8139 	bcs.w	8004f62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d02:	f000 8088 	beq.w	8004e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1d9      	bne.n	8004d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3314      	adds	r3, #20
 8004d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e1      	bne.n	8004d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3314      	adds	r3, #20
 8004d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e3      	bne.n	8004d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de6:	f023 0310 	bic.w	r3, r3, #16
 8004dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004df8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e3      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fd f828 	bl	8001e66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8b6 	bl	8004f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e2c:	e099      	b.n	8004f62 <HAL_UART_IRQHandler+0x50e>
 8004e2e:	bf00      	nop
 8004e30:	08005077 	.word	0x08005077
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808b 	beq.w	8004f66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8086 	beq.w	8004f66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e3      	bne.n	8004e5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3314      	adds	r3, #20
 8004eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e3      	bne.n	8004e92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0310 	bic.w	r3, r3, #16
 8004eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004efc:	61fa      	str	r2, [r7, #28]
 8004efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	69b9      	ldr	r1, [r7, #24]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	617b      	str	r3, [r7, #20]
   return(result);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e3      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f83e 	bl	8004f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f1c:	e023      	b.n	8004f66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_UART_IRQHandler+0x4ea>
 8004f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8b1 	bl	800509e <UART_Transmit_IT>
    return;
 8004f3c:	e014      	b.n	8004f68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00e      	beq.n	8004f68 <HAL_UART_IRQHandler+0x514>
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8f1 	bl	800513e <UART_EndTransmit_IT>
    return;
 8004f5c:	e004      	b.n	8004f68 <HAL_UART_IRQHandler+0x514>
    return;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <HAL_UART_IRQHandler+0x514>
      return;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HAL_UART_IRQHandler+0x514>
      return;
 8004f66:	bf00      	nop
  }
}
 8004f68:	37e8      	adds	r7, #232	; 0xe8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b095      	sub	sp, #84	; 0x54
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fd8:	643a      	str	r2, [r7, #64]	; 0x40
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3314      	adds	r3, #20
 800500a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800500c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b01      	cmp	r3, #1
 8005026:	d119      	bne.n	800505c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	60bb      	str	r3, [r7, #8]
   return(result);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	647b      	str	r3, [r7, #68]	; 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005048:	61ba      	str	r2, [r7, #24]
 800504a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	613b      	str	r3, [r7, #16]
   return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800506a:	bf00      	nop
 800506c:	3754      	adds	r7, #84	; 0x54
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff ff77 	bl	8004f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b21      	cmp	r3, #33	; 0x21
 80050b0:	d13e      	bne.n	8005130 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d114      	bne.n	80050e6 <UART_Transmit_IT+0x48>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d110      	bne.n	80050e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]
 80050e4:	e008      	b.n	80050f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6211      	str	r1, [r2, #32]
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29b      	uxth	r3, r3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4619      	mov	r1, r3
 8005106:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10f      	bne.n	800512c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800511a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc fab2 	bl	80016c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b08c      	sub	sp, #48	; 0x30
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b22      	cmp	r3, #34	; 0x22
 8005180:	f040 80ab 	bne.w	80052da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d117      	bne.n	80051be <UART_Receive_IT+0x50>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d113      	bne.n	80051be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	1c9a      	adds	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
 80051bc:	e026      	b.n	800520c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d0:	d007      	beq.n	80051e2 <UART_Receive_IT+0x74>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <UART_Receive_IT+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e008      	b.n	8005202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29b      	uxth	r3, r3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4619      	mov	r1, r3
 800521a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800521c:	2b00      	cmp	r3, #0
 800521e:	d15a      	bne.n	80052d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0220 	bic.w	r2, r2, #32
 800522e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800523e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	2b01      	cmp	r3, #1
 800525e:	d135      	bne.n	80052cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	613b      	str	r3, [r7, #16]
   return(result);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f023 0310 	bic.w	r3, r3, #16
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	623a      	str	r2, [r7, #32]
 8005288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	69f9      	ldr	r1, [r7, #28]
 800528c:	6a3a      	ldr	r2, [r7, #32]
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	61bb      	str	r3, [r7, #24]
   return(result);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d10a      	bne.n	80052be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fe67 	bl	8004f98 <HAL_UARTEx_RxEventCallback>
 80052ca:	e002      	b.n	80052d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fe4f 	bl	8004f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e002      	b.n	80052dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3730      	adds	r7, #48	; 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e8:	b0c0      	sub	sp, #256	; 0x100
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	68d9      	ldr	r1, [r3, #12]
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	ea40 0301 	orr.w	r3, r0, r1
 800530c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800533c:	f021 010c 	bic.w	r1, r1, #12
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800534a:	430b      	orrs	r3, r1
 800534c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535e:	6999      	ldr	r1, [r3, #24]
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	ea40 0301 	orr.w	r3, r0, r1
 800536a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b8f      	ldr	r3, [pc, #572]	; (80055b0 <UART_SetConfig+0x2cc>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d005      	beq.n	8005384 <UART_SetConfig+0xa0>
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b8d      	ldr	r3, [pc, #564]	; (80055b4 <UART_SetConfig+0x2d0>)
 8005380:	429a      	cmp	r2, r3
 8005382:	d104      	bne.n	800538e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7ff f84a 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 8005388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800538c:	e003      	b.n	8005396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538e:	f7ff f831 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a0:	f040 810c 	bne.w	80055bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	1891      	adds	r1, r2, r2
 80053bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80053be:	415b      	adcs	r3, r3
 80053c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053c6:	4621      	mov	r1, r4
 80053c8:	eb12 0801 	adds.w	r8, r2, r1
 80053cc:	4629      	mov	r1, r5
 80053ce:	eb43 0901 	adc.w	r9, r3, r1
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e6:	4690      	mov	r8, r2
 80053e8:	4699      	mov	r9, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	eb18 0303 	adds.w	r3, r8, r3
 80053f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053f4:	462b      	mov	r3, r5
 80053f6:	eb49 0303 	adc.w	r3, r9, r3
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800540a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800540e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005412:	460b      	mov	r3, r1
 8005414:	18db      	adds	r3, r3, r3
 8005416:	653b      	str	r3, [r7, #80]	; 0x50
 8005418:	4613      	mov	r3, r2
 800541a:	eb42 0303 	adc.w	r3, r2, r3
 800541e:	657b      	str	r3, [r7, #84]	; 0x54
 8005420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005428:	f7fb fb70 	bl	8000b0c <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <UART_SetConfig+0x2d4>)
 8005432:	fba3 2302 	umull	r2, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	011c      	lsls	r4, r3, #4
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	64b9      	str	r1, [r7, #72]	; 0x48
 8005454:	415b      	adcs	r3, r3
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800545c:	4641      	mov	r1, r8
 800545e:	eb12 0a01 	adds.w	sl, r2, r1
 8005462:	4649      	mov	r1, r9
 8005464:	eb43 0b01 	adc.w	fp, r3, r1
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800547c:	4692      	mov	sl, r2
 800547e:	469b      	mov	fp, r3
 8005480:	4643      	mov	r3, r8
 8005482:	eb1a 0303 	adds.w	r3, sl, r3
 8005486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800548a:	464b      	mov	r3, r9
 800548c:	eb4b 0303 	adc.w	r3, fp, r3
 8005490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054a8:	460b      	mov	r3, r1
 80054aa:	18db      	adds	r3, r3, r3
 80054ac:	643b      	str	r3, [r7, #64]	; 0x40
 80054ae:	4613      	mov	r3, r2
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	647b      	str	r3, [r7, #68]	; 0x44
 80054b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054be:	f7fb fb25 	bl	8000b0c <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <UART_SetConfig+0x2d4>)
 80054ca:	fba3 2301 	umull	r2, r3, r3, r1
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2264      	movs	r2, #100	; 0x64
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	1acb      	subs	r3, r1, r3
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054de:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <UART_SetConfig+0x2d4>)
 80054e0:	fba3 2302 	umull	r2, r3, r3, r2
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054ec:	441c      	add	r4, r3
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	63b9      	str	r1, [r7, #56]	; 0x38
 8005508:	415b      	adcs	r3, r3
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005510:	4641      	mov	r1, r8
 8005512:	1851      	adds	r1, r2, r1
 8005514:	6339      	str	r1, [r7, #48]	; 0x30
 8005516:	4649      	mov	r1, r9
 8005518:	414b      	adcs	r3, r1
 800551a:	637b      	str	r3, [r7, #52]	; 0x34
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005528:	4659      	mov	r1, fp
 800552a:	00cb      	lsls	r3, r1, #3
 800552c:	4651      	mov	r1, sl
 800552e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005532:	4651      	mov	r1, sl
 8005534:	00ca      	lsls	r2, r1, #3
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	4603      	mov	r3, r0
 800553c:	4642      	mov	r2, r8
 800553e:	189b      	adds	r3, r3, r2
 8005540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005544:	464b      	mov	r3, r9
 8005546:	460a      	mov	r2, r1
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800555c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005564:	460b      	mov	r3, r1
 8005566:	18db      	adds	r3, r3, r3
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
 800556a:	4613      	mov	r3, r2
 800556c:	eb42 0303 	adc.w	r3, r2, r3
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800557a:	f7fb fac7 	bl	8000b0c <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <UART_SetConfig+0x2d4>)
 8005584:	fba3 1302 	umull	r1, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	2164      	movs	r1, #100	; 0x64
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	3332      	adds	r3, #50	; 0x32
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <UART_SetConfig+0x2d4>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 0207 	and.w	r2, r3, #7
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4422      	add	r2, r4
 80055aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ac:	e105      	b.n	80057ba <UART_SetConfig+0x4d6>
 80055ae:	bf00      	nop
 80055b0:	40011000 	.word	0x40011000
 80055b4:	40011400 	.word	0x40011400
 80055b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	1891      	adds	r1, r2, r2
 80055d4:	6239      	str	r1, [r7, #32]
 80055d6:	415b      	adcs	r3, r3
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055de:	4641      	mov	r1, r8
 80055e0:	1854      	adds	r4, r2, r1
 80055e2:	4649      	mov	r1, r9
 80055e4:	eb43 0501 	adc.w	r5, r3, r1
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	00eb      	lsls	r3, r5, #3
 80055f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f6:	00e2      	lsls	r2, r4, #3
 80055f8:	4614      	mov	r4, r2
 80055fa:	461d      	mov	r5, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	18e3      	adds	r3, r4, r3
 8005600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005604:	464b      	mov	r3, r9
 8005606:	eb45 0303 	adc.w	r3, r5, r3
 800560a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800561a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800562a:	4629      	mov	r1, r5
 800562c:	008b      	lsls	r3, r1, #2
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005634:	4621      	mov	r1, r4
 8005636:	008a      	lsls	r2, r1, #2
 8005638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800563c:	f7fb fa66 	bl	8000b0c <__aeabi_uldivmod>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <UART_SetConfig+0x4e4>)
 8005646:	fba3 2302 	umull	r2, r3, r3, r2
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	011c      	lsls	r4, r3, #4
 800564e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005652:	2200      	movs	r2, #0
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800565c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	1891      	adds	r1, r2, r2
 8005666:	61b9      	str	r1, [r7, #24]
 8005668:	415b      	adcs	r3, r3
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005670:	4641      	mov	r1, r8
 8005672:	1851      	adds	r1, r2, r1
 8005674:	6139      	str	r1, [r7, #16]
 8005676:	4649      	mov	r1, r9
 8005678:	414b      	adcs	r3, r1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005688:	4659      	mov	r1, fp
 800568a:	00cb      	lsls	r3, r1, #3
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005692:	4651      	mov	r1, sl
 8005694:	00ca      	lsls	r2, r1, #3
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	4603      	mov	r3, r0
 800569c:	4642      	mov	r2, r8
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056a4:	464b      	mov	r3, r9
 80056a6:	460a      	mov	r2, r1
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056c8:	4649      	mov	r1, r9
 80056ca:	008b      	lsls	r3, r1, #2
 80056cc:	4641      	mov	r1, r8
 80056ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d2:	4641      	mov	r1, r8
 80056d4:	008a      	lsls	r2, r1, #2
 80056d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056da:	f7fb fa17 	bl	8000b0c <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <UART_SetConfig+0x4e4>)
 80056e4:	fba3 1302 	umull	r1, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2164      	movs	r1, #100	; 0x64
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	3332      	adds	r3, #50	; 0x32
 80056f6:	4a34      	ldr	r2, [pc, #208]	; (80057c8 <UART_SetConfig+0x4e4>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005702:	441c      	add	r4, r3
 8005704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005708:	2200      	movs	r2, #0
 800570a:	673b      	str	r3, [r7, #112]	; 0x70
 800570c:	677a      	str	r2, [r7, #116]	; 0x74
 800570e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	1891      	adds	r1, r2, r2
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	415b      	adcs	r3, r3
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005722:	4641      	mov	r1, r8
 8005724:	1851      	adds	r1, r2, r1
 8005726:	6039      	str	r1, [r7, #0]
 8005728:	4649      	mov	r1, r9
 800572a:	414b      	adcs	r3, r1
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800573a:	4659      	mov	r1, fp
 800573c:	00cb      	lsls	r3, r1, #3
 800573e:	4651      	mov	r1, sl
 8005740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005744:	4651      	mov	r1, sl
 8005746:	00ca      	lsls	r2, r1, #3
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	4603      	mov	r3, r0
 800574e:	4642      	mov	r2, r8
 8005750:	189b      	adds	r3, r3, r2
 8005752:	66bb      	str	r3, [r7, #104]	; 0x68
 8005754:	464b      	mov	r3, r9
 8005756:	460a      	mov	r2, r1
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	663b      	str	r3, [r7, #96]	; 0x60
 8005768:	667a      	str	r2, [r7, #100]	; 0x64
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005776:	4649      	mov	r1, r9
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	4641      	mov	r1, r8
 800577c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005780:	4641      	mov	r1, r8
 8005782:	008a      	lsls	r2, r1, #2
 8005784:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005788:	f7fb f9c0 	bl	8000b0c <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <UART_SetConfig+0x4e4>)
 8005792:	fba3 1302 	umull	r1, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	2164      	movs	r1, #100	; 0x64
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	3332      	adds	r3, #50	; 0x32
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <UART_SetConfig+0x4e4>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4422      	add	r2, r4
 80057b8:	609a      	str	r2, [r3, #8]
}
 80057ba:	bf00      	nop
 80057bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	51eb851f 	.word	0x51eb851f

080057cc <__errno>:
 80057cc:	4b01      	ldr	r3, [pc, #4]	; (80057d4 <__errno+0x8>)
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000010 	.word	0x20000010

080057d8 <__libc_init_array>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4d0d      	ldr	r5, [pc, #52]	; (8005810 <__libc_init_array+0x38>)
 80057dc:	4c0d      	ldr	r4, [pc, #52]	; (8005814 <__libc_init_array+0x3c>)
 80057de:	1b64      	subs	r4, r4, r5
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	2600      	movs	r6, #0
 80057e4:	42a6      	cmp	r6, r4
 80057e6:	d109      	bne.n	80057fc <__libc_init_array+0x24>
 80057e8:	4d0b      	ldr	r5, [pc, #44]	; (8005818 <__libc_init_array+0x40>)
 80057ea:	4c0c      	ldr	r4, [pc, #48]	; (800581c <__libc_init_array+0x44>)
 80057ec:	f001 fa00 	bl	8006bf0 <_init>
 80057f0:	1b64      	subs	r4, r4, r5
 80057f2:	10a4      	asrs	r4, r4, #2
 80057f4:	2600      	movs	r6, #0
 80057f6:	42a6      	cmp	r6, r4
 80057f8:	d105      	bne.n	8005806 <__libc_init_array+0x2e>
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005800:	4798      	blx	r3
 8005802:	3601      	adds	r6, #1
 8005804:	e7ee      	b.n	80057e4 <__libc_init_array+0xc>
 8005806:	f855 3b04 	ldr.w	r3, [r5], #4
 800580a:	4798      	blx	r3
 800580c:	3601      	adds	r6, #1
 800580e:	e7f2      	b.n	80057f6 <__libc_init_array+0x1e>
 8005810:	08006d34 	.word	0x08006d34
 8005814:	08006d34 	.word	0x08006d34
 8005818:	08006d34 	.word	0x08006d34
 800581c:	08006d38 	.word	0x08006d38

08005820 <memset>:
 8005820:	4402      	add	r2, r0
 8005822:	4603      	mov	r3, r0
 8005824:	4293      	cmp	r3, r2
 8005826:	d100      	bne.n	800582a <memset+0xa>
 8005828:	4770      	bx	lr
 800582a:	f803 1b01 	strb.w	r1, [r3], #1
 800582e:	e7f9      	b.n	8005824 <memset+0x4>

08005830 <iprintf>:
 8005830:	b40f      	push	{r0, r1, r2, r3}
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <iprintf+0x2c>)
 8005834:	b513      	push	{r0, r1, r4, lr}
 8005836:	681c      	ldr	r4, [r3, #0]
 8005838:	b124      	cbz	r4, 8005844 <iprintf+0x14>
 800583a:	69a3      	ldr	r3, [r4, #24]
 800583c:	b913      	cbnz	r3, 8005844 <iprintf+0x14>
 800583e:	4620      	mov	r0, r4
 8005840:	f000 fa7e 	bl	8005d40 <__sinit>
 8005844:	ab05      	add	r3, sp, #20
 8005846:	9a04      	ldr	r2, [sp, #16]
 8005848:	68a1      	ldr	r1, [r4, #8]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	4620      	mov	r0, r4
 800584e:	f000 fde3 	bl	8006418 <_vfiprintf_r>
 8005852:	b002      	add	sp, #8
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005858:	b004      	add	sp, #16
 800585a:	4770      	bx	lr
 800585c:	20000010 	.word	0x20000010

08005860 <_puts_r>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	460e      	mov	r6, r1
 8005864:	4605      	mov	r5, r0
 8005866:	b118      	cbz	r0, 8005870 <_puts_r+0x10>
 8005868:	6983      	ldr	r3, [r0, #24]
 800586a:	b90b      	cbnz	r3, 8005870 <_puts_r+0x10>
 800586c:	f000 fa68 	bl	8005d40 <__sinit>
 8005870:	69ab      	ldr	r3, [r5, #24]
 8005872:	68ac      	ldr	r4, [r5, #8]
 8005874:	b913      	cbnz	r3, 800587c <_puts_r+0x1c>
 8005876:	4628      	mov	r0, r5
 8005878:	f000 fa62 	bl	8005d40 <__sinit>
 800587c:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <_puts_r+0xd0>)
 800587e:	429c      	cmp	r4, r3
 8005880:	d120      	bne.n	80058c4 <_puts_r+0x64>
 8005882:	686c      	ldr	r4, [r5, #4]
 8005884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d405      	bmi.n	8005896 <_puts_r+0x36>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	0598      	lsls	r0, r3, #22
 800588e:	d402      	bmi.n	8005896 <_puts_r+0x36>
 8005890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005892:	f000 faf3 	bl	8005e7c <__retarget_lock_acquire_recursive>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	d51d      	bpl.n	80058d8 <_puts_r+0x78>
 800589c:	6923      	ldr	r3, [r4, #16]
 800589e:	b1db      	cbz	r3, 80058d8 <_puts_r+0x78>
 80058a0:	3e01      	subs	r6, #1
 80058a2:	68a3      	ldr	r3, [r4, #8]
 80058a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	bb39      	cbnz	r1, 80058fe <_puts_r+0x9e>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da38      	bge.n	8005924 <_puts_r+0xc4>
 80058b2:	4622      	mov	r2, r4
 80058b4:	210a      	movs	r1, #10
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 f868 	bl	800598c <__swbuf_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d011      	beq.n	80058e4 <_puts_r+0x84>
 80058c0:	250a      	movs	r5, #10
 80058c2:	e011      	b.n	80058e8 <_puts_r+0x88>
 80058c4:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <_puts_r+0xd4>)
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d101      	bne.n	80058ce <_puts_r+0x6e>
 80058ca:	68ac      	ldr	r4, [r5, #8]
 80058cc:	e7da      	b.n	8005884 <_puts_r+0x24>
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <_puts_r+0xd8>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	bf08      	it	eq
 80058d4:	68ec      	ldreq	r4, [r5, #12]
 80058d6:	e7d5      	b.n	8005884 <_puts_r+0x24>
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f8a8 	bl	8005a30 <__swsetup_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0dd      	beq.n	80058a0 <_puts_r+0x40>
 80058e4:	f04f 35ff 	mov.w	r5, #4294967295
 80058e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ea:	07da      	lsls	r2, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_puts_r+0x9a>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_puts_r+0x9a>
 80058f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f6:	f000 fac2 	bl	8005e7e <__retarget_lock_release_recursive>
 80058fa:	4628      	mov	r0, r5
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da04      	bge.n	800590c <_puts_r+0xac>
 8005902:	69a2      	ldr	r2, [r4, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	dc06      	bgt.n	8005916 <_puts_r+0xb6>
 8005908:	290a      	cmp	r1, #10
 800590a:	d004      	beq.n	8005916 <_puts_r+0xb6>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	6022      	str	r2, [r4, #0]
 8005912:	7019      	strb	r1, [r3, #0]
 8005914:	e7c5      	b.n	80058a2 <_puts_r+0x42>
 8005916:	4622      	mov	r2, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 f837 	bl	800598c <__swbuf_r>
 800591e:	3001      	adds	r0, #1
 8005920:	d1bf      	bne.n	80058a2 <_puts_r+0x42>
 8005922:	e7df      	b.n	80058e4 <_puts_r+0x84>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	250a      	movs	r5, #10
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	6022      	str	r2, [r4, #0]
 800592c:	701d      	strb	r5, [r3, #0]
 800592e:	e7db      	b.n	80058e8 <_puts_r+0x88>
 8005930:	08006cb8 	.word	0x08006cb8
 8005934:	08006cd8 	.word	0x08006cd8
 8005938:	08006c98 	.word	0x08006c98

0800593c <puts>:
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <puts+0xc>)
 800593e:	4601      	mov	r1, r0
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	f7ff bf8d 	b.w	8005860 <_puts_r>
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010

0800594c <siprintf>:
 800594c:	b40e      	push	{r1, r2, r3}
 800594e:	b500      	push	{lr}
 8005950:	b09c      	sub	sp, #112	; 0x70
 8005952:	ab1d      	add	r3, sp, #116	; 0x74
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	9006      	str	r0, [sp, #24]
 8005958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800595c:	4809      	ldr	r0, [pc, #36]	; (8005984 <siprintf+0x38>)
 800595e:	9107      	str	r1, [sp, #28]
 8005960:	9104      	str	r1, [sp, #16]
 8005962:	4909      	ldr	r1, [pc, #36]	; (8005988 <siprintf+0x3c>)
 8005964:	f853 2b04 	ldr.w	r2, [r3], #4
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	a902      	add	r1, sp, #8
 8005970:	f000 fc28 	bl	80061c4 <_svfiprintf_r>
 8005974:	9b02      	ldr	r3, [sp, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	b01c      	add	sp, #112	; 0x70
 800597c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005980:	b003      	add	sp, #12
 8005982:	4770      	bx	lr
 8005984:	20000010 	.word	0x20000010
 8005988:	ffff0208 	.word	0xffff0208

0800598c <__swbuf_r>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	460e      	mov	r6, r1
 8005990:	4614      	mov	r4, r2
 8005992:	4605      	mov	r5, r0
 8005994:	b118      	cbz	r0, 800599e <__swbuf_r+0x12>
 8005996:	6983      	ldr	r3, [r0, #24]
 8005998:	b90b      	cbnz	r3, 800599e <__swbuf_r+0x12>
 800599a:	f000 f9d1 	bl	8005d40 <__sinit>
 800599e:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <__swbuf_r+0x98>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d12b      	bne.n	80059fc <__swbuf_r+0x70>
 80059a4:	686c      	ldr	r4, [r5, #4]
 80059a6:	69a3      	ldr	r3, [r4, #24]
 80059a8:	60a3      	str	r3, [r4, #8]
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	071a      	lsls	r2, r3, #28
 80059ae:	d52f      	bpl.n	8005a10 <__swbuf_r+0x84>
 80059b0:	6923      	ldr	r3, [r4, #16]
 80059b2:	b36b      	cbz	r3, 8005a10 <__swbuf_r+0x84>
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	1ac0      	subs	r0, r0, r3
 80059ba:	6963      	ldr	r3, [r4, #20]
 80059bc:	b2f6      	uxtb	r6, r6
 80059be:	4283      	cmp	r3, r0
 80059c0:	4637      	mov	r7, r6
 80059c2:	dc04      	bgt.n	80059ce <__swbuf_r+0x42>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f926 	bl	8005c18 <_fflush_r>
 80059cc:	bb30      	cbnz	r0, 8005a1c <__swbuf_r+0x90>
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	60a3      	str	r3, [r4, #8]
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	6022      	str	r2, [r4, #0]
 80059da:	701e      	strb	r6, [r3, #0]
 80059dc:	6963      	ldr	r3, [r4, #20]
 80059de:	3001      	adds	r0, #1
 80059e0:	4283      	cmp	r3, r0
 80059e2:	d004      	beq.n	80059ee <__swbuf_r+0x62>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	07db      	lsls	r3, r3, #31
 80059e8:	d506      	bpl.n	80059f8 <__swbuf_r+0x6c>
 80059ea:	2e0a      	cmp	r6, #10
 80059ec:	d104      	bne.n	80059f8 <__swbuf_r+0x6c>
 80059ee:	4621      	mov	r1, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f911 	bl	8005c18 <_fflush_r>
 80059f6:	b988      	cbnz	r0, 8005a1c <__swbuf_r+0x90>
 80059f8:	4638      	mov	r0, r7
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <__swbuf_r+0x9c>)
 80059fe:	429c      	cmp	r4, r3
 8005a00:	d101      	bne.n	8005a06 <__swbuf_r+0x7a>
 8005a02:	68ac      	ldr	r4, [r5, #8]
 8005a04:	e7cf      	b.n	80059a6 <__swbuf_r+0x1a>
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <__swbuf_r+0xa0>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	bf08      	it	eq
 8005a0c:	68ec      	ldreq	r4, [r5, #12]
 8005a0e:	e7ca      	b.n	80059a6 <__swbuf_r+0x1a>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 f80c 	bl	8005a30 <__swsetup_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d0cb      	beq.n	80059b4 <__swbuf_r+0x28>
 8005a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a20:	e7ea      	b.n	80059f8 <__swbuf_r+0x6c>
 8005a22:	bf00      	nop
 8005a24:	08006cb8 	.word	0x08006cb8
 8005a28:	08006cd8 	.word	0x08006cd8
 8005a2c:	08006c98 	.word	0x08006c98

08005a30 <__swsetup_r>:
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <__swsetup_r+0xcc>)
 8005a32:	b570      	push	{r4, r5, r6, lr}
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	4606      	mov	r6, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b125      	cbz	r5, 8005a46 <__swsetup_r+0x16>
 8005a3c:	69ab      	ldr	r3, [r5, #24]
 8005a3e:	b913      	cbnz	r3, 8005a46 <__swsetup_r+0x16>
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 f97d 	bl	8005d40 <__sinit>
 8005a46:	4b2e      	ldr	r3, [pc, #184]	; (8005b00 <__swsetup_r+0xd0>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d10f      	bne.n	8005a6c <__swsetup_r+0x3c>
 8005a4c:	686c      	ldr	r4, [r5, #4]
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a54:	0719      	lsls	r1, r3, #28
 8005a56:	d42c      	bmi.n	8005ab2 <__swsetup_r+0x82>
 8005a58:	06dd      	lsls	r5, r3, #27
 8005a5a:	d411      	bmi.n	8005a80 <__swsetup_r+0x50>
 8005a5c:	2309      	movs	r3, #9
 8005a5e:	6033      	str	r3, [r6, #0]
 8005a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	e03e      	b.n	8005aea <__swsetup_r+0xba>
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <__swsetup_r+0xd4>)
 8005a6e:	429c      	cmp	r4, r3
 8005a70:	d101      	bne.n	8005a76 <__swsetup_r+0x46>
 8005a72:	68ac      	ldr	r4, [r5, #8]
 8005a74:	e7eb      	b.n	8005a4e <__swsetup_r+0x1e>
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <__swsetup_r+0xd8>)
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	bf08      	it	eq
 8005a7c:	68ec      	ldreq	r4, [r5, #12]
 8005a7e:	e7e6      	b.n	8005a4e <__swsetup_r+0x1e>
 8005a80:	0758      	lsls	r0, r3, #29
 8005a82:	d512      	bpl.n	8005aaa <__swsetup_r+0x7a>
 8005a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a86:	b141      	cbz	r1, 8005a9a <__swsetup_r+0x6a>
 8005a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	d002      	beq.n	8005a96 <__swsetup_r+0x66>
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 fa5b 	bl	8005f4c <_free_r>
 8005a96:	2300      	movs	r3, #0
 8005a98:	6363      	str	r3, [r4, #52]	; 0x34
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f043 0308 	orr.w	r3, r3, #8
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	b94b      	cbnz	r3, 8005aca <__swsetup_r+0x9a>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d003      	beq.n	8005aca <__swsetup_r+0x9a>
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f000 fa01 	bl	8005ecc <__smakebuf_r>
 8005aca:	89a0      	ldrh	r0, [r4, #12]
 8005acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ad0:	f010 0301 	ands.w	r3, r0, #1
 8005ad4:	d00a      	beq.n	8005aec <__swsetup_r+0xbc>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	6963      	ldr	r3, [r4, #20]
 8005adc:	425b      	negs	r3, r3
 8005ade:	61a3      	str	r3, [r4, #24]
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	b943      	cbnz	r3, 8005af6 <__swsetup_r+0xc6>
 8005ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ae8:	d1ba      	bne.n	8005a60 <__swsetup_r+0x30>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	0781      	lsls	r1, r0, #30
 8005aee:	bf58      	it	pl
 8005af0:	6963      	ldrpl	r3, [r4, #20]
 8005af2:	60a3      	str	r3, [r4, #8]
 8005af4:	e7f4      	b.n	8005ae0 <__swsetup_r+0xb0>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e7f7      	b.n	8005aea <__swsetup_r+0xba>
 8005afa:	bf00      	nop
 8005afc:	20000010 	.word	0x20000010
 8005b00:	08006cb8 	.word	0x08006cb8
 8005b04:	08006cd8 	.word	0x08006cd8
 8005b08:	08006c98 	.word	0x08006c98

08005b0c <__sflush_r>:
 8005b0c:	898a      	ldrh	r2, [r1, #12]
 8005b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	4605      	mov	r5, r0
 8005b14:	0710      	lsls	r0, r2, #28
 8005b16:	460c      	mov	r4, r1
 8005b18:	d458      	bmi.n	8005bcc <__sflush_r+0xc0>
 8005b1a:	684b      	ldr	r3, [r1, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc05      	bgt.n	8005b2c <__sflush_r+0x20>
 8005b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc02      	bgt.n	8005b2c <__sflush_r+0x20>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d0f9      	beq.n	8005b26 <__sflush_r+0x1a>
 8005b32:	2300      	movs	r3, #0
 8005b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b38:	682f      	ldr	r7, [r5, #0]
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	d032      	beq.n	8005ba4 <__sflush_r+0x98>
 8005b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	075a      	lsls	r2, r3, #29
 8005b44:	d505      	bpl.n	8005b52 <__sflush_r+0x46>
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	1ac0      	subs	r0, r0, r3
 8005b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b4c:	b10b      	cbz	r3, 8005b52 <__sflush_r+0x46>
 8005b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b50:	1ac0      	subs	r0, r0, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	4602      	mov	r2, r0
 8005b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b58:	6a21      	ldr	r1, [r4, #32]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	d106      	bne.n	8005b72 <__sflush_r+0x66>
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	291d      	cmp	r1, #29
 8005b68:	d82c      	bhi.n	8005bc4 <__sflush_r+0xb8>
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <__sflush_r+0x108>)
 8005b6c:	40ca      	lsrs	r2, r1
 8005b6e:	07d6      	lsls	r6, r2, #31
 8005b70:	d528      	bpl.n	8005bc4 <__sflush_r+0xb8>
 8005b72:	2200      	movs	r2, #0
 8005b74:	6062      	str	r2, [r4, #4]
 8005b76:	04d9      	lsls	r1, r3, #19
 8005b78:	6922      	ldr	r2, [r4, #16]
 8005b7a:	6022      	str	r2, [r4, #0]
 8005b7c:	d504      	bpl.n	8005b88 <__sflush_r+0x7c>
 8005b7e:	1c42      	adds	r2, r0, #1
 8005b80:	d101      	bne.n	8005b86 <__sflush_r+0x7a>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	b903      	cbnz	r3, 8005b88 <__sflush_r+0x7c>
 8005b86:	6560      	str	r0, [r4, #84]	; 0x54
 8005b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b8a:	602f      	str	r7, [r5, #0]
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d0ca      	beq.n	8005b26 <__sflush_r+0x1a>
 8005b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b94:	4299      	cmp	r1, r3
 8005b96:	d002      	beq.n	8005b9e <__sflush_r+0x92>
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 f9d7 	bl	8005f4c <_free_r>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ba2:	e7c1      	b.n	8005b28 <__sflush_r+0x1c>
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b0      	blx	r6
 8005bac:	1c41      	adds	r1, r0, #1
 8005bae:	d1c7      	bne.n	8005b40 <__sflush_r+0x34>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0c4      	beq.n	8005b40 <__sflush_r+0x34>
 8005bb6:	2b1d      	cmp	r3, #29
 8005bb8:	d001      	beq.n	8005bbe <__sflush_r+0xb2>
 8005bba:	2b16      	cmp	r3, #22
 8005bbc:	d101      	bne.n	8005bc2 <__sflush_r+0xb6>
 8005bbe:	602f      	str	r7, [r5, #0]
 8005bc0:	e7b1      	b.n	8005b26 <__sflush_r+0x1a>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	e7ad      	b.n	8005b28 <__sflush_r+0x1c>
 8005bcc:	690f      	ldr	r7, [r1, #16]
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	d0a9      	beq.n	8005b26 <__sflush_r+0x1a>
 8005bd2:	0793      	lsls	r3, r2, #30
 8005bd4:	680e      	ldr	r6, [r1, #0]
 8005bd6:	bf08      	it	eq
 8005bd8:	694b      	ldreq	r3, [r1, #20]
 8005bda:	600f      	str	r7, [r1, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	2300      	movne	r3, #0
 8005be0:	eba6 0807 	sub.w	r8, r6, r7
 8005be4:	608b      	str	r3, [r1, #8]
 8005be6:	f1b8 0f00 	cmp.w	r8, #0
 8005bea:	dd9c      	ble.n	8005b26 <__sflush_r+0x1a>
 8005bec:	6a21      	ldr	r1, [r4, #32]
 8005bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b0      	blx	r6
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	dc06      	bgt.n	8005c0a <__sflush_r+0xfe>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	e78e      	b.n	8005b28 <__sflush_r+0x1c>
 8005c0a:	4407      	add	r7, r0
 8005c0c:	eba8 0800 	sub.w	r8, r8, r0
 8005c10:	e7e9      	b.n	8005be6 <__sflush_r+0xda>
 8005c12:	bf00      	nop
 8005c14:	20400001 	.word	0x20400001

08005c18 <_fflush_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	b913      	cbnz	r3, 8005c28 <_fflush_r+0x10>
 8005c22:	2500      	movs	r5, #0
 8005c24:	4628      	mov	r0, r5
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	b118      	cbz	r0, 8005c32 <_fflush_r+0x1a>
 8005c2a:	6983      	ldr	r3, [r0, #24]
 8005c2c:	b90b      	cbnz	r3, 8005c32 <_fflush_r+0x1a>
 8005c2e:	f000 f887 	bl	8005d40 <__sinit>
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <_fflush_r+0x6c>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	d11b      	bne.n	8005c70 <_fflush_r+0x58>
 8005c38:	686c      	ldr	r4, [r5, #4]
 8005c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ef      	beq.n	8005c22 <_fflush_r+0xa>
 8005c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c44:	07d0      	lsls	r0, r2, #31
 8005c46:	d404      	bmi.n	8005c52 <_fflush_r+0x3a>
 8005c48:	0599      	lsls	r1, r3, #22
 8005c4a:	d402      	bmi.n	8005c52 <_fflush_r+0x3a>
 8005c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4e:	f000 f915 	bl	8005e7c <__retarget_lock_acquire_recursive>
 8005c52:	4628      	mov	r0, r5
 8005c54:	4621      	mov	r1, r4
 8005c56:	f7ff ff59 	bl	8005b0c <__sflush_r>
 8005c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c5c:	07da      	lsls	r2, r3, #31
 8005c5e:	4605      	mov	r5, r0
 8005c60:	d4e0      	bmi.n	8005c24 <_fflush_r+0xc>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	059b      	lsls	r3, r3, #22
 8005c66:	d4dd      	bmi.n	8005c24 <_fflush_r+0xc>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f000 f908 	bl	8005e7e <__retarget_lock_release_recursive>
 8005c6e:	e7d9      	b.n	8005c24 <_fflush_r+0xc>
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <_fflush_r+0x70>)
 8005c72:	429c      	cmp	r4, r3
 8005c74:	d101      	bne.n	8005c7a <_fflush_r+0x62>
 8005c76:	68ac      	ldr	r4, [r5, #8]
 8005c78:	e7df      	b.n	8005c3a <_fflush_r+0x22>
 8005c7a:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <_fflush_r+0x74>)
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	bf08      	it	eq
 8005c80:	68ec      	ldreq	r4, [r5, #12]
 8005c82:	e7da      	b.n	8005c3a <_fflush_r+0x22>
 8005c84:	08006cb8 	.word	0x08006cb8
 8005c88:	08006cd8 	.word	0x08006cd8
 8005c8c:	08006c98 	.word	0x08006c98

08005c90 <std>:
 8005c90:	2300      	movs	r3, #0
 8005c92:	b510      	push	{r4, lr}
 8005c94:	4604      	mov	r4, r0
 8005c96:	e9c0 3300 	strd	r3, r3, [r0]
 8005c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c9e:	6083      	str	r3, [r0, #8]
 8005ca0:	8181      	strh	r1, [r0, #12]
 8005ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ca4:	81c2      	strh	r2, [r0, #14]
 8005ca6:	6183      	str	r3, [r0, #24]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	2208      	movs	r2, #8
 8005cac:	305c      	adds	r0, #92	; 0x5c
 8005cae:	f7ff fdb7 	bl	8005820 <memset>
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <std+0x38>)
 8005cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <std+0x3c>)
 8005cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <std+0x40>)
 8005cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <std+0x44>)
 8005cc0:	6224      	str	r4, [r4, #32]
 8005cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	080069c1 	.word	0x080069c1
 8005ccc:	080069e3 	.word	0x080069e3
 8005cd0:	08006a1b 	.word	0x08006a1b
 8005cd4:	08006a3f 	.word	0x08006a3f

08005cd8 <_cleanup_r>:
 8005cd8:	4901      	ldr	r1, [pc, #4]	; (8005ce0 <_cleanup_r+0x8>)
 8005cda:	f000 b8af 	b.w	8005e3c <_fwalk_reent>
 8005cde:	bf00      	nop
 8005ce0:	08005c19 	.word	0x08005c19

08005ce4 <__sfmoreglue>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	2268      	movs	r2, #104	; 0x68
 8005ce8:	1e4d      	subs	r5, r1, #1
 8005cea:	4355      	muls	r5, r2
 8005cec:	460e      	mov	r6, r1
 8005cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cf2:	f000 f997 	bl	8006024 <_malloc_r>
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	b140      	cbz	r0, 8005d0c <__sfmoreglue+0x28>
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8005d00:	300c      	adds	r0, #12
 8005d02:	60a0      	str	r0, [r4, #8]
 8005d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d08:	f7ff fd8a 	bl	8005820 <memset>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}

08005d10 <__sfp_lock_acquire>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__sfp_lock_acquire+0x8>)
 8005d12:	f000 b8b3 	b.w	8005e7c <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	200001e5 	.word	0x200001e5

08005d1c <__sfp_lock_release>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sfp_lock_release+0x8>)
 8005d1e:	f000 b8ae 	b.w	8005e7e <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	200001e5 	.word	0x200001e5

08005d28 <__sinit_lock_acquire>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sinit_lock_acquire+0x8>)
 8005d2a:	f000 b8a7 	b.w	8005e7c <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200001e6 	.word	0x200001e6

08005d34 <__sinit_lock_release>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sinit_lock_release+0x8>)
 8005d36:	f000 b8a2 	b.w	8005e7e <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	200001e6 	.word	0x200001e6

08005d40 <__sinit>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	4604      	mov	r4, r0
 8005d44:	f7ff fff0 	bl	8005d28 <__sinit_lock_acquire>
 8005d48:	69a3      	ldr	r3, [r4, #24]
 8005d4a:	b11b      	cbz	r3, 8005d54 <__sinit+0x14>
 8005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d50:	f7ff bff0 	b.w	8005d34 <__sinit_lock_release>
 8005d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d58:	6523      	str	r3, [r4, #80]	; 0x50
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <__sinit+0x68>)
 8005d5c:	4a13      	ldr	r2, [pc, #76]	; (8005dac <__sinit+0x6c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	bf04      	itt	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	61a3      	streq	r3, [r4, #24]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 f820 	bl	8005db0 <__sfp>
 8005d70:	6060      	str	r0, [r4, #4]
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f81c 	bl	8005db0 <__sfp>
 8005d78:	60a0      	str	r0, [r4, #8]
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 f818 	bl	8005db0 <__sfp>
 8005d80:	2200      	movs	r2, #0
 8005d82:	60e0      	str	r0, [r4, #12]
 8005d84:	2104      	movs	r1, #4
 8005d86:	6860      	ldr	r0, [r4, #4]
 8005d88:	f7ff ff82 	bl	8005c90 <std>
 8005d8c:	68a0      	ldr	r0, [r4, #8]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	2109      	movs	r1, #9
 8005d92:	f7ff ff7d 	bl	8005c90 <std>
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	2112      	movs	r1, #18
 8005d9c:	f7ff ff78 	bl	8005c90 <std>
 8005da0:	2301      	movs	r3, #1
 8005da2:	61a3      	str	r3, [r4, #24]
 8005da4:	e7d2      	b.n	8005d4c <__sinit+0xc>
 8005da6:	bf00      	nop
 8005da8:	08006c94 	.word	0x08006c94
 8005dac:	08005cd9 	.word	0x08005cd9

08005db0 <__sfp>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	4607      	mov	r7, r0
 8005db4:	f7ff ffac 	bl	8005d10 <__sfp_lock_acquire>
 8005db8:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <__sfp+0x84>)
 8005dba:	681e      	ldr	r6, [r3, #0]
 8005dbc:	69b3      	ldr	r3, [r6, #24]
 8005dbe:	b913      	cbnz	r3, 8005dc6 <__sfp+0x16>
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f7ff ffbd 	bl	8005d40 <__sinit>
 8005dc6:	3648      	adds	r6, #72	; 0x48
 8005dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	d503      	bpl.n	8005dd8 <__sfp+0x28>
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	b30b      	cbz	r3, 8005e18 <__sfp+0x68>
 8005dd4:	6836      	ldr	r6, [r6, #0]
 8005dd6:	e7f7      	b.n	8005dc8 <__sfp+0x18>
 8005dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ddc:	b9d5      	cbnz	r5, 8005e14 <__sfp+0x64>
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <__sfp+0x88>)
 8005de0:	60e3      	str	r3, [r4, #12]
 8005de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005de6:	6665      	str	r5, [r4, #100]	; 0x64
 8005de8:	f000 f847 	bl	8005e7a <__retarget_lock_init_recursive>
 8005dec:	f7ff ff96 	bl	8005d1c <__sfp_lock_release>
 8005df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	61a5      	str	r5, [r4, #24]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e04:	f7ff fd0c 	bl	8005820 <memset>
 8005e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e10:	4620      	mov	r0, r4
 8005e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e14:	3468      	adds	r4, #104	; 0x68
 8005e16:	e7d9      	b.n	8005dcc <__sfp+0x1c>
 8005e18:	2104      	movs	r1, #4
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7ff ff62 	bl	8005ce4 <__sfmoreglue>
 8005e20:	4604      	mov	r4, r0
 8005e22:	6030      	str	r0, [r6, #0]
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d1d5      	bne.n	8005dd4 <__sfp+0x24>
 8005e28:	f7ff ff78 	bl	8005d1c <__sfp_lock_release>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	e7ee      	b.n	8005e10 <__sfp+0x60>
 8005e32:	bf00      	nop
 8005e34:	08006c94 	.word	0x08006c94
 8005e38:	ffff0001 	.word	0xffff0001

08005e3c <_fwalk_reent>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4606      	mov	r6, r0
 8005e42:	4688      	mov	r8, r1
 8005e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e48:	2700      	movs	r7, #0
 8005e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8005e52:	d505      	bpl.n	8005e60 <_fwalk_reent+0x24>
 8005e54:	6824      	ldr	r4, [r4, #0]
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	d1f7      	bne.n	8005e4a <_fwalk_reent+0xe>
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e60:	89ab      	ldrh	r3, [r5, #12]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d907      	bls.n	8005e76 <_fwalk_reent+0x3a>
 8005e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	d003      	beq.n	8005e76 <_fwalk_reent+0x3a>
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4630      	mov	r0, r6
 8005e72:	47c0      	blx	r8
 8005e74:	4307      	orrs	r7, r0
 8005e76:	3568      	adds	r5, #104	; 0x68
 8005e78:	e7e9      	b.n	8005e4e <_fwalk_reent+0x12>

08005e7a <__retarget_lock_init_recursive>:
 8005e7a:	4770      	bx	lr

08005e7c <__retarget_lock_acquire_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__retarget_lock_release_recursive>:
 8005e7e:	4770      	bx	lr

08005e80 <__swhatbuf_r>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	460e      	mov	r6, r1
 8005e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	b096      	sub	sp, #88	; 0x58
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	461d      	mov	r5, r3
 8005e90:	da08      	bge.n	8005ea4 <__swhatbuf_r+0x24>
 8005e92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	602a      	str	r2, [r5, #0]
 8005e9a:	061a      	lsls	r2, r3, #24
 8005e9c:	d410      	bmi.n	8005ec0 <__swhatbuf_r+0x40>
 8005e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ea2:	e00e      	b.n	8005ec2 <__swhatbuf_r+0x42>
 8005ea4:	466a      	mov	r2, sp
 8005ea6:	f000 fdf1 	bl	8006a8c <_fstat_r>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	dbf1      	blt.n	8005e92 <__swhatbuf_r+0x12>
 8005eae:	9a01      	ldr	r2, [sp, #4]
 8005eb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005eb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eb8:	425a      	negs	r2, r3
 8005eba:	415a      	adcs	r2, r3
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	e7ee      	b.n	8005e9e <__swhatbuf_r+0x1e>
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	b016      	add	sp, #88	; 0x58
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ecc <__smakebuf_r>:
 8005ecc:	898b      	ldrh	r3, [r1, #12]
 8005ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ed0:	079d      	lsls	r5, r3, #30
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	d507      	bpl.n	8005ee8 <__smakebuf_r+0x1c>
 8005ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	6163      	str	r3, [r4, #20]
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	ab01      	add	r3, sp, #4
 8005eea:	466a      	mov	r2, sp
 8005eec:	f7ff ffc8 	bl	8005e80 <__swhatbuf_r>
 8005ef0:	9900      	ldr	r1, [sp, #0]
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f000 f895 	bl	8006024 <_malloc_r>
 8005efa:	b948      	cbnz	r0, 8005f10 <__smakebuf_r+0x44>
 8005efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f00:	059a      	lsls	r2, r3, #22
 8005f02:	d4ef      	bmi.n	8005ee4 <__smakebuf_r+0x18>
 8005f04:	f023 0303 	bic.w	r3, r3, #3
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	e7e3      	b.n	8005ed8 <__smakebuf_r+0xc>
 8005f10:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <__smakebuf_r+0x7c>)
 8005f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	6020      	str	r0, [r4, #0]
 8005f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	6163      	str	r3, [r4, #20]
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	6120      	str	r0, [r4, #16]
 8005f26:	b15b      	cbz	r3, 8005f40 <__smakebuf_r+0x74>
 8005f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f000 fdbf 	bl	8006ab0 <_isatty_r>
 8005f32:	b128      	cbz	r0, 8005f40 <__smakebuf_r+0x74>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	89a0      	ldrh	r0, [r4, #12]
 8005f42:	4305      	orrs	r5, r0
 8005f44:	81a5      	strh	r5, [r4, #12]
 8005f46:	e7cd      	b.n	8005ee4 <__smakebuf_r+0x18>
 8005f48:	08005cd9 	.word	0x08005cd9

08005f4c <_free_r>:
 8005f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	d044      	beq.n	8005fdc <_free_r+0x90>
 8005f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f56:	9001      	str	r0, [sp, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f5e:	bfb8      	it	lt
 8005f60:	18e4      	addlt	r4, r4, r3
 8005f62:	f000 fdef 	bl	8006b44 <__malloc_lock>
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <_free_r+0x94>)
 8005f68:	9801      	ldr	r0, [sp, #4]
 8005f6a:	6813      	ldr	r3, [r2, #0]
 8005f6c:	b933      	cbnz	r3, 8005f7c <_free_r+0x30>
 8005f6e:	6063      	str	r3, [r4, #4]
 8005f70:	6014      	str	r4, [r2, #0]
 8005f72:	b003      	add	sp, #12
 8005f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f78:	f000 bdea 	b.w	8006b50 <__malloc_unlock>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d908      	bls.n	8005f92 <_free_r+0x46>
 8005f80:	6825      	ldr	r5, [r4, #0]
 8005f82:	1961      	adds	r1, r4, r5
 8005f84:	428b      	cmp	r3, r1
 8005f86:	bf01      	itttt	eq
 8005f88:	6819      	ldreq	r1, [r3, #0]
 8005f8a:	685b      	ldreq	r3, [r3, #4]
 8005f8c:	1949      	addeq	r1, r1, r5
 8005f8e:	6021      	streq	r1, [r4, #0]
 8005f90:	e7ed      	b.n	8005f6e <_free_r+0x22>
 8005f92:	461a      	mov	r2, r3
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b10b      	cbz	r3, 8005f9c <_free_r+0x50>
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	d9fa      	bls.n	8005f92 <_free_r+0x46>
 8005f9c:	6811      	ldr	r1, [r2, #0]
 8005f9e:	1855      	adds	r5, r2, r1
 8005fa0:	42a5      	cmp	r5, r4
 8005fa2:	d10b      	bne.n	8005fbc <_free_r+0x70>
 8005fa4:	6824      	ldr	r4, [r4, #0]
 8005fa6:	4421      	add	r1, r4
 8005fa8:	1854      	adds	r4, r2, r1
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	d1e0      	bne.n	8005f72 <_free_r+0x26>
 8005fb0:	681c      	ldr	r4, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	6053      	str	r3, [r2, #4]
 8005fb6:	4421      	add	r1, r4
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	e7da      	b.n	8005f72 <_free_r+0x26>
 8005fbc:	d902      	bls.n	8005fc4 <_free_r+0x78>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	6003      	str	r3, [r0, #0]
 8005fc2:	e7d6      	b.n	8005f72 <_free_r+0x26>
 8005fc4:	6825      	ldr	r5, [r4, #0]
 8005fc6:	1961      	adds	r1, r4, r5
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf04      	itt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	bf04      	itt	eq
 8005fd4:	1949      	addeq	r1, r1, r5
 8005fd6:	6021      	streq	r1, [r4, #0]
 8005fd8:	6054      	str	r4, [r2, #4]
 8005fda:	e7ca      	b.n	8005f72 <_free_r+0x26>
 8005fdc:	b003      	add	sp, #12
 8005fde:	bd30      	pop	{r4, r5, pc}
 8005fe0:	200001e8 	.word	0x200001e8

08005fe4 <sbrk_aligned>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	4e0e      	ldr	r6, [pc, #56]	; (8006020 <sbrk_aligned+0x3c>)
 8005fe8:	460c      	mov	r4, r1
 8005fea:	6831      	ldr	r1, [r6, #0]
 8005fec:	4605      	mov	r5, r0
 8005fee:	b911      	cbnz	r1, 8005ff6 <sbrk_aligned+0x12>
 8005ff0:	f000 fcd6 	bl	80069a0 <_sbrk_r>
 8005ff4:	6030      	str	r0, [r6, #0]
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f000 fcd1 	bl	80069a0 <_sbrk_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d00a      	beq.n	8006018 <sbrk_aligned+0x34>
 8006002:	1cc4      	adds	r4, r0, #3
 8006004:	f024 0403 	bic.w	r4, r4, #3
 8006008:	42a0      	cmp	r0, r4
 800600a:	d007      	beq.n	800601c <sbrk_aligned+0x38>
 800600c:	1a21      	subs	r1, r4, r0
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fcc6 	bl	80069a0 <_sbrk_r>
 8006014:	3001      	adds	r0, #1
 8006016:	d101      	bne.n	800601c <sbrk_aligned+0x38>
 8006018:	f04f 34ff 	mov.w	r4, #4294967295
 800601c:	4620      	mov	r0, r4
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	200001ec 	.word	0x200001ec

08006024 <_malloc_r>:
 8006024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	1ccd      	adds	r5, r1, #3
 800602a:	f025 0503 	bic.w	r5, r5, #3
 800602e:	3508      	adds	r5, #8
 8006030:	2d0c      	cmp	r5, #12
 8006032:	bf38      	it	cc
 8006034:	250c      	movcc	r5, #12
 8006036:	2d00      	cmp	r5, #0
 8006038:	4607      	mov	r7, r0
 800603a:	db01      	blt.n	8006040 <_malloc_r+0x1c>
 800603c:	42a9      	cmp	r1, r5
 800603e:	d905      	bls.n	800604c <_malloc_r+0x28>
 8006040:	230c      	movs	r3, #12
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	2600      	movs	r6, #0
 8006046:	4630      	mov	r0, r6
 8006048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800604c:	4e2e      	ldr	r6, [pc, #184]	; (8006108 <_malloc_r+0xe4>)
 800604e:	f000 fd79 	bl	8006b44 <__malloc_lock>
 8006052:	6833      	ldr	r3, [r6, #0]
 8006054:	461c      	mov	r4, r3
 8006056:	bb34      	cbnz	r4, 80060a6 <_malloc_r+0x82>
 8006058:	4629      	mov	r1, r5
 800605a:	4638      	mov	r0, r7
 800605c:	f7ff ffc2 	bl	8005fe4 <sbrk_aligned>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	4604      	mov	r4, r0
 8006064:	d14d      	bne.n	8006102 <_malloc_r+0xde>
 8006066:	6834      	ldr	r4, [r6, #0]
 8006068:	4626      	mov	r6, r4
 800606a:	2e00      	cmp	r6, #0
 800606c:	d140      	bne.n	80060f0 <_malloc_r+0xcc>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	4631      	mov	r1, r6
 8006072:	4638      	mov	r0, r7
 8006074:	eb04 0803 	add.w	r8, r4, r3
 8006078:	f000 fc92 	bl	80069a0 <_sbrk_r>
 800607c:	4580      	cmp	r8, r0
 800607e:	d13a      	bne.n	80060f6 <_malloc_r+0xd2>
 8006080:	6821      	ldr	r1, [r4, #0]
 8006082:	3503      	adds	r5, #3
 8006084:	1a6d      	subs	r5, r5, r1
 8006086:	f025 0503 	bic.w	r5, r5, #3
 800608a:	3508      	adds	r5, #8
 800608c:	2d0c      	cmp	r5, #12
 800608e:	bf38      	it	cc
 8006090:	250c      	movcc	r5, #12
 8006092:	4629      	mov	r1, r5
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff ffa5 	bl	8005fe4 <sbrk_aligned>
 800609a:	3001      	adds	r0, #1
 800609c:	d02b      	beq.n	80060f6 <_malloc_r+0xd2>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	442b      	add	r3, r5
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	e00e      	b.n	80060c4 <_malloc_r+0xa0>
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	1b52      	subs	r2, r2, r5
 80060aa:	d41e      	bmi.n	80060ea <_malloc_r+0xc6>
 80060ac:	2a0b      	cmp	r2, #11
 80060ae:	d916      	bls.n	80060de <_malloc_r+0xba>
 80060b0:	1961      	adds	r1, r4, r5
 80060b2:	42a3      	cmp	r3, r4
 80060b4:	6025      	str	r5, [r4, #0]
 80060b6:	bf18      	it	ne
 80060b8:	6059      	strne	r1, [r3, #4]
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	bf08      	it	eq
 80060be:	6031      	streq	r1, [r6, #0]
 80060c0:	5162      	str	r2, [r4, r5]
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	4638      	mov	r0, r7
 80060c6:	f104 060b 	add.w	r6, r4, #11
 80060ca:	f000 fd41 	bl	8006b50 <__malloc_unlock>
 80060ce:	f026 0607 	bic.w	r6, r6, #7
 80060d2:	1d23      	adds	r3, r4, #4
 80060d4:	1af2      	subs	r2, r6, r3
 80060d6:	d0b6      	beq.n	8006046 <_malloc_r+0x22>
 80060d8:	1b9b      	subs	r3, r3, r6
 80060da:	50a3      	str	r3, [r4, r2]
 80060dc:	e7b3      	b.n	8006046 <_malloc_r+0x22>
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	bf0c      	ite	eq
 80060e4:	6032      	streq	r2, [r6, #0]
 80060e6:	605a      	strne	r2, [r3, #4]
 80060e8:	e7ec      	b.n	80060c4 <_malloc_r+0xa0>
 80060ea:	4623      	mov	r3, r4
 80060ec:	6864      	ldr	r4, [r4, #4]
 80060ee:	e7b2      	b.n	8006056 <_malloc_r+0x32>
 80060f0:	4634      	mov	r4, r6
 80060f2:	6876      	ldr	r6, [r6, #4]
 80060f4:	e7b9      	b.n	800606a <_malloc_r+0x46>
 80060f6:	230c      	movs	r3, #12
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f000 fd28 	bl	8006b50 <__malloc_unlock>
 8006100:	e7a1      	b.n	8006046 <_malloc_r+0x22>
 8006102:	6025      	str	r5, [r4, #0]
 8006104:	e7de      	b.n	80060c4 <_malloc_r+0xa0>
 8006106:	bf00      	nop
 8006108:	200001e8 	.word	0x200001e8

0800610c <__ssputs_r>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	688e      	ldr	r6, [r1, #8]
 8006112:	429e      	cmp	r6, r3
 8006114:	4682      	mov	sl, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4690      	mov	r8, r2
 800611a:	461f      	mov	r7, r3
 800611c:	d838      	bhi.n	8006190 <__ssputs_r+0x84>
 800611e:	898a      	ldrh	r2, [r1, #12]
 8006120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006124:	d032      	beq.n	800618c <__ssputs_r+0x80>
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	6909      	ldr	r1, [r1, #16]
 800612a:	eba5 0901 	sub.w	r9, r5, r1
 800612e:	6965      	ldr	r5, [r4, #20]
 8006130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006138:	3301      	adds	r3, #1
 800613a:	444b      	add	r3, r9
 800613c:	106d      	asrs	r5, r5, #1
 800613e:	429d      	cmp	r5, r3
 8006140:	bf38      	it	cc
 8006142:	461d      	movcc	r5, r3
 8006144:	0553      	lsls	r3, r2, #21
 8006146:	d531      	bpl.n	80061ac <__ssputs_r+0xa0>
 8006148:	4629      	mov	r1, r5
 800614a:	f7ff ff6b 	bl	8006024 <_malloc_r>
 800614e:	4606      	mov	r6, r0
 8006150:	b950      	cbnz	r0, 8006168 <__ssputs_r+0x5c>
 8006152:	230c      	movs	r3, #12
 8006154:	f8ca 3000 	str.w	r3, [sl]
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	464a      	mov	r2, r9
 800616c:	f000 fcc2 	bl	8006af4 <memcpy>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	6126      	str	r6, [r4, #16]
 800617e:	6165      	str	r5, [r4, #20]
 8006180:	444e      	add	r6, r9
 8006182:	eba5 0509 	sub.w	r5, r5, r9
 8006186:	6026      	str	r6, [r4, #0]
 8006188:	60a5      	str	r5, [r4, #8]
 800618a:	463e      	mov	r6, r7
 800618c:	42be      	cmp	r6, r7
 800618e:	d900      	bls.n	8006192 <__ssputs_r+0x86>
 8006190:	463e      	mov	r6, r7
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	4632      	mov	r2, r6
 8006196:	4641      	mov	r1, r8
 8006198:	f000 fcba 	bl	8006b10 <memmove>
 800619c:	68a3      	ldr	r3, [r4, #8]
 800619e:	1b9b      	subs	r3, r3, r6
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4433      	add	r3, r6
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7db      	b.n	8006164 <__ssputs_r+0x58>
 80061ac:	462a      	mov	r2, r5
 80061ae:	f000 fcd5 	bl	8006b5c <_realloc_r>
 80061b2:	4606      	mov	r6, r0
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d1e1      	bne.n	800617c <__ssputs_r+0x70>
 80061b8:	6921      	ldr	r1, [r4, #16]
 80061ba:	4650      	mov	r0, sl
 80061bc:	f7ff fec6 	bl	8005f4c <_free_r>
 80061c0:	e7c7      	b.n	8006152 <__ssputs_r+0x46>
	...

080061c4 <_svfiprintf_r>:
 80061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	4698      	mov	r8, r3
 80061ca:	898b      	ldrh	r3, [r1, #12]
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	b09d      	sub	sp, #116	; 0x74
 80061d0:	4607      	mov	r7, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	d50e      	bpl.n	80061f6 <_svfiprintf_r+0x32>
 80061d8:	690b      	ldr	r3, [r1, #16]
 80061da:	b963      	cbnz	r3, 80061f6 <_svfiprintf_r+0x32>
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	f7ff ff21 	bl	8006024 <_malloc_r>
 80061e2:	6028      	str	r0, [r5, #0]
 80061e4:	6128      	str	r0, [r5, #16]
 80061e6:	b920      	cbnz	r0, 80061f2 <_svfiprintf_r+0x2e>
 80061e8:	230c      	movs	r3, #12
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	e0d1      	b.n	8006396 <_svfiprintf_r+0x1d2>
 80061f2:	2340      	movs	r3, #64	; 0x40
 80061f4:	616b      	str	r3, [r5, #20]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9309      	str	r3, [sp, #36]	; 0x24
 80061fa:	2320      	movs	r3, #32
 80061fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006200:	f8cd 800c 	str.w	r8, [sp, #12]
 8006204:	2330      	movs	r3, #48	; 0x30
 8006206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063b0 <_svfiprintf_r+0x1ec>
 800620a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800620e:	f04f 0901 	mov.w	r9, #1
 8006212:	4623      	mov	r3, r4
 8006214:	469a      	mov	sl, r3
 8006216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800621a:	b10a      	cbz	r2, 8006220 <_svfiprintf_r+0x5c>
 800621c:	2a25      	cmp	r2, #37	; 0x25
 800621e:	d1f9      	bne.n	8006214 <_svfiprintf_r+0x50>
 8006220:	ebba 0b04 	subs.w	fp, sl, r4
 8006224:	d00b      	beq.n	800623e <_svfiprintf_r+0x7a>
 8006226:	465b      	mov	r3, fp
 8006228:	4622      	mov	r2, r4
 800622a:	4629      	mov	r1, r5
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff ff6d 	bl	800610c <__ssputs_r>
 8006232:	3001      	adds	r0, #1
 8006234:	f000 80aa 	beq.w	800638c <_svfiprintf_r+0x1c8>
 8006238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623a:	445a      	add	r2, fp
 800623c:	9209      	str	r2, [sp, #36]	; 0x24
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80a2 	beq.w	800638c <_svfiprintf_r+0x1c8>
 8006248:	2300      	movs	r3, #0
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006252:	f10a 0a01 	add.w	sl, sl, #1
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800625e:	931a      	str	r3, [sp, #104]	; 0x68
 8006260:	4654      	mov	r4, sl
 8006262:	2205      	movs	r2, #5
 8006264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006268:	4851      	ldr	r0, [pc, #324]	; (80063b0 <_svfiprintf_r+0x1ec>)
 800626a:	f7f9 ffb9 	bl	80001e0 <memchr>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	b9d8      	cbnz	r0, 80062aa <_svfiprintf_r+0xe6>
 8006272:	06d0      	lsls	r0, r2, #27
 8006274:	bf44      	itt	mi
 8006276:	2320      	movmi	r3, #32
 8006278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627c:	0711      	lsls	r1, r2, #28
 800627e:	bf44      	itt	mi
 8006280:	232b      	movmi	r3, #43	; 0x2b
 8006282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006286:	f89a 3000 	ldrb.w	r3, [sl]
 800628a:	2b2a      	cmp	r3, #42	; 0x2a
 800628c:	d015      	beq.n	80062ba <_svfiprintf_r+0xf6>
 800628e:	9a07      	ldr	r2, [sp, #28]
 8006290:	4654      	mov	r4, sl
 8006292:	2000      	movs	r0, #0
 8006294:	f04f 0c0a 	mov.w	ip, #10
 8006298:	4621      	mov	r1, r4
 800629a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629e:	3b30      	subs	r3, #48	; 0x30
 80062a0:	2b09      	cmp	r3, #9
 80062a2:	d94e      	bls.n	8006342 <_svfiprintf_r+0x17e>
 80062a4:	b1b0      	cbz	r0, 80062d4 <_svfiprintf_r+0x110>
 80062a6:	9207      	str	r2, [sp, #28]
 80062a8:	e014      	b.n	80062d4 <_svfiprintf_r+0x110>
 80062aa:	eba0 0308 	sub.w	r3, r0, r8
 80062ae:	fa09 f303 	lsl.w	r3, r9, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	46a2      	mov	sl, r4
 80062b8:	e7d2      	b.n	8006260 <_svfiprintf_r+0x9c>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	9103      	str	r1, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfbb      	ittet	lt
 80062c6:	425b      	neglt	r3, r3
 80062c8:	f042 0202 	orrlt.w	r2, r2, #2
 80062cc:	9307      	strge	r3, [sp, #28]
 80062ce:	9307      	strlt	r3, [sp, #28]
 80062d0:	bfb8      	it	lt
 80062d2:	9204      	strlt	r2, [sp, #16]
 80062d4:	7823      	ldrb	r3, [r4, #0]
 80062d6:	2b2e      	cmp	r3, #46	; 0x2e
 80062d8:	d10c      	bne.n	80062f4 <_svfiprintf_r+0x130>
 80062da:	7863      	ldrb	r3, [r4, #1]
 80062dc:	2b2a      	cmp	r3, #42	; 0x2a
 80062de:	d135      	bne.n	800634c <_svfiprintf_r+0x188>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	9203      	str	r2, [sp, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfb8      	it	lt
 80062ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80062f0:	3402      	adds	r4, #2
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063c0 <_svfiprintf_r+0x1fc>
 80062f8:	7821      	ldrb	r1, [r4, #0]
 80062fa:	2203      	movs	r2, #3
 80062fc:	4650      	mov	r0, sl
 80062fe:	f7f9 ff6f 	bl	80001e0 <memchr>
 8006302:	b140      	cbz	r0, 8006316 <_svfiprintf_r+0x152>
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	eba0 000a 	sub.w	r0, r0, sl
 800630a:	fa03 f000 	lsl.w	r0, r3, r0
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	4303      	orrs	r3, r0
 8006312:	3401      	adds	r4, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631a:	4826      	ldr	r0, [pc, #152]	; (80063b4 <_svfiprintf_r+0x1f0>)
 800631c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006320:	2206      	movs	r2, #6
 8006322:	f7f9 ff5d 	bl	80001e0 <memchr>
 8006326:	2800      	cmp	r0, #0
 8006328:	d038      	beq.n	800639c <_svfiprintf_r+0x1d8>
 800632a:	4b23      	ldr	r3, [pc, #140]	; (80063b8 <_svfiprintf_r+0x1f4>)
 800632c:	bb1b      	cbnz	r3, 8006376 <_svfiprintf_r+0x1b2>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	3307      	adds	r3, #7
 8006332:	f023 0307 	bic.w	r3, r3, #7
 8006336:	3308      	adds	r3, #8
 8006338:	9303      	str	r3, [sp, #12]
 800633a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633c:	4433      	add	r3, r6
 800633e:	9309      	str	r3, [sp, #36]	; 0x24
 8006340:	e767      	b.n	8006212 <_svfiprintf_r+0x4e>
 8006342:	fb0c 3202 	mla	r2, ip, r2, r3
 8006346:	460c      	mov	r4, r1
 8006348:	2001      	movs	r0, #1
 800634a:	e7a5      	b.n	8006298 <_svfiprintf_r+0xd4>
 800634c:	2300      	movs	r3, #0
 800634e:	3401      	adds	r4, #1
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4619      	mov	r1, r3
 8006354:	f04f 0c0a 	mov.w	ip, #10
 8006358:	4620      	mov	r0, r4
 800635a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800635e:	3a30      	subs	r2, #48	; 0x30
 8006360:	2a09      	cmp	r2, #9
 8006362:	d903      	bls.n	800636c <_svfiprintf_r+0x1a8>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0c5      	beq.n	80062f4 <_svfiprintf_r+0x130>
 8006368:	9105      	str	r1, [sp, #20]
 800636a:	e7c3      	b.n	80062f4 <_svfiprintf_r+0x130>
 800636c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006370:	4604      	mov	r4, r0
 8006372:	2301      	movs	r3, #1
 8006374:	e7f0      	b.n	8006358 <_svfiprintf_r+0x194>
 8006376:	ab03      	add	r3, sp, #12
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	462a      	mov	r2, r5
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <_svfiprintf_r+0x1f8>)
 800637e:	a904      	add	r1, sp, #16
 8006380:	4638      	mov	r0, r7
 8006382:	f3af 8000 	nop.w
 8006386:	1c42      	adds	r2, r0, #1
 8006388:	4606      	mov	r6, r0
 800638a:	d1d6      	bne.n	800633a <_svfiprintf_r+0x176>
 800638c:	89ab      	ldrh	r3, [r5, #12]
 800638e:	065b      	lsls	r3, r3, #25
 8006390:	f53f af2c 	bmi.w	80061ec <_svfiprintf_r+0x28>
 8006394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006396:	b01d      	add	sp, #116	; 0x74
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	ab03      	add	r3, sp, #12
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	462a      	mov	r2, r5
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <_svfiprintf_r+0x1f8>)
 80063a4:	a904      	add	r1, sp, #16
 80063a6:	4638      	mov	r0, r7
 80063a8:	f000 f9d4 	bl	8006754 <_printf_i>
 80063ac:	e7eb      	b.n	8006386 <_svfiprintf_r+0x1c2>
 80063ae:	bf00      	nop
 80063b0:	08006cf8 	.word	0x08006cf8
 80063b4:	08006d02 	.word	0x08006d02
 80063b8:	00000000 	.word	0x00000000
 80063bc:	0800610d 	.word	0x0800610d
 80063c0:	08006cfe 	.word	0x08006cfe

080063c4 <__sfputc_r>:
 80063c4:	6893      	ldr	r3, [r2, #8]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	b410      	push	{r4}
 80063cc:	6093      	str	r3, [r2, #8]
 80063ce:	da08      	bge.n	80063e2 <__sfputc_r+0x1e>
 80063d0:	6994      	ldr	r4, [r2, #24]
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	db01      	blt.n	80063da <__sfputc_r+0x16>
 80063d6:	290a      	cmp	r1, #10
 80063d8:	d103      	bne.n	80063e2 <__sfputc_r+0x1e>
 80063da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063de:	f7ff bad5 	b.w	800598c <__swbuf_r>
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	1c58      	adds	r0, r3, #1
 80063e6:	6010      	str	r0, [r2, #0]
 80063e8:	7019      	strb	r1, [r3, #0]
 80063ea:	4608      	mov	r0, r1
 80063ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <__sfputs_r>:
 80063f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f4:	4606      	mov	r6, r0
 80063f6:	460f      	mov	r7, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	18d5      	adds	r5, r2, r3
 80063fc:	42ac      	cmp	r4, r5
 80063fe:	d101      	bne.n	8006404 <__sfputs_r+0x12>
 8006400:	2000      	movs	r0, #0
 8006402:	e007      	b.n	8006414 <__sfputs_r+0x22>
 8006404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006408:	463a      	mov	r2, r7
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ffda 	bl	80063c4 <__sfputc_r>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d1f3      	bne.n	80063fc <__sfputs_r+0xa>
 8006414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006418 <_vfiprintf_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	460d      	mov	r5, r1
 800641e:	b09d      	sub	sp, #116	; 0x74
 8006420:	4614      	mov	r4, r2
 8006422:	4698      	mov	r8, r3
 8006424:	4606      	mov	r6, r0
 8006426:	b118      	cbz	r0, 8006430 <_vfiprintf_r+0x18>
 8006428:	6983      	ldr	r3, [r0, #24]
 800642a:	b90b      	cbnz	r3, 8006430 <_vfiprintf_r+0x18>
 800642c:	f7ff fc88 	bl	8005d40 <__sinit>
 8006430:	4b89      	ldr	r3, [pc, #548]	; (8006658 <_vfiprintf_r+0x240>)
 8006432:	429d      	cmp	r5, r3
 8006434:	d11b      	bne.n	800646e <_vfiprintf_r+0x56>
 8006436:	6875      	ldr	r5, [r6, #4]
 8006438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643a:	07d9      	lsls	r1, r3, #31
 800643c:	d405      	bmi.n	800644a <_vfiprintf_r+0x32>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	059a      	lsls	r2, r3, #22
 8006442:	d402      	bmi.n	800644a <_vfiprintf_r+0x32>
 8006444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006446:	f7ff fd19 	bl	8005e7c <__retarget_lock_acquire_recursive>
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	d501      	bpl.n	8006454 <_vfiprintf_r+0x3c>
 8006450:	692b      	ldr	r3, [r5, #16]
 8006452:	b9eb      	cbnz	r3, 8006490 <_vfiprintf_r+0x78>
 8006454:	4629      	mov	r1, r5
 8006456:	4630      	mov	r0, r6
 8006458:	f7ff faea 	bl	8005a30 <__swsetup_r>
 800645c:	b1c0      	cbz	r0, 8006490 <_vfiprintf_r+0x78>
 800645e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006460:	07dc      	lsls	r4, r3, #31
 8006462:	d50e      	bpl.n	8006482 <_vfiprintf_r+0x6a>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	b01d      	add	sp, #116	; 0x74
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	4b7b      	ldr	r3, [pc, #492]	; (800665c <_vfiprintf_r+0x244>)
 8006470:	429d      	cmp	r5, r3
 8006472:	d101      	bne.n	8006478 <_vfiprintf_r+0x60>
 8006474:	68b5      	ldr	r5, [r6, #8]
 8006476:	e7df      	b.n	8006438 <_vfiprintf_r+0x20>
 8006478:	4b79      	ldr	r3, [pc, #484]	; (8006660 <_vfiprintf_r+0x248>)
 800647a:	429d      	cmp	r5, r3
 800647c:	bf08      	it	eq
 800647e:	68f5      	ldreq	r5, [r6, #12]
 8006480:	e7da      	b.n	8006438 <_vfiprintf_r+0x20>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d4ed      	bmi.n	8006464 <_vfiprintf_r+0x4c>
 8006488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648a:	f7ff fcf8 	bl	8005e7e <__retarget_lock_release_recursive>
 800648e:	e7e9      	b.n	8006464 <_vfiprintf_r+0x4c>
 8006490:	2300      	movs	r3, #0
 8006492:	9309      	str	r3, [sp, #36]	; 0x24
 8006494:	2320      	movs	r3, #32
 8006496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649a:	f8cd 800c 	str.w	r8, [sp, #12]
 800649e:	2330      	movs	r3, #48	; 0x30
 80064a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006664 <_vfiprintf_r+0x24c>
 80064a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064a8:	f04f 0901 	mov.w	r9, #1
 80064ac:	4623      	mov	r3, r4
 80064ae:	469a      	mov	sl, r3
 80064b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b4:	b10a      	cbz	r2, 80064ba <_vfiprintf_r+0xa2>
 80064b6:	2a25      	cmp	r2, #37	; 0x25
 80064b8:	d1f9      	bne.n	80064ae <_vfiprintf_r+0x96>
 80064ba:	ebba 0b04 	subs.w	fp, sl, r4
 80064be:	d00b      	beq.n	80064d8 <_vfiprintf_r+0xc0>
 80064c0:	465b      	mov	r3, fp
 80064c2:	4622      	mov	r2, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff93 	bl	80063f2 <__sfputs_r>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f000 80aa 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d4:	445a      	add	r2, fp
 80064d6:	9209      	str	r2, [sp, #36]	; 0x24
 80064d8:	f89a 3000 	ldrb.w	r3, [sl]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a2 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ec:	f10a 0a01 	add.w	sl, sl, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f8:	931a      	str	r3, [sp, #104]	; 0x68
 80064fa:	4654      	mov	r4, sl
 80064fc:	2205      	movs	r2, #5
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4858      	ldr	r0, [pc, #352]	; (8006664 <_vfiprintf_r+0x24c>)
 8006504:	f7f9 fe6c 	bl	80001e0 <memchr>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	b9d8      	cbnz	r0, 8006544 <_vfiprintf_r+0x12c>
 800650c:	06d1      	lsls	r1, r2, #27
 800650e:	bf44      	itt	mi
 8006510:	2320      	movmi	r3, #32
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006516:	0713      	lsls	r3, r2, #28
 8006518:	bf44      	itt	mi
 800651a:	232b      	movmi	r3, #43	; 0x2b
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b2a      	cmp	r3, #42	; 0x2a
 8006526:	d015      	beq.n	8006554 <_vfiprintf_r+0x13c>
 8006528:	9a07      	ldr	r2, [sp, #28]
 800652a:	4654      	mov	r4, sl
 800652c:	2000      	movs	r0, #0
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4621      	mov	r1, r4
 8006534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006538:	3b30      	subs	r3, #48	; 0x30
 800653a:	2b09      	cmp	r3, #9
 800653c:	d94e      	bls.n	80065dc <_vfiprintf_r+0x1c4>
 800653e:	b1b0      	cbz	r0, 800656e <_vfiprintf_r+0x156>
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	e014      	b.n	800656e <_vfiprintf_r+0x156>
 8006544:	eba0 0308 	sub.w	r3, r0, r8
 8006548:	fa09 f303 	lsl.w	r3, r9, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	46a2      	mov	sl, r4
 8006552:	e7d2      	b.n	80064fa <_vfiprintf_r+0xe2>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbb      	ittet	lt
 8006560:	425b      	neglt	r3, r3
 8006562:	f042 0202 	orrlt.w	r2, r2, #2
 8006566:	9307      	strge	r3, [sp, #28]
 8006568:	9307      	strlt	r3, [sp, #28]
 800656a:	bfb8      	it	lt
 800656c:	9204      	strlt	r2, [sp, #16]
 800656e:	7823      	ldrb	r3, [r4, #0]
 8006570:	2b2e      	cmp	r3, #46	; 0x2e
 8006572:	d10c      	bne.n	800658e <_vfiprintf_r+0x176>
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2b2a      	cmp	r3, #42	; 0x2a
 8006578:	d135      	bne.n	80065e6 <_vfiprintf_r+0x1ce>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb8      	it	lt
 8006586:	f04f 33ff 	movlt.w	r3, #4294967295
 800658a:	3402      	adds	r4, #2
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006674 <_vfiprintf_r+0x25c>
 8006592:	7821      	ldrb	r1, [r4, #0]
 8006594:	2203      	movs	r2, #3
 8006596:	4650      	mov	r0, sl
 8006598:	f7f9 fe22 	bl	80001e0 <memchr>
 800659c:	b140      	cbz	r0, 80065b0 <_vfiprintf_r+0x198>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	eba0 000a 	sub.w	r0, r0, sl
 80065a4:	fa03 f000 	lsl.w	r0, r3, r0
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	4303      	orrs	r3, r0
 80065ac:	3401      	adds	r4, #1
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b4:	482c      	ldr	r0, [pc, #176]	; (8006668 <_vfiprintf_r+0x250>)
 80065b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ba:	2206      	movs	r2, #6
 80065bc:	f7f9 fe10 	bl	80001e0 <memchr>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d03f      	beq.n	8006644 <_vfiprintf_r+0x22c>
 80065c4:	4b29      	ldr	r3, [pc, #164]	; (800666c <_vfiprintf_r+0x254>)
 80065c6:	bb1b      	cbnz	r3, 8006610 <_vfiprintf_r+0x1f8>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	3307      	adds	r3, #7
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	3308      	adds	r3, #8
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	443b      	add	r3, r7
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	e767      	b.n	80064ac <_vfiprintf_r+0x94>
 80065dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e0:	460c      	mov	r4, r1
 80065e2:	2001      	movs	r0, #1
 80065e4:	e7a5      	b.n	8006532 <_vfiprintf_r+0x11a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	3401      	adds	r4, #1
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f04f 0c0a 	mov.w	ip, #10
 80065f2:	4620      	mov	r0, r4
 80065f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f8:	3a30      	subs	r2, #48	; 0x30
 80065fa:	2a09      	cmp	r2, #9
 80065fc:	d903      	bls.n	8006606 <_vfiprintf_r+0x1ee>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0c5      	beq.n	800658e <_vfiprintf_r+0x176>
 8006602:	9105      	str	r1, [sp, #20]
 8006604:	e7c3      	b.n	800658e <_vfiprintf_r+0x176>
 8006606:	fb0c 2101 	mla	r1, ip, r1, r2
 800660a:	4604      	mov	r4, r0
 800660c:	2301      	movs	r3, #1
 800660e:	e7f0      	b.n	80065f2 <_vfiprintf_r+0x1da>
 8006610:	ab03      	add	r3, sp, #12
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	462a      	mov	r2, r5
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <_vfiprintf_r+0x258>)
 8006618:	a904      	add	r1, sp, #16
 800661a:	4630      	mov	r0, r6
 800661c:	f3af 8000 	nop.w
 8006620:	4607      	mov	r7, r0
 8006622:	1c78      	adds	r0, r7, #1
 8006624:	d1d6      	bne.n	80065d4 <_vfiprintf_r+0x1bc>
 8006626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006628:	07d9      	lsls	r1, r3, #31
 800662a:	d405      	bmi.n	8006638 <_vfiprintf_r+0x220>
 800662c:	89ab      	ldrh	r3, [r5, #12]
 800662e:	059a      	lsls	r2, r3, #22
 8006630:	d402      	bmi.n	8006638 <_vfiprintf_r+0x220>
 8006632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006634:	f7ff fc23 	bl	8005e7e <__retarget_lock_release_recursive>
 8006638:	89ab      	ldrh	r3, [r5, #12]
 800663a:	065b      	lsls	r3, r3, #25
 800663c:	f53f af12 	bmi.w	8006464 <_vfiprintf_r+0x4c>
 8006640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006642:	e711      	b.n	8006468 <_vfiprintf_r+0x50>
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	462a      	mov	r2, r5
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <_vfiprintf_r+0x258>)
 800664c:	a904      	add	r1, sp, #16
 800664e:	4630      	mov	r0, r6
 8006650:	f000 f880 	bl	8006754 <_printf_i>
 8006654:	e7e4      	b.n	8006620 <_vfiprintf_r+0x208>
 8006656:	bf00      	nop
 8006658:	08006cb8 	.word	0x08006cb8
 800665c:	08006cd8 	.word	0x08006cd8
 8006660:	08006c98 	.word	0x08006c98
 8006664:	08006cf8 	.word	0x08006cf8
 8006668:	08006d02 	.word	0x08006d02
 800666c:	00000000 	.word	0x00000000
 8006670:	080063f3 	.word	0x080063f3
 8006674:	08006cfe 	.word	0x08006cfe

08006678 <_printf_common>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	4616      	mov	r6, r2
 800667e:	4699      	mov	r9, r3
 8006680:	688a      	ldr	r2, [r1, #8]
 8006682:	690b      	ldr	r3, [r1, #16]
 8006684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006688:	4293      	cmp	r3, r2
 800668a:	bfb8      	it	lt
 800668c:	4613      	movlt	r3, r2
 800668e:	6033      	str	r3, [r6, #0]
 8006690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006694:	4607      	mov	r7, r0
 8006696:	460c      	mov	r4, r1
 8006698:	b10a      	cbz	r2, 800669e <_printf_common+0x26>
 800669a:	3301      	adds	r3, #1
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	0699      	lsls	r1, r3, #26
 80066a2:	bf42      	ittt	mi
 80066a4:	6833      	ldrmi	r3, [r6, #0]
 80066a6:	3302      	addmi	r3, #2
 80066a8:	6033      	strmi	r3, [r6, #0]
 80066aa:	6825      	ldr	r5, [r4, #0]
 80066ac:	f015 0506 	ands.w	r5, r5, #6
 80066b0:	d106      	bne.n	80066c0 <_printf_common+0x48>
 80066b2:	f104 0a19 	add.w	sl, r4, #25
 80066b6:	68e3      	ldr	r3, [r4, #12]
 80066b8:	6832      	ldr	r2, [r6, #0]
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	42ab      	cmp	r3, r5
 80066be:	dc26      	bgt.n	800670e <_printf_common+0x96>
 80066c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066c4:	1e13      	subs	r3, r2, #0
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	bf18      	it	ne
 80066ca:	2301      	movne	r3, #1
 80066cc:	0692      	lsls	r2, r2, #26
 80066ce:	d42b      	bmi.n	8006728 <_printf_common+0xb0>
 80066d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066d4:	4649      	mov	r1, r9
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c0      	blx	r8
 80066da:	3001      	adds	r0, #1
 80066dc:	d01e      	beq.n	800671c <_printf_common+0xa4>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	68e5      	ldr	r5, [r4, #12]
 80066e2:	6832      	ldr	r2, [r6, #0]
 80066e4:	f003 0306 	and.w	r3, r3, #6
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	bf08      	it	eq
 80066ec:	1aad      	subeq	r5, r5, r2
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	bf0c      	ite	eq
 80066f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f8:	2500      	movne	r5, #0
 80066fa:	4293      	cmp	r3, r2
 80066fc:	bfc4      	itt	gt
 80066fe:	1a9b      	subgt	r3, r3, r2
 8006700:	18ed      	addgt	r5, r5, r3
 8006702:	2600      	movs	r6, #0
 8006704:	341a      	adds	r4, #26
 8006706:	42b5      	cmp	r5, r6
 8006708:	d11a      	bne.n	8006740 <_printf_common+0xc8>
 800670a:	2000      	movs	r0, #0
 800670c:	e008      	b.n	8006720 <_printf_common+0xa8>
 800670e:	2301      	movs	r3, #1
 8006710:	4652      	mov	r2, sl
 8006712:	4649      	mov	r1, r9
 8006714:	4638      	mov	r0, r7
 8006716:	47c0      	blx	r8
 8006718:	3001      	adds	r0, #1
 800671a:	d103      	bne.n	8006724 <_printf_common+0xac>
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006724:	3501      	adds	r5, #1
 8006726:	e7c6      	b.n	80066b6 <_printf_common+0x3e>
 8006728:	18e1      	adds	r1, r4, r3
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	2030      	movs	r0, #48	; 0x30
 800672e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006732:	4422      	add	r2, r4
 8006734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800673c:	3302      	adds	r3, #2
 800673e:	e7c7      	b.n	80066d0 <_printf_common+0x58>
 8006740:	2301      	movs	r3, #1
 8006742:	4622      	mov	r2, r4
 8006744:	4649      	mov	r1, r9
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d0e6      	beq.n	800671c <_printf_common+0xa4>
 800674e:	3601      	adds	r6, #1
 8006750:	e7d9      	b.n	8006706 <_printf_common+0x8e>
	...

08006754 <_printf_i>:
 8006754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	7e0f      	ldrb	r7, [r1, #24]
 800675a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800675c:	2f78      	cmp	r7, #120	; 0x78
 800675e:	4691      	mov	r9, r2
 8006760:	4680      	mov	r8, r0
 8006762:	460c      	mov	r4, r1
 8006764:	469a      	mov	sl, r3
 8006766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800676a:	d807      	bhi.n	800677c <_printf_i+0x28>
 800676c:	2f62      	cmp	r7, #98	; 0x62
 800676e:	d80a      	bhi.n	8006786 <_printf_i+0x32>
 8006770:	2f00      	cmp	r7, #0
 8006772:	f000 80d8 	beq.w	8006926 <_printf_i+0x1d2>
 8006776:	2f58      	cmp	r7, #88	; 0x58
 8006778:	f000 80a3 	beq.w	80068c2 <_printf_i+0x16e>
 800677c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006784:	e03a      	b.n	80067fc <_printf_i+0xa8>
 8006786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800678a:	2b15      	cmp	r3, #21
 800678c:	d8f6      	bhi.n	800677c <_printf_i+0x28>
 800678e:	a101      	add	r1, pc, #4	; (adr r1, 8006794 <_printf_i+0x40>)
 8006790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006794:	080067ed 	.word	0x080067ed
 8006798:	08006801 	.word	0x08006801
 800679c:	0800677d 	.word	0x0800677d
 80067a0:	0800677d 	.word	0x0800677d
 80067a4:	0800677d 	.word	0x0800677d
 80067a8:	0800677d 	.word	0x0800677d
 80067ac:	08006801 	.word	0x08006801
 80067b0:	0800677d 	.word	0x0800677d
 80067b4:	0800677d 	.word	0x0800677d
 80067b8:	0800677d 	.word	0x0800677d
 80067bc:	0800677d 	.word	0x0800677d
 80067c0:	0800690d 	.word	0x0800690d
 80067c4:	08006831 	.word	0x08006831
 80067c8:	080068ef 	.word	0x080068ef
 80067cc:	0800677d 	.word	0x0800677d
 80067d0:	0800677d 	.word	0x0800677d
 80067d4:	0800692f 	.word	0x0800692f
 80067d8:	0800677d 	.word	0x0800677d
 80067dc:	08006831 	.word	0x08006831
 80067e0:	0800677d 	.word	0x0800677d
 80067e4:	0800677d 	.word	0x0800677d
 80067e8:	080068f7 	.word	0x080068f7
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	1d1a      	adds	r2, r3, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	602a      	str	r2, [r5, #0]
 80067f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0a3      	b.n	8006948 <_printf_i+0x1f4>
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	6829      	ldr	r1, [r5, #0]
 8006804:	0606      	lsls	r6, r0, #24
 8006806:	f101 0304 	add.w	r3, r1, #4
 800680a:	d50a      	bpl.n	8006822 <_printf_i+0xce>
 800680c:	680e      	ldr	r6, [r1, #0]
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	2e00      	cmp	r6, #0
 8006812:	da03      	bge.n	800681c <_printf_i+0xc8>
 8006814:	232d      	movs	r3, #45	; 0x2d
 8006816:	4276      	negs	r6, r6
 8006818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681c:	485e      	ldr	r0, [pc, #376]	; (8006998 <_printf_i+0x244>)
 800681e:	230a      	movs	r3, #10
 8006820:	e019      	b.n	8006856 <_printf_i+0x102>
 8006822:	680e      	ldr	r6, [r1, #0]
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800682a:	bf18      	it	ne
 800682c:	b236      	sxthne	r6, r6
 800682e:	e7ef      	b.n	8006810 <_printf_i+0xbc>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	1d19      	adds	r1, r3, #4
 8006836:	6029      	str	r1, [r5, #0]
 8006838:	0601      	lsls	r1, r0, #24
 800683a:	d501      	bpl.n	8006840 <_printf_i+0xec>
 800683c:	681e      	ldr	r6, [r3, #0]
 800683e:	e002      	b.n	8006846 <_printf_i+0xf2>
 8006840:	0646      	lsls	r6, r0, #25
 8006842:	d5fb      	bpl.n	800683c <_printf_i+0xe8>
 8006844:	881e      	ldrh	r6, [r3, #0]
 8006846:	4854      	ldr	r0, [pc, #336]	; (8006998 <_printf_i+0x244>)
 8006848:	2f6f      	cmp	r7, #111	; 0x6f
 800684a:	bf0c      	ite	eq
 800684c:	2308      	moveq	r3, #8
 800684e:	230a      	movne	r3, #10
 8006850:	2100      	movs	r1, #0
 8006852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006856:	6865      	ldr	r5, [r4, #4]
 8006858:	60a5      	str	r5, [r4, #8]
 800685a:	2d00      	cmp	r5, #0
 800685c:	bfa2      	ittt	ge
 800685e:	6821      	ldrge	r1, [r4, #0]
 8006860:	f021 0104 	bicge.w	r1, r1, #4
 8006864:	6021      	strge	r1, [r4, #0]
 8006866:	b90e      	cbnz	r6, 800686c <_printf_i+0x118>
 8006868:	2d00      	cmp	r5, #0
 800686a:	d04d      	beq.n	8006908 <_printf_i+0x1b4>
 800686c:	4615      	mov	r5, r2
 800686e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006872:	fb03 6711 	mls	r7, r3, r1, r6
 8006876:	5dc7      	ldrb	r7, [r0, r7]
 8006878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800687c:	4637      	mov	r7, r6
 800687e:	42bb      	cmp	r3, r7
 8006880:	460e      	mov	r6, r1
 8006882:	d9f4      	bls.n	800686e <_printf_i+0x11a>
 8006884:	2b08      	cmp	r3, #8
 8006886:	d10b      	bne.n	80068a0 <_printf_i+0x14c>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07de      	lsls	r6, r3, #31
 800688c:	d508      	bpl.n	80068a0 <_printf_i+0x14c>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	6861      	ldr	r1, [r4, #4]
 8006892:	4299      	cmp	r1, r3
 8006894:	bfde      	ittt	le
 8006896:	2330      	movle	r3, #48	; 0x30
 8006898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800689c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a0:	1b52      	subs	r2, r2, r5
 80068a2:	6122      	str	r2, [r4, #16]
 80068a4:	f8cd a000 	str.w	sl, [sp]
 80068a8:	464b      	mov	r3, r9
 80068aa:	aa03      	add	r2, sp, #12
 80068ac:	4621      	mov	r1, r4
 80068ae:	4640      	mov	r0, r8
 80068b0:	f7ff fee2 	bl	8006678 <_printf_common>
 80068b4:	3001      	adds	r0, #1
 80068b6:	d14c      	bne.n	8006952 <_printf_i+0x1fe>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	b004      	add	sp, #16
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	4835      	ldr	r0, [pc, #212]	; (8006998 <_printf_i+0x244>)
 80068c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068c8:	6829      	ldr	r1, [r5, #0]
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80068d0:	6029      	str	r1, [r5, #0]
 80068d2:	061d      	lsls	r5, r3, #24
 80068d4:	d514      	bpl.n	8006900 <_printf_i+0x1ac>
 80068d6:	07df      	lsls	r7, r3, #31
 80068d8:	bf44      	itt	mi
 80068da:	f043 0320 	orrmi.w	r3, r3, #32
 80068de:	6023      	strmi	r3, [r4, #0]
 80068e0:	b91e      	cbnz	r6, 80068ea <_printf_i+0x196>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	f023 0320 	bic.w	r3, r3, #32
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	2310      	movs	r3, #16
 80068ec:	e7b0      	b.n	8006850 <_printf_i+0xfc>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f043 0320 	orr.w	r3, r3, #32
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	2378      	movs	r3, #120	; 0x78
 80068f8:	4828      	ldr	r0, [pc, #160]	; (800699c <_printf_i+0x248>)
 80068fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068fe:	e7e3      	b.n	80068c8 <_printf_i+0x174>
 8006900:	0659      	lsls	r1, r3, #25
 8006902:	bf48      	it	mi
 8006904:	b2b6      	uxthmi	r6, r6
 8006906:	e7e6      	b.n	80068d6 <_printf_i+0x182>
 8006908:	4615      	mov	r5, r2
 800690a:	e7bb      	b.n	8006884 <_printf_i+0x130>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	6826      	ldr	r6, [r4, #0]
 8006910:	6961      	ldr	r1, [r4, #20]
 8006912:	1d18      	adds	r0, r3, #4
 8006914:	6028      	str	r0, [r5, #0]
 8006916:	0635      	lsls	r5, r6, #24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	d501      	bpl.n	8006920 <_printf_i+0x1cc>
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0x1d2>
 8006920:	0670      	lsls	r0, r6, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0x1c8>
 8006924:	8019      	strh	r1, [r3, #0]
 8006926:	2300      	movs	r3, #0
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	4615      	mov	r5, r2
 800692c:	e7ba      	b.n	80068a4 <_printf_i+0x150>
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	602a      	str	r2, [r5, #0]
 8006934:	681d      	ldr	r5, [r3, #0]
 8006936:	6862      	ldr	r2, [r4, #4]
 8006938:	2100      	movs	r1, #0
 800693a:	4628      	mov	r0, r5
 800693c:	f7f9 fc50 	bl	80001e0 <memchr>
 8006940:	b108      	cbz	r0, 8006946 <_printf_i+0x1f2>
 8006942:	1b40      	subs	r0, r0, r5
 8006944:	6060      	str	r0, [r4, #4]
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	2300      	movs	r3, #0
 800694c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006950:	e7a8      	b.n	80068a4 <_printf_i+0x150>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	462a      	mov	r2, r5
 8006956:	4649      	mov	r1, r9
 8006958:	4640      	mov	r0, r8
 800695a:	47d0      	blx	sl
 800695c:	3001      	adds	r0, #1
 800695e:	d0ab      	beq.n	80068b8 <_printf_i+0x164>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	079b      	lsls	r3, r3, #30
 8006964:	d413      	bmi.n	800698e <_printf_i+0x23a>
 8006966:	68e0      	ldr	r0, [r4, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	4298      	cmp	r0, r3
 800696c:	bfb8      	it	lt
 800696e:	4618      	movlt	r0, r3
 8006970:	e7a4      	b.n	80068bc <_printf_i+0x168>
 8006972:	2301      	movs	r3, #1
 8006974:	4632      	mov	r2, r6
 8006976:	4649      	mov	r1, r9
 8006978:	4640      	mov	r0, r8
 800697a:	47d0      	blx	sl
 800697c:	3001      	adds	r0, #1
 800697e:	d09b      	beq.n	80068b8 <_printf_i+0x164>
 8006980:	3501      	adds	r5, #1
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	1a5b      	subs	r3, r3, r1
 8006988:	42ab      	cmp	r3, r5
 800698a:	dcf2      	bgt.n	8006972 <_printf_i+0x21e>
 800698c:	e7eb      	b.n	8006966 <_printf_i+0x212>
 800698e:	2500      	movs	r5, #0
 8006990:	f104 0619 	add.w	r6, r4, #25
 8006994:	e7f5      	b.n	8006982 <_printf_i+0x22e>
 8006996:	bf00      	nop
 8006998:	08006d09 	.word	0x08006d09
 800699c:	08006d1a 	.word	0x08006d1a

080069a0 <_sbrk_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d06      	ldr	r5, [pc, #24]	; (80069bc <_sbrk_r+0x1c>)
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	f7fa ff7c 	bl	80018a8 <_sbrk>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_sbrk_r+0x1a>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_sbrk_r+0x1a>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	200001f0 	.word	0x200001f0

080069c0 <__sread>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	460c      	mov	r4, r1
 80069c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c8:	f000 f8f8 	bl	8006bbc <_read_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	bfab      	itete	ge
 80069d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069d2:	89a3      	ldrhlt	r3, [r4, #12]
 80069d4:	181b      	addge	r3, r3, r0
 80069d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069da:	bfac      	ite	ge
 80069dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80069de:	81a3      	strhlt	r3, [r4, #12]
 80069e0:	bd10      	pop	{r4, pc}

080069e2 <__swrite>:
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	461f      	mov	r7, r3
 80069e8:	898b      	ldrh	r3, [r1, #12]
 80069ea:	05db      	lsls	r3, r3, #23
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4616      	mov	r6, r2
 80069f2:	d505      	bpl.n	8006a00 <__swrite+0x1e>
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	2302      	movs	r3, #2
 80069fa:	2200      	movs	r2, #0
 80069fc:	f000 f868 	bl	8006ad0 <_lseek_r>
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	463b      	mov	r3, r7
 8006a10:	4628      	mov	r0, r5
 8006a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a16:	f000 b817 	b.w	8006a48 <_write_r>

08006a1a <__sseek>:
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a22:	f000 f855 	bl	8006ad0 <_lseek_r>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	bf15      	itete	ne
 8006a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a36:	81a3      	strheq	r3, [r4, #12]
 8006a38:	bf18      	it	ne
 8006a3a:	81a3      	strhne	r3, [r4, #12]
 8006a3c:	bd10      	pop	{r4, pc}

08006a3e <__sclose>:
 8006a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a42:	f000 b813 	b.w	8006a6c <_close_r>
	...

08006a48 <_write_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	; (8006a68 <_write_r+0x20>)
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fa fed5 	bl	8001806 <_write>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_write_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_write_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	200001f0 	.word	0x200001f0

08006a6c <_close_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	; (8006a88 <_close_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fa fee1 	bl	800183e <_close>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_close_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_close_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	200001f0 	.word	0x200001f0

08006a8c <_fstat_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d07      	ldr	r5, [pc, #28]	; (8006aac <_fstat_r+0x20>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	f7fa fedc 	bl	8001856 <_fstat>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d102      	bne.n	8006aa8 <_fstat_r+0x1c>
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	b103      	cbz	r3, 8006aa8 <_fstat_r+0x1c>
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	200001f0 	.word	0x200001f0

08006ab0 <_isatty_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d06      	ldr	r5, [pc, #24]	; (8006acc <_isatty_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fa fedb 	bl	8001876 <_isatty>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_isatty_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_isatty_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200001f0 	.word	0x200001f0

08006ad0 <_lseek_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d07      	ldr	r5, [pc, #28]	; (8006af0 <_lseek_r+0x20>)
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	602a      	str	r2, [r5, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7fa fed4 	bl	800188c <_lseek>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_lseek_r+0x1e>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_lseek_r+0x1e>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200001f0 	.word	0x200001f0

08006af4 <memcpy>:
 8006af4:	440a      	add	r2, r1
 8006af6:	4291      	cmp	r1, r2
 8006af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006afc:	d100      	bne.n	8006b00 <memcpy+0xc>
 8006afe:	4770      	bx	lr
 8006b00:	b510      	push	{r4, lr}
 8006b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	d1f9      	bne.n	8006b02 <memcpy+0xe>
 8006b0e:	bd10      	pop	{r4, pc}

08006b10 <memmove>:
 8006b10:	4288      	cmp	r0, r1
 8006b12:	b510      	push	{r4, lr}
 8006b14:	eb01 0402 	add.w	r4, r1, r2
 8006b18:	d902      	bls.n	8006b20 <memmove+0x10>
 8006b1a:	4284      	cmp	r4, r0
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	d807      	bhi.n	8006b30 <memmove+0x20>
 8006b20:	1e43      	subs	r3, r0, #1
 8006b22:	42a1      	cmp	r1, r4
 8006b24:	d008      	beq.n	8006b38 <memmove+0x28>
 8006b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b2e:	e7f8      	b.n	8006b22 <memmove+0x12>
 8006b30:	4402      	add	r2, r0
 8006b32:	4601      	mov	r1, r0
 8006b34:	428a      	cmp	r2, r1
 8006b36:	d100      	bne.n	8006b3a <memmove+0x2a>
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b42:	e7f7      	b.n	8006b34 <memmove+0x24>

08006b44 <__malloc_lock>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__malloc_lock+0x8>)
 8006b46:	f7ff b999 	b.w	8005e7c <__retarget_lock_acquire_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	200001e4 	.word	0x200001e4

08006b50 <__malloc_unlock>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__malloc_unlock+0x8>)
 8006b52:	f7ff b994 	b.w	8005e7e <__retarget_lock_release_recursive>
 8006b56:	bf00      	nop
 8006b58:	200001e4 	.word	0x200001e4

08006b5c <_realloc_r>:
 8006b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b60:	4680      	mov	r8, r0
 8006b62:	4614      	mov	r4, r2
 8006b64:	460e      	mov	r6, r1
 8006b66:	b921      	cbnz	r1, 8006b72 <_realloc_r+0x16>
 8006b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	f7ff ba59 	b.w	8006024 <_malloc_r>
 8006b72:	b92a      	cbnz	r2, 8006b80 <_realloc_r+0x24>
 8006b74:	f7ff f9ea 	bl	8005f4c <_free_r>
 8006b78:	4625      	mov	r5, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b80:	f000 f82e 	bl	8006be0 <_malloc_usable_size_r>
 8006b84:	4284      	cmp	r4, r0
 8006b86:	4607      	mov	r7, r0
 8006b88:	d802      	bhi.n	8006b90 <_realloc_r+0x34>
 8006b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b8e:	d812      	bhi.n	8006bb6 <_realloc_r+0x5a>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fa46 	bl	8006024 <_malloc_r>
 8006b98:	4605      	mov	r5, r0
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0ed      	beq.n	8006b7a <_realloc_r+0x1e>
 8006b9e:	42bc      	cmp	r4, r7
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	bf28      	it	cs
 8006ba6:	463a      	movcs	r2, r7
 8006ba8:	f7ff ffa4 	bl	8006af4 <memcpy>
 8006bac:	4631      	mov	r1, r6
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f7ff f9cc 	bl	8005f4c <_free_r>
 8006bb4:	e7e1      	b.n	8006b7a <_realloc_r+0x1e>
 8006bb6:	4635      	mov	r5, r6
 8006bb8:	e7df      	b.n	8006b7a <_realloc_r+0x1e>
	...

08006bbc <_read_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	; (8006bdc <_read_r+0x20>)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	602a      	str	r2, [r5, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fa fdfe 	bl	80017cc <_read>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_read_r+0x1e>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_read_r+0x1e>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	200001f0 	.word	0x200001f0

08006be0 <_malloc_usable_size_r>:
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f18      	subs	r0, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfbc      	itt	lt
 8006bea:	580b      	ldrlt	r3, [r1, r0]
 8006bec:	18c0      	addlt	r0, r0, r3
 8006bee:	4770      	bx	lr

08006bf0 <_init>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr

08006bfc <_fini>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr
