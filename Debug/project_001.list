
project_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  08006d98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08006d98  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cbd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aec  00000000  00000000  00032d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00036940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018859  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150a2  00000000  00000000  00050179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924bb  00000000  00000000  0006521b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f76d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  000f7728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bd4 	.word	0x08006bd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006bd4 	.word	0x08006bd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fee1 	bl	8001be0 <HAL_Delay>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <GPIO_Config>:


void GPIO_Config(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <DEV_I2C_Init+0x24>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <DEV_I2C_Init+0x28>)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	7013      	strb	r3, [r2, #0]
#endif
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000090 	.word	0x20000090
 8000e5c:	20000091 	.word	0x20000091

08000e60 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8000e70:	2300      	movs	r3, #0
 8000e72:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <I2C_Write_Byte+0x40>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	2320      	movs	r3, #32
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2301      	movs	r3, #1
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <I2C_Write_Byte+0x44>)
 8000e94:	f001 fea4 	bl	8002be0 <HAL_I2C_Mem_Write>
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000091 	.word	0x20000091
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <I2C_Read_Byte+0x3c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <I2C_Read_Byte+0x40>)
 8000ed6:	f001 ff7d 	bl	8002dd4 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000091 	.word	0x20000091
 8000ee8:	20000094 	.word	0x20000094

08000eec <I2C_Read_Word>:

int I2C_Read_Word(uint8_t Cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[2]={0, 0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x20);
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <I2C_Read_Word+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b299      	uxth	r1, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2320      	movs	r3, #32
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <I2C_Read_Word+0x48>)
 8000f1a:	f001 ff5b 	bl	8002dd4 <HAL_I2C_Mem_Read>
	return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	7b3a      	ldrb	r2, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
#endif
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000091 	.word	0x20000091
 8000f34:	20000094 	.word	0x20000094

08000f38 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000f3c:	f7ff ff73 	bl	8000e26 <GPIO_Config>
    DEV_I2C_Init(0x29<<1);
 8000f40:	2052      	movs	r0, #82	; 0x52
 8000f42:	f7ff ff77 	bl	8000e34 <DEV_I2C_Init>
    return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <TSL2591_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE TSL2591_Read_Byte(UBYTE Addr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f5c:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffa1 	bl	8000ea8 <I2C_Read_Byte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <TSL2591_Read_Word>:
parameter:
            Addr: Register address
Info:
******************************************************************************/
static UWORD TSL2591_Read_Word(UBYTE Addr)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f82:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Word(Addr);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffb0 	bl	8000eec <I2C_Read_Word>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29b      	uxth	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TSL2591_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void TSL2591_Write_Byte(UBYTE Addr, UBYTE Value)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
    Addr = Addr | COMMAND_BIT;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000fae:	71fb      	strb	r3, [r7, #7]
    I2C_Write_Byte(Addr, Value);
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff52 	bl	8000e60 <I2C_Write_Byte>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TSL2591_Enable>:
function:	Enable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Enable(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 8000fc8:	2193      	movs	r1, #147	; 0x93
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffe4 	bl	8000f98 <TSL2591_Write_Byte>
    ENABLE_AIEN | ENABLE_POWERON | ENABLE_AEN | ENABLE_NPIEN);
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TSL2591_Disable>:
function:	Disable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Disable(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ffdc 	bl	8000f98 <TSL2591_Write_Byte>
    ENABLE_POWEROFF);
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TSL2591_Get_Gain>:
function:	Read TSL2591 gain
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Get_Gain(void)
{   
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
        MEDIUM_AGAIN        = (0X10)        (25x)
        HIGH_AGAIN          = (0X20)        (428x)
        MAX_AGAIN           = (0x30)        (9876x)
    *************************************************/
    UBYTE data;
    data = TSL2591_Read_Byte(CONTROL_REGISTER);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ffae 	bl	8000f4c <TSL2591_Read_Byte>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
    TSL2591_Gain = data & 0x30;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <TSL2591_Get_Gain+0x2c>)
 8000ffe:	701a      	strb	r2, [r3, #0]
    return data & 0x30;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000092 	.word	0x20000092

08001014 <TSL2591_Set_Gain>:
function:	Set the TSL2591 gain
parameter:
Info:
******************************************************************************/
void TSL2591_Set_Gain(UBYTE Gain)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
    if(Gain == LOW_AGAIN || Gain == MEDIUM_AGAIN \
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <TSL2591_Set_Gain+0x26>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d005      	beq.n	800103a <TSL2591_Set_Gain+0x26>
        || Gain == HIGH_AGAIN || Gain == MAX_AGAIN){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b20      	cmp	r3, #32
 8001032:	d002      	beq.n	800103a <TSL2591_Set_Gain+0x26>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b30      	cmp	r3, #48	; 0x30
 8001038:	d115      	bne.n	8001066 <TSL2591_Set_Gain+0x52>
            control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ff86 	bl	8000f4c <TSL2591_Read_Byte>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
            control &= 0xCf; //0b11001111
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800104a:	73fb      	strb	r3, [r7, #15]
            control |= Gain;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4313      	orrs	r3, r2
 8001052:	73fb      	strb	r3, [r7, #15]
            TSL2591_Write_Byte(CONTROL_REGISTER, control);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4619      	mov	r1, r3
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ff9d 	bl	8000f98 <TSL2591_Write_Byte>
            TSL2591_Gain = Gain;
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <TSL2591_Set_Gain+0x64>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	7013      	strb	r3, [r2, #0]
 8001064:	e003      	b.n	800106e <TSL2591_Set_Gain+0x5a>
    }else{
        printf("Gain Parameter Error\r\n");
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <TSL2591_Set_Gain+0x68>)
 8001068:	f004 fc5a 	bl	8005920 <puts>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000092 	.word	0x20000092
 800107c:	08006bec 	.word	0x08006bec

08001080 <TSL2591_Set_IntegralTime>:
function:	Set the TSL2591 Integral Time
parameter:
Info:
******************************************************************************/
void TSL2591_Set_IntegralTime(UBYTE Time)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
    if(Time < 0x06){
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d815      	bhi.n	80010c0 <TSL2591_Set_IntegralTime+0x40>
        control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff59 	bl	8000f4c <TSL2591_Read_Byte>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
        control &= 0xf8; //0b11111000
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f023 0307 	bic.w	r3, r3, #7
 80010a4:	73fb      	strb	r3, [r7, #15]
        control |= Time;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	73fb      	strb	r3, [r7, #15]
        TSL2591_Write_Byte(CONTROL_REGISTER, control);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4619      	mov	r1, r3
 80010b2:	2001      	movs	r0, #1
 80010b4:	f7ff ff70 	bl	8000f98 <TSL2591_Write_Byte>
        TSL2591_Time = Time;
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <TSL2591_Set_IntegralTime+0x50>)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	7013      	strb	r3, [r2, #0]
    }else{
        printf("Integral Time Parameter Error\r\n");
    }
}
 80010be:	e002      	b.n	80010c6 <TSL2591_Set_IntegralTime+0x46>
        printf("Integral Time Parameter Error\r\n");
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <TSL2591_Set_IntegralTime+0x54>)
 80010c2:	f004 fc2d 	bl	8005920 <puts>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000093 	.word	0x20000093
 80010d4:	08006c04 	.word	0x08006c04

080010d8 <TSL2591_Read_Channel0>:
function:	Read channel data
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Channel0(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN0_LOW);
 80010dc:	2014      	movs	r0, #20
 80010de:	f7ff ff48 	bl	8000f72 <TSL2591_Read_Word>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TSL2591_Read_Channel1>:

UWORD TSL2591_Read_Channel1(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN1_LOW);
 80010ec:	2016      	movs	r0, #22
 80010ee:	f7ff ff40 	bl	8000f72 <TSL2591_Read_Word>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TSL2591_Init>:
function:	TSL2591 Initialization
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	DEV_I2C_Init(TSL2591_ADDRESS<<1);//8-bit address
 80010fc:	2052      	movs	r0, #82	; 0x52
 80010fe:	f7ff fe99 	bl	8000e34 <DEV_I2C_Init>
    printf("ID = 0x%X \r\n",TSL2591_Read_Byte(ID_REGISTER));
 8001102:	2012      	movs	r0, #18
 8001104:	f7ff ff22 	bl	8000f4c <TSL2591_Read_Byte>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <TSL2591_Init+0x3c>)
 800110e:	f004 fb81 	bl	8005814 <iprintf>
    TSL2591_Enable();
 8001112:	f7ff ff57 	bl	8000fc4 <TSL2591_Enable>
    TSL2591_Set_Gain(MEDIUM_AGAIN);//25X GAIN
 8001116:	2010      	movs	r0, #16
 8001118:	f7ff ff7c 	bl	8001014 <TSL2591_Set_Gain>
    TSL2591_Set_IntegralTime(ATIME_200MS);//200ms Integration time
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ffaf 	bl	8001080 <TSL2591_Set_IntegralTime>
    TSL2591_Write_Byte(PERSIST_REGISTER, 0x01);//filter
 8001122:	2101      	movs	r1, #1
 8001124:	200c      	movs	r0, #12
 8001126:	f7ff ff37 	bl	8000f98 <TSL2591_Write_Byte>
    TSL2591_Disable();
 800112a:	f7ff ff53 	bl	8000fd4 <TSL2591_Disable>
    return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08006c24 	.word	0x08006c24

08001138 <TSL2591_Read_Lux>:
function:	Read TSL2591 data to convert to Lux value
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Lux(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
    UWORD atime, max_counts,channel_0,channel_1;
    TSL2591_Enable();
 800113e:	f7ff ff41 	bl	8000fc4 <TSL2591_Enable>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001148:	e007      	b.n	800115a <TSL2591_Read_Lux+0x22>
        DEV_Delay_ms(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f7ff fe60 	bl	8000e10 <DEV_Delay_ms>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 8001150:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001154:	3301      	adds	r3, #1
 8001156:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800115a:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001164:	429a      	cmp	r2, r3
 8001166:	daf0      	bge.n	800114a <TSL2591_Read_Lux+0x12>
    }
    if(DEV_Digital_Read(INT_PIN) == 1)
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4867      	ldr	r0, [pc, #412]	; (800130c <TSL2591_Read_Lux+0x1d4>)
 800116e:	f001 f883 	bl	8002278 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d103      	bne.n	8001180 <TSL2591_Read_Lux+0x48>
            printf("INT 0\r\n"); 
 8001178:	4865      	ldr	r0, [pc, #404]	; (8001310 <TSL2591_Read_Lux+0x1d8>)
 800117a:	f004 fbd1 	bl	8005920 <puts>
 800117e:	e002      	b.n	8001186 <TSL2591_Read_Lux+0x4e>
    else
             printf("INT 1\r\n"); 
 8001180:	4864      	ldr	r0, [pc, #400]	; (8001314 <TSL2591_Read_Lux+0x1dc>)
 8001182:	f004 fbcd 	bl	8005920 <puts>
    channel_0 = TSL2591_Read_Channel0();
 8001186:	f7ff ffa7 	bl	80010d8 <TSL2591_Read_Channel0>
 800118a:	4603      	mov	r3, r0
 800118c:	84bb      	strh	r3, [r7, #36]	; 0x24
    channel_1 = TSL2591_Read_Channel1();
 800118e:	f7ff ffab 	bl	80010e8 <TSL2591_Read_Channel1>
 8001192:	4603      	mov	r3, r0
 8001194:	847b      	strh	r3, [r7, #34]	; 0x22
    TSL2591_Disable();
 8001196:	f7ff ff1d 	bl	8000fd4 <TSL2591_Disable>
    TSL2591_Enable();
 800119a:	f7ff ff13 	bl	8000fc4 <TSL2591_Enable>
    TSL2591_Write_Byte(0xE7, 0x13);
 800119e:	2113      	movs	r1, #19
 80011a0:	20e7      	movs	r0, #231	; 0xe7
 80011a2:	f7ff fef9 	bl	8000f98 <TSL2591_Write_Byte>
    TSL2591_Disable();
 80011a6:	f7ff ff15 	bl	8000fd4 <TSL2591_Disable>
    
    atime = 100 * TSL2591_Time + 100;
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	0091      	lsls	r1, r2, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	460b      	mov	r3, r1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	82fb      	strh	r3, [r7, #22]
    if(TSL2591_Time == ATIME_100MS){
 80011c6:	4b50      	ldr	r3, [pc, #320]	; (8001308 <TSL2591_Read_Lux+0x1d0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <TSL2591_Read_Lux+0x9e>
        max_counts = MAX_COUNT_100MS;
 80011ce:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80011d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011d4:	e002      	b.n	80011dc <TSL2591_Read_Lux+0xa4>
    }else{
        max_counts = MAX_COUNT;
 80011d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011da:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    UBYTE gain_t;
    if (channel_0 >= max_counts || channel_1 >= max_counts){
 80011dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d203      	bcs.n	80011ec <TSL2591_Read_Lux+0xb4>
 80011e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80011e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d32d      	bcc.n	8001248 <TSL2591_Read_Lux+0x110>
            gain_t = TSL2591_Get_Gain();
 80011ec:	f7ff fefa 	bl	8000fe4 <TSL2591_Get_Gain>
 80011f0:	4603      	mov	r3, r0
 80011f2:	757b      	strb	r3, [r7, #21]
            if(gain_t != LOW_AGAIN){
 80011f4:	7d7b      	ldrb	r3, [r7, #21]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d021      	beq.n	800123e <TSL2591_Read_Lux+0x106>
                gain_t = ((gain_t>>4)-1)<<4;
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	757b      	strb	r3, [r7, #21]
                TSL2591_Set_Gain(gain_t);
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff02 	bl	8001014 <TSL2591_Set_Gain>
                channel_0 = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	84bb      	strh	r3, [r7, #36]	; 0x24
                channel_1 = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 8001218:	e007      	b.n	800122a <TSL2591_Read_Lux+0xf2>
                    channel_0 = TSL2591_Read_Channel0();
 800121a:	f7ff ff5d 	bl	80010d8 <TSL2591_Read_Channel0>
 800121e:	4603      	mov	r3, r0
 8001220:	84bb      	strh	r3, [r7, #36]	; 0x24
                    channel_1 = TSL2591_Read_Channel1();
 8001222:	f7ff ff61 	bl	80010e8 <TSL2591_Read_Channel1>
 8001226:	4603      	mov	r3, r0
 8001228:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 800122a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f4      	beq.n	800121a <TSL2591_Read_Lux+0xe2>
 8001230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f1      	beq.n	800121a <TSL2591_Read_Lux+0xe2>
                }
                    DEV_Delay_ms(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f7ff fdea 	bl	8000e10 <DEV_Delay_ms>
 800123c:	e004      	b.n	8001248 <TSL2591_Read_Lux+0x110>
            }else{
                printf("Numerical overflow!/r/n");
 800123e:	4836      	ldr	r0, [pc, #216]	; (8001318 <TSL2591_Read_Lux+0x1e0>)
 8001240:	f004 fae8 	bl	8005814 <iprintf>
                return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e052      	b.n	80012ee <TSL2591_Read_Lux+0x1b6>
            }
    }
    double again;
    again = 1.0;
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <TSL2591_Read_Lux+0x1e4>)
 800124e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(TSL2591_Gain == MEDIUM_AGAIN){
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d105      	bne.n	8001266 <TSL2591_Read_Lux+0x12e>
        again = 25.0;
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <TSL2591_Read_Lux+0x1ec>)
 8001260:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001264:	e012      	b.n	800128c <TSL2591_Read_Lux+0x154>
    }else if(TSL2591_Gain == HIGH_AGAIN){
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d105      	bne.n	800127a <TSL2591_Read_Lux+0x142>
        again = 428.0;
 800126e:	a322      	add	r3, pc, #136	; (adr r3, 80012f8 <TSL2591_Read_Lux+0x1c0>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001278:	e008      	b.n	800128c <TSL2591_Read_Lux+0x154>
    }else if(TSL2591_Gain == MAX_AGAIN){
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <TSL2591_Read_Lux+0x1e8>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b30      	cmp	r3, #48	; 0x30
 8001280:	d104      	bne.n	800128c <TSL2591_Read_Lux+0x154>
        again = 9876.0;
 8001282:	a31f      	add	r3, pc, #124	; (adr r3, 8001300 <TSL2591_Read_Lux+0x1c8>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    double Cpl;
    UWORD lux1,lux2=0;
 800128c:	2300      	movs	r3, #0
 800128e:	827b      	strh	r3, [r7, #18]
    
    Cpl = (atime * again) / LUX_DF;
 8001290:	8afb      	ldrh	r3, [r7, #22]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f946 	bl	8000524 <__aeabi_i2d>
 8001298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800129c:	f7ff f9ac 	bl	80005f8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <TSL2591_Read_Lux+0x1f0>)
 80012ae:	f7ff facd 	bl	800084c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lux1 = (int)((channel_0 - (2 * channel_1)) / Cpl);
 80012ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f92e 	bl	8000524 <__aeabi_i2d>
 80012c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012cc:	f7ff fabe 	bl	800084c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fba0 	bl	8000a1c <__aeabi_d2iz>
 80012dc:	4603      	mov	r3, r0
 80012de:	80fb      	strh	r3, [r7, #6]
    // lux2 = ((0.6 * channel_0) - (channel_1)) / Cpl;
    // This is a two segment lux equation where the first 
    // segment (Lux1) covers fluorescent and incandescent light 
    // and the second segment (Lux2) covers dimmed incandescent light

    if(lux1>lux2){
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	8a7b      	ldrh	r3, [r7, #18]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d901      	bls.n	80012ec <TSL2591_Read_Lux+0x1b4>
        return lux1;
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	e000      	b.n	80012ee <TSL2591_Read_Lux+0x1b6>
    }else{
        return lux2;
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
    }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	00000000 	.word	0x00000000
 80012fc:	407ac000 	.word	0x407ac000
 8001300:	00000000 	.word	0x00000000
 8001304:	40c34a00 	.word	0x40c34a00
 8001308:	20000093 	.word	0x20000093
 800130c:	40020000 	.word	0x40020000
 8001310:	08006c34 	.word	0x08006c34
 8001314:	08006c3c 	.word	0x08006c3c
 8001318:	08006c44 	.word	0x08006c44
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	20000092 	.word	0x20000092
 8001324:	40390000 	.word	0x40390000
 8001328:	4087d000 	.word	0x4087d000

0800132c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <MX_GPIO_Init+0x98>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_GPIO_Init+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2120      	movs	r1, #32
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <MX_GPIO_Init+0x9c>)
 8001380:	f000 ff92 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001384:	2320      	movs	r3, #32
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <MX_GPIO_Init+0x9c>)
 800139c:	f000 fde8 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_Pin;
 80013a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0x9c>)
 80013b6:	f000 fddb 	bl	8001f70 <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2C1_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x50>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_I2C1_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2C1_Init+0x50>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C1_Init+0x50>)
 800140a:	f000 ff81 	bl	8002310 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 f960 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000094 	.word	0x20000094
 8001420:	40005400 	.word	0x40005400
 8001424:	000186a0 	.word	0x000186a0

08001428 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d12c      	bne.n	80014a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146c:	2312      	movs	r3, #18
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001478:	2304      	movs	r3, #4
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_I2C_MspInit+0x8c>)
 8001484:	f000 fd74 	bl	8001f70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 8001492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_I2C_MspInit+0x88>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fb1e 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f81a 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f7ff ff32 	bl	800132c <MX_GPIO_Init>
  MX_TIM10_Init();
 80014c8:	f000 fa28 	bl	800191c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80014cc:	f000 fa72 	bl	80019b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80014d0:	f7ff ff7c 	bl	80013cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <main+0x38>)
 80014d6:	f002 fff7 	bl	80044c8 <HAL_TIM_Base_Start_IT>
  DEV_ModuleInit();
 80014da:	f7ff fd2d 	bl	8000f38 <DEV_ModuleInit>
  TSL2591_Init();
 80014de:	f7ff fe0b 	bl	80010f8 <TSL2591_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	light_value = TSL2591_Read_Lux();
 80014e2:	f7ff fe29 	bl	8001138 <TSL2591_Read_Lux>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <main+0x3c>)
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e7f8      	b.n	80014e2 <main+0x2a>
 80014f0:	20000110 	.word	0x20000110
 80014f4:	200000ec 	.word	0x200000ec

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2230      	movs	r2, #48	; 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f004 f97c 	bl	8005804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <SystemClock_Config+0xb4>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <SystemClock_Config+0xb4>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SystemClock_Config+0xb4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <SystemClock_Config+0xb8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <SystemClock_Config+0xb8>)
 8001542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <SystemClock_Config+0xb8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fb05 	bl	8003b78 <HAL_RCC_OscConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001574:	f000 f8b0 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fd68 	bl	8004068 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800159e:	f000 f89b 	bl	80016d8 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM10) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d153      	bne.n	800166e <HAL_TIM_PeriodElapsedCallback+0xba>
		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		HAL_I2C_Master_Transmit(&hi2c1, (0x18 << 1), &TempReg, 1, HAL_MAX_DELAY);
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015d0:	2130      	movs	r1, #48	; 0x30
 80015d2:	482b      	ldr	r0, [pc, #172]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015d4:	f000 ffe0 	bl	8002598 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (0x18 << 1), &buf[0], 2, HAL_MAX_DELAY);
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2302      	movs	r3, #2
 80015e0:	4a28      	ldr	r2, [pc, #160]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015e2:	2130      	movs	r1, #48	; 0x30
 80015e4:	4826      	ldr	r0, [pc, #152]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015e6:	f001 f8d5 	bl	8002794 <HAL_I2C_Master_Receive>
		temp_val = (uint8_t)(buf[0] << 4) + buf[1] / 16.0;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff96 	bl	8000524 <__aeabi_i2d>
 80015f8:	4604      	mov	r4, r0
 80015fa:	460d      	mov	r5, r1
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff8f 	bl	8000524 <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800160c:	f7ff f91e 	bl	800084c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fe38 	bl	800028c <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa22 	bl	8000a6c <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800162c:	6013      	str	r3, [r2, #0]
		TemperatureInt = temp_val * 1000;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001690 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 2a90 	vmov	r2, s15
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001646:	601a      	str	r2, [r3, #0]
		size = sprintf(message_temp, "%d%d\n\r", TemperatureInt, light_value);
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4912      	ldr	r1, [pc, #72]	; (800169c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001654:	f004 f96c 	bl	8005930 <siprintf>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800165e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, message_temp, size); //sending one byte
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	490e      	ldr	r1, [pc, #56]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800166a:	f003 f9a0 	bl	80049ae <HAL_UART_Transmit_IT>

	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bdb0      	pop	{r4, r5, r7, pc}
 8001676:	bf00      	nop
 8001678:	40014400 	.word	0x40014400
 800167c:	20000000 	.word	0x20000000
 8001680:	20000094 	.word	0x20000094
 8001684:	200000f8 	.word	0x200000f8
 8001688:	40300000 	.word	0x40300000
 800168c:	200000f0 	.word	0x200000f0
 8001690:	447a0000 	.word	0x447a0000
 8001694:	200000e8 	.word	0x200000e8
 8001698:	200000ec 	.word	0x200000ec
 800169c:	08006c5c 	.word	0x08006c5c
 80016a0:	20000100 	.word	0x20000100
 80016a4:	200000f4 	.word	0x200000f4
 80016a8:	20000158 	.word	0x20000158

080016ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_UART_TxCpltCallback+0x24>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d103      	bne.n	80016c6 <HAL_UART_TxCpltCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016be:	2120      	movs	r1, #32
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <HAL_UART_TxCpltCallback+0x28>)
 80016c2:	f000 fe0a 	bl	80022da <HAL_GPIO_TogglePin>


	}
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40020000 	.word	0x40020000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 fa0e 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800178e:	f002 fefd 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000110 	.word	0x20000110

0800179c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <USART1_IRQHandler+0x10>)
 80017a2:	f003 f949 	bl	8004a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000158 	.word	0x20000158

080017b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e00a      	b.n	80017d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017c2:	f3af 8000 	nop.w
 80017c6:	4601      	mov	r1, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf0      	blt.n	80017c2 <_read+0x12>
	}

return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e009      	b.n	8001810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf1      	blt.n	80017fc <_write+0x12>
	}
	return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_close>:

int _close(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	605a      	str	r2, [r3, #4]
	return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f003 ff78 	bl	80057b0 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20020000 	.word	0x20020000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	2000010c 	.word	0x2000010c
 80018f4:	200001b0 	.word	0x200001b0

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_TIM10_Init+0x40>)
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <MX_TIM10_Init+0x44>)
 8001924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1599;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <MX_TIM10_Init+0x40>)
 8001928:	f240 623f 	movw	r2, #1599	; 0x63f
 800192c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_TIM10_Init+0x40>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_TIM10_Init+0x40>)
 8001936:	f242 720f 	movw	r2, #9999	; 0x270f
 800193a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <MX_TIM10_Init+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_TIM10_Init+0x40>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <MX_TIM10_Init+0x40>)
 800194a:	f002 fd6d 	bl	8004428 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001954:	f7ff fec0 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000110 	.word	0x20000110
 8001960:	40014400 	.word	0x40014400

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d115      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2019      	movs	r0, #25
 8001998:	f000 fa21 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800199c:	2019      	movs	r0, #25
 800199e:	f000 fa3a 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40014400 	.word	0x40014400
 80019b0:	40023800 	.word	0x40023800

080019b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <MX_USART1_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART1_UART_Init+0x4c>)
 80019ec:	f002 ff92 	bl	8004914 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f7ff fe6f 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000158 	.word	0x20000158
 8001a04:	40011000 	.word	0x40011000

08001a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_UART_MspInit+0x94>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d134      	bne.n	8001a94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001a62:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a74:	2307      	movs	r3, #7
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a80:	f000 fa76 	bl	8001f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2025      	movs	r0, #37	; 0x25
 8001a8a:	f000 f9a8 	bl	8001dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8e:	2025      	movs	r0, #37	; 0x25
 8001a90:	f000 f9c1 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac4:	4c0b      	ldr	r4, [pc, #44]	; (8001af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad2:	f7ff ff11 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f003 fe71 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7ff fced 	bl	80014b8 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001aec:	08006d24 	.word	0x08006d24
  ldr r2, =_sbss
 8001af0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001af4:	200001b0 	.word	0x200001b0

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_Init+0x40>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_Init+0x40>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_Init+0x40>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 f94f 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	200f      	movs	r0, #15
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fdd8 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f967 	bl	8001e32 <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 f92f 	bl	8001dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000004 	.word	0x20000004
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	2000019c 	.word	0x2000019c

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000019c 	.word	0x2000019c

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d94:	d301      	bcc.n	8001d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00f      	b.n	8001dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <SysTick_Config+0x40>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da2:	210f      	movs	r1, #15
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f7ff ff8e 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <SysTick_Config+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <SysTick_Config+0x40>)
 8001db4:	2207      	movs	r2, #7
 8001db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	e000e010 	.word	0xe000e010

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff29 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff3e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff8e 	bl	8001d1c <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5d 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff31 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ffa2 	bl	8001d84 <SysTick_Config>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff feb6 	bl	8001bc8 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d008      	beq.n	8001e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e052      	b.n	8001f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0216 	bic.w	r2, r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_DMA_Abort+0x62>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ecc:	e013      	b.n	8001ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ece:	f7ff fe7b 	bl	8001bc8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d90c      	bls.n	8001ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e015      	b.n	8001f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e4      	bne.n	8001ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00c      	b.n	8001f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e159      	b.n	8002240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8148 	bne.w	800223a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d005      	beq.n	8001fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d130      	bne.n	8002024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0201 	and.w	r2, r3, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b03      	cmp	r3, #3
 800202e:	d017      	beq.n	8002060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a2 	beq.w	800223a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <HAL_GPIO_Init+0x2e8>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a56      	ldr	r2, [pc, #344]	; (8002258 <HAL_GPIO_Init+0x2e8>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_GPIO_Init+0x2e8>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002112:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_GPIO_Init+0x2ec>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a49      	ldr	r2, [pc, #292]	; (8002260 <HAL_GPIO_Init+0x2f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x202>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a48      	ldr	r2, [pc, #288]	; (8002264 <HAL_GPIO_Init+0x2f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x1fe>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a47      	ldr	r2, [pc, #284]	; (8002268 <HAL_GPIO_Init+0x2f8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x1fa>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a46      	ldr	r2, [pc, #280]	; (800226c <HAL_GPIO_Init+0x2fc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x1f6>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_GPIO_Init+0x300>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x1f2>
 800215e:	2304      	movs	r3, #4
 8002160:	e008      	b.n	8002174 <HAL_GPIO_Init+0x204>
 8002162:	2307      	movs	r3, #7
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x204>
 8002166:	2303      	movs	r3, #3
 8002168:	e004      	b.n	8002174 <HAL_GPIO_Init+0x204>
 800216a:	2302      	movs	r3, #2
 800216c:	e002      	b.n	8002174 <HAL_GPIO_Init+0x204>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x204>
 8002172:	2300      	movs	r3, #0
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f002 0203 	and.w	r2, r2, #3
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4093      	lsls	r3, r2
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <HAL_GPIO_Init+0x2ec>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b6:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x304>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_GPIO_Init+0x304>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <HAL_GPIO_Init+0x304>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_GPIO_Init+0x304>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800220a:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_GPIO_Init+0x304>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002234:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <HAL_GPIO_Init+0x304>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3301      	adds	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	f67f aea2 	bls.w	8001f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	041a      	lsls	r2, r3, #16
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	400b      	ands	r3, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e12b      	b.n	800257a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f876 	bl	8001428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002374:	f002 f830 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a81      	ldr	r2, [pc, #516]	; (8002584 <HAL_I2C_Init+0x274>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d807      	bhi.n	8002394 <HAL_I2C_Init+0x84>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a80      	ldr	r2, [pc, #512]	; (8002588 <HAL_I2C_Init+0x278>)
 8002388:	4293      	cmp	r3, r2
 800238a:	bf94      	ite	ls
 800238c:	2301      	movls	r3, #1
 800238e:	2300      	movhi	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e006      	b.n	80023a2 <HAL_I2C_Init+0x92>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a7d      	ldr	r2, [pc, #500]	; (800258c <HAL_I2C_Init+0x27c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf94      	ite	ls
 800239c:	2301      	movls	r3, #1
 800239e:	2300      	movhi	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0e7      	b.n	800257a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a78      	ldr	r2, [pc, #480]	; (8002590 <HAL_I2C_Init+0x280>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9b      	lsrs	r3, r3, #18
 80023b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a6a      	ldr	r2, [pc, #424]	; (8002584 <HAL_I2C_Init+0x274>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d802      	bhi.n	80023e4 <HAL_I2C_Init+0xd4>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	e009      	b.n	80023f8 <HAL_I2C_Init+0xe8>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_I2C_Init+0x284>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800240a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	495c      	ldr	r1, [pc, #368]	; (8002584 <HAL_I2C_Init+0x274>)
 8002414:	428b      	cmp	r3, r1
 8002416:	d819      	bhi.n	800244c <HAL_I2C_Init+0x13c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e59      	subs	r1, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fbb1 f3f3 	udiv	r3, r1, r3
 8002426:	1c59      	adds	r1, r3, #1
 8002428:	f640 73fc 	movw	r3, #4092	; 0xffc
 800242c:	400b      	ands	r3, r1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_I2C_Init+0x138>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1e59      	subs	r1, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002440:	3301      	adds	r3, #1
 8002442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002446:	e051      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 8002448:	2304      	movs	r3, #4
 800244a:	e04f      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d111      	bne.n	8002478 <HAL_I2C_Init+0x168>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e012      	b.n	800249e <HAL_I2C_Init+0x18e>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	0099      	lsls	r1, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	fbb0 f3f3 	udiv	r3, r0, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Init+0x196>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e022      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10e      	bne.n	80024cc <HAL_I2C_Init+0x1bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1e58      	subs	r0, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	440b      	add	r3, r1
 80024bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Init+0x1dc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e58      	subs	r0, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	0099      	lsls	r1, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	6809      	ldr	r1, [r1, #0]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800251a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6911      	ldr	r1, [r2, #16]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	4311      	orrs	r1, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	430b      	orrs	r3, r1
 800252e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	000186a0 	.word	0x000186a0
 8002588:	001e847f 	.word	0x001e847f
 800258c:	003d08ff 	.word	0x003d08ff
 8002590:	431bde83 	.word	0x431bde83
 8002594:	10624dd3 	.word	0x10624dd3

08002598 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	461a      	mov	r2, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	817b      	strh	r3, [r7, #10]
 80025a8:	4613      	mov	r3, r2
 80025aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff fb0c 	bl	8001bc8 <HAL_GetTick>
 80025b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	f040 80e0 	bne.w	8002780 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	4970      	ldr	r1, [pc, #448]	; (800278c <HAL_I2C_Master_Transmit+0x1f4>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f001 f8f6 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	e0d3      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0x50>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0cc      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d007      	beq.n	800260e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2221      	movs	r2, #33	; 0x21
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2210      	movs	r2, #16
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	893a      	ldrh	r2, [r7, #8]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_I2C_Master_Transmit+0x1f8>)
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002650:	8979      	ldrh	r1, [r7, #10]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fde2 	bl	8003220 <I2C_MasterRequestWrite>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e08d      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800267c:	e066      	b.n	800274c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f001 f970 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d11b      	bne.n	8002720 <HAL_I2C_Master_Transmit+0x188>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	6a39      	ldr	r1, [r7, #32]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f001 f960 	bl	80039ea <I2C_WaitOnBTFFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2b04      	cmp	r3, #4
 8002736:	d107      	bne.n	8002748 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e01a      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d194      	bne.n	800267e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	00100002 	.word	0x00100002
 8002790:	ffff0000 	.word	0xffff0000

08002794 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	460b      	mov	r3, r1
 80027a2:	817b      	strh	r3, [r7, #10]
 80027a4:	4613      	mov	r3, r2
 80027a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff fa0e 	bl	8001bc8 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	f040 820b 	bne.w	8002bd2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2319      	movs	r3, #25
 80027c2:	2201      	movs	r2, #1
 80027c4:	497c      	ldr	r1, [pc, #496]	; (80029b8 <HAL_I2C_Master_Receive+0x224>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fff8 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	e1fe      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_I2C_Master_Receive+0x50>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e1f7      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d007      	beq.n	800280a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2222      	movs	r2, #34	; 0x22
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2210      	movs	r2, #16
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	893a      	ldrh	r2, [r7, #8]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a5c      	ldr	r2, [pc, #368]	; (80029bc <HAL_I2C_Master_Receive+0x228>)
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fd66 	bl	8003324 <I2C_MasterRequestRead>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e1b8      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d113      	bne.n	8002892 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e18c      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	2b01      	cmp	r3, #1
 8002898:	d11b      	bne.n	80028d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e16c      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d11b      	bne.n	8002912 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	e14c      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002938:	e138      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b03      	cmp	r3, #3
 8002940:	f200 80f1 	bhi.w	8002b26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b01      	cmp	r3, #1
 800294a:	d123      	bne.n	8002994 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f001 f88b 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e139      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002992:	e10b      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	2b02      	cmp	r3, #2
 800299a:	d14e      	bne.n	8002a3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	4906      	ldr	r1, [pc, #24]	; (80029c0 <HAL_I2C_Master_Receive+0x22c>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 ff08 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e10e      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
 80029b6:	bf00      	nop
 80029b8:	00100002 	.word	0x00100002
 80029bc:	ffff0000 	.word	0xffff0000
 80029c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a38:	e0b8      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2200      	movs	r2, #0
 8002a42:	4966      	ldr	r1, [pc, #408]	; (8002bdc <HAL_I2C_Master_Receive+0x448>)
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 feb9 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0bf      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	494f      	ldr	r1, [pc, #316]	; (8002bdc <HAL_I2C_Master_Receive+0x448>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fe8b 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e091      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b24:	e042      	b.n	8002bac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 ff9e 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e04c      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d118      	bne.n	8002bac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f aec2 	bne.w	800293a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	00010004 	.word	0x00010004

08002be0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfa:	f7fe ffe5 	bl	8001bc8 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80d9 	bne.w	8002dc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	496d      	ldr	r1, [pc, #436]	; (8002dcc <HAL_I2C_Mem_Write+0x1ec>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fdcf 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0cc      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Mem_Write+0x56>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0c5      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d007      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2221      	movs	r2, #33	; 0x21
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	; (8002dd0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9e:	88f8      	ldrh	r0, [r7, #6]
 8002ca0:	893a      	ldrh	r2, [r7, #8]
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4603      	mov	r3, r0
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fc06 	bl	80034c0 <I2C_RequestMemoryWrite>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d052      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e081      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fe50 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06b      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d11b      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x180>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1aa      	bne.n	8002cbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fe3c 	bl	80039ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e016      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	00100002 	.word	0x00100002
 8002dd0:	ffff0000 	.word	0xffff0000

08002dd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dee:	f7fe feeb 	bl	8001bc8 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	f040 8208 	bne.w	8003212 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2319      	movs	r3, #25
 8002e08:	2201      	movs	r2, #1
 8002e0a:	497b      	ldr	r1, [pc, #492]	; (8002ff8 <HAL_I2C_Mem_Read+0x224>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fcd5 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e1fb      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Mem_Read+0x56>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e1f4      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_I2C_Mem_Read+0x228>)
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e92:	88f8      	ldrh	r0, [r7, #6]
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fba2 	bl	80035ec <I2C_RequestMemoryRead>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1b0      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e184      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e164      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	e144      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f78:	e138      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	f200 80f1 	bhi.w	8003166 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d123      	bne.n	8002fd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fd6b 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e139      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd2:	e10b      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d14e      	bne.n	800307a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4906      	ldr	r1, [pc, #24]	; (8003000 <HAL_I2C_Mem_Read+0x22c>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fbe8 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e10e      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
 8002ff6:	bf00      	nop
 8002ff8:	00100002 	.word	0x00100002
 8002ffc:	ffff0000 	.word	0xffff0000
 8003000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003078:	e0b8      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	4966      	ldr	r1, [pc, #408]	; (800321c <HAL_I2C_Mem_Read+0x448>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fb99 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0bf      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2200      	movs	r2, #0
 80030de:	494f      	ldr	r1, [pc, #316]	; (800321c <HAL_I2C_Mem_Read+0x448>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fb6b 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e091      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003164:	e042      	b.n	80031ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fc7e 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e04c      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d118      	bne.n	80031ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f47f aec2 	bne.w	8002f7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	00010004 	.word	0x00010004

08003220 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d006      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d003      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003248:	d108      	bne.n	800325c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e00b      	b.n	8003274 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	2b12      	cmp	r3, #18
 8003262:	d107      	bne.n	8003274 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fa9b 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e035      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b0:	d108      	bne.n	80032c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032c0:	611a      	str	r2, [r3, #16]
 80032c2:	e01b      	b.n	80032fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032c4:	897b      	ldrh	r3, [r7, #10]
 80032c6:	11db      	asrs	r3, r3, #7
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f003 0306 	and.w	r3, r3, #6
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f063 030f 	orn	r3, r3, #15
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <I2C_MasterRequestWrite+0xfc>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fac1 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e010      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <I2C_MasterRequestWrite+0x100>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fab1 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	00010008 	.word	0x00010008
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	460b      	mov	r3, r1
 8003332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d006      	beq.n	800335e <I2C_MasterRequestRead+0x3a>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d003      	beq.n	800335e <I2C_MasterRequestRead+0x3a>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800335c:	d108      	bne.n	8003370 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e00b      	b.n	8003388 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2b11      	cmp	r3, #17
 8003376:	d107      	bne.n	8003388 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa11 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ae:	d103      	bne.n	80033b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e079      	b.n	80034b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]
 80033d6:	e05f      	b.n	8003498 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	11db      	asrs	r3, r3, #7
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f063 030f 	orn	r3, r3, #15
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4930      	ldr	r1, [pc, #192]	; (80034b8 <I2C_MasterRequestRead+0x194>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa37 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e054      	b.n	80034b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4929      	ldr	r1, [pc, #164]	; (80034bc <I2C_MasterRequestRead+0x198>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa27 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e044      	b.n	80034b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f9af 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d103      	bne.n	800347c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e017      	b.n	80034b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	11db      	asrs	r3, r3, #7
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 030e 	orn	r3, r3, #14
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <I2C_MasterRequestRead+0x198>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f9e3 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	00010008 	.word	0x00010008
 80034bc:	00010002 	.word	0x00010002

080034c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	817b      	strh	r3, [r7, #10]
 80034d2:	460b      	mov	r3, r1
 80034d4:	813b      	strh	r3, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f960 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d103      	bne.n	800351a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e05f      	b.n	80035de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800352c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	492d      	ldr	r1, [pc, #180]	; (80035e8 <I2C_RequestMemoryWrite+0x128>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f998 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e04c      	b.n	80035de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	6a39      	ldr	r1, [r7, #32]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa02 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b04      	cmp	r3, #4
 8003570:	d107      	bne.n	8003582 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003580:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02b      	b.n	80035de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e021      	b.n	80035dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	6a39      	ldr	r1, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f9dc 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e005      	b.n	80035de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035d2:	893b      	ldrh	r3, [r7, #8]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	00010002 	.word	0x00010002

080035ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	817b      	strh	r3, [r7, #10]
 80035fe:	460b      	mov	r3, r1
 8003600:	813b      	strh	r3, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2200      	movs	r2, #0
 800362e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f8c2 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d103      	bne.n	8003656 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0aa      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	4952      	ldr	r1, [pc, #328]	; (80037b8 <I2C_RequestMemoryRead+0x1cc>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f8fa 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e097      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	6a39      	ldr	r1, [r7, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f964 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d107      	bne.n	80036be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e076      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e021      	b.n	8003718 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	b29b      	uxth	r3, r3
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f93e 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e050      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	6a39      	ldr	r1, [r7, #32]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f923 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e035      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003752:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	2200      	movs	r2, #0
 800375c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f82b 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377a:	d103      	bne.n	8003784 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e013      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	4906      	ldr	r1, [pc, #24]	; (80037b8 <I2C_RequestMemoryRead+0x1cc>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f863 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010002 	.word	0x00010002

080037bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	e025      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d021      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe f9f7 	bl	8001bc8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d116      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e023      	b.n	8003862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10d      	bne.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	e00c      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d0b6      	beq.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003878:	e051      	b.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d123      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e046      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d021      	beq.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe f975 	bl	8001bc8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e020      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10c      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e00b      	b.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	43da      	mvns	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d18d      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003974:	e02d      	b.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8ce 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02d      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe f91b 	bl	8001bc8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d1ca      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f6:	e02d      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f88d 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02d      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d021      	beq.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fe f8da 	bl	8001bc8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d1ca      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a78:	e042      	b.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d119      	bne.n	8003abc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e029      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abc:	f7fe f884 	bl	8001bc8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d1b5      	bne.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d11b      	bne.n	8003b68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e267      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d075      	beq.n	8003c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b85      	ldr	r3, [pc, #532]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d112      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bae:	4b82      	ldr	r3, [pc, #520]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d157      	bne.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e242      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_OscConfig+0x74>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x98>
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6f      	ldr	r2, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6c      	ldr	r2, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xb0>
 8003c10:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a68      	ldr	r2, [pc, #416]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b66      	ldr	r3, [pc, #408]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a65      	ldr	r2, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd ffca 	bl	8001bc8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fd ffc6 	bl	8001bc8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e207      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fd ffb6 	bl	8001bc8 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fd ffb2 	bl	8001bc8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1f3      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d063      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1c7      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x244>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd ff6b 	bl	8001bc8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd ff67 	bl	8001bc8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1a8      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_RCC_OscConfig+0x244>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd ff4a 	bl	8001bc8 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fd ff46 	bl	8001bc8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e187      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d036      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCC_OscConfig+0x248>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd ff2a 	bl	8001bc8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fd ff26 	bl	8001bc8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e167      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x200>
 8003d96:	e01b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_OscConfig+0x248>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fd ff13 	bl	8001bc8 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fd ff0f 	bl	8001bc8 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d907      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e150      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8097 	beq.w	8003f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b7d      	ldr	r3, [pc, #500]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a7c      	ldr	r2, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b7a      	ldr	r3, [pc, #488]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b77      	ldr	r3, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b74      	ldr	r3, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a73      	ldr	r2, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fd fecf 	bl	8001bc8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd fecb 	bl	8001bc8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e10c      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_OscConfig+0x474>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2ea>
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a63      	ldr	r2, [pc, #396]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x324>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x30c>
 8003e6a:	4b5f      	ldr	r3, [pc, #380]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5e      	ldr	r2, [pc, #376]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5b      	ldr	r2, [pc, #364]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x324>
 8003e84:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b55      	ldr	r3, [pc, #340]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a54      	ldr	r2, [pc, #336]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fe90 	bl	8001bc8 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fd fe8c 	bl	8001bc8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0cb      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x334>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fe7a 	bl	8001bc8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fe76 	bl	8001bc8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0b5      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	4b3e      	ldr	r3, [pc, #248]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a1 	beq.w	8004058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d05c      	beq.n	8003fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d141      	bne.n	8003fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe4a 	bl	8001bc8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd fe46 	bl	8001bc8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e087      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fd fe1f 	bl	8001bc8 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fd fe1b 	bl	8001bc8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e05c      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x416>
 8003fac:	e054      	b.n	8004058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_RCC_OscConfig+0x478>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fe08 	bl	8001bc8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd fe04 	bl	8001bc8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e045      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x444>
 8003fda:	e03d      	b.n	8004058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e038      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4ec>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d028      	beq.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d121      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d11a      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	4293      	cmp	r3, r2
 800402e:	d111      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cc      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d90c      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	494d      	ldr	r1, [pc, #308]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d044      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d119      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d003      	beq.n	8004126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	2b03      	cmp	r3, #3
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e067      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4934      	ldr	r1, [pc, #208]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fd fd36 	bl	8001bc8 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd fd32 	bl	8001bc8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d20c      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4916      	ldr	r1, [pc, #88]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f821 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	5ccb      	ldrb	r3, [r1, r3]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fc96 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	40023800 	.word	0x40023800
 8004228:	08006c64 	.word	0x08006c64
 800422c:	20000004 	.word	0x20000004
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b090      	sub	sp, #64	; 0x40
 800423a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
 8004240:	2300      	movs	r3, #0
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004244:	2300      	movs	r3, #0
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d00d      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x40>
 8004258:	2b08      	cmp	r3, #8
 800425a:	f200 80a1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x34>
 8004262:	2b04      	cmp	r3, #4
 8004264:	d003      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x3a>
 8004266:	e09b      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800426c:	e09b      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426e:	4b53      	ldr	r3, [pc, #332]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004272:	e098      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427e:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d028      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	2200      	movs	r2, #0
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	627a      	str	r2, [r7, #36]	; 0x24
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800429c:	2100      	movs	r1, #0
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 80042a0:	fb03 f201 	mul.w	r2, r3, r1
 80042a4:	2300      	movs	r3, #0
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	4a43      	ldr	r2, [pc, #268]	; (80043bc <HAL_RCC_GetSysClockFreq+0x188>)
 80042ae:	fba0 1202 	umull	r1, r2, r0, r2
 80042b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b4:	460a      	mov	r2, r1
 80042b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80042b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ba:	4413      	add	r3, r2
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2200      	movs	r2, #0
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ce:	f7fc fc1d 	bl	8000b0c <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4613      	mov	r3, r2
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042da:	e053      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	2200      	movs	r2, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	617a      	str	r2, [r7, #20]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ee:	f04f 0b00 	mov.w	fp, #0
 80042f2:	4652      	mov	r2, sl
 80042f4:	465b      	mov	r3, fp
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004304:	0150      	lsls	r0, r2, #5
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	ebb2 080a 	subs.w	r8, r2, sl
 800430e:	eb63 090b 	sbc.w	r9, r3, fp
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800431e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004322:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004326:	ebb2 0408 	subs.w	r4, r2, r8
 800432a:	eb63 0509 	sbc.w	r5, r3, r9
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	00eb      	lsls	r3, r5, #3
 8004338:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433c:	00e2      	lsls	r2, r4, #3
 800433e:	4614      	mov	r4, r2
 8004340:	461d      	mov	r5, r3
 8004342:	eb14 030a 	adds.w	r3, r4, sl
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	eb45 030b 	adc.w	r3, r5, fp
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435a:	4629      	mov	r1, r5
 800435c:	028b      	lsls	r3, r1, #10
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004364:	4621      	mov	r1, r4
 8004366:	028a      	lsls	r2, r1, #10
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	2200      	movs	r2, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004378:	f7fc fbc8 	bl	8000b0c <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3740      	adds	r7, #64	; 0x40
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	017d7840 	.word	0x017d7840

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff0 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0a9b      	lsrs	r3, r3, #10
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	08006c74 	.word	0x08006c74

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffdc 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0b5b      	lsrs	r3, r3, #13
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	08006c74 	.word	0x08006c74

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fa88 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 f9c0 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e044      	b.n	800456a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start_IT+0xb0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d013      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_TIM_Base_Start_IT+0xb4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_TIM_Base_Start_IT+0xb8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_TIM_Base_Start_IT+0xbc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIM_Base_Start_IT+0xc0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b06      	cmp	r3, #6
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	e007      	b.n	8004568 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0202 	mvn.w	r2, #2
 80045b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8ee 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8e0 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8f1 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8c4 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8b6 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8c7 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b08      	cmp	r3, #8
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f89a 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f88c 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f89d 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0210 	mvn.w	r2, #16
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2208      	movs	r2, #8
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f870 	bl	80047b0 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f862 	bl	800479c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f873 	bl	80047c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0201 	mvn.w	r2, #1
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc ff52 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8e2 	bl	8004900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f838 	bl	80047d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b20      	cmp	r3, #32
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b20      	cmp	r3, #32
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0220 	mvn.w	r2, #32
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8ac 	bl	80048ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a34      	ldr	r2, [pc, #208]	; (80048d0 <TIM_Base_SetConfig+0xe4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a31      	ldr	r2, [pc, #196]	; (80048d4 <TIM_Base_SetConfig+0xe8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <TIM_Base_SetConfig+0xec>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <TIM_Base_SetConfig+0xf0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <TIM_Base_SetConfig+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <TIM_Base_SetConfig+0xe8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <TIM_Base_SetConfig+0xec>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a20      	ldr	r2, [pc, #128]	; (80048dc <TIM_Base_SetConfig+0xf0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <TIM_Base_SetConfig+0xf4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <TIM_Base_SetConfig+0xf8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <TIM_Base_SetConfig+0xfc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <TIM_Base_SetConfig+0xe4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800

080048ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e03f      	b.n	80049a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd f864 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2224      	movs	r2, #36	; 0x24
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fcb5 	bl	80052c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d130      	bne.n	8004a2a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_UART_Transmit_IT+0x26>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e029      	b.n	8004a2c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Transmit_IT+0x38>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e022      	b.n	8004a2c <HAL_UART_Transmit_IT+0x7e>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	88fa      	ldrh	r2, [r7, #6]
 80049fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2221      	movs	r2, #33	; 0x21
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0ba      	sub	sp, #232	; 0xe8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_UART_IRQHandler+0x66>
 8004a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb5b 	bl	8005152 <UART_Receive_IT>
      return;
 8004a9c:	e256      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80de 	beq.w	8004c64 <HAL_UART_IRQHandler+0x22c>
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80d1 	beq.w	8004c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xae>
 8004ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xd2>
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
 8004b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0208 	orr.w	r2, r3, #8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 81ed 	beq.w	8004f42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_UART_IRQHandler+0x14e>
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fae6 	bl	8005152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x17a>
 8004baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04f      	beq.n	8004c52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9ee 	bl	8004f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d141      	bne.n	8004c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1d9      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d013      	beq.n	8004c42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	4a7d      	ldr	r2, [pc, #500]	; (8004e14 <HAL_UART_IRQHandler+0x3dc>)
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd f97f 	bl	8001f2a <HAL_DMA_Abort_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00e      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f990 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e00a      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f98c 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e006      	b.n	8004c60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f988 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c5e:	e170      	b.n	8004f42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	bf00      	nop
    return;
 8004c62:	e16e      	b.n	8004f42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 814a 	bne.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 8143 	beq.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 813c 	beq.w	8004f02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	f040 80b4 	bne.w	8004e18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8140 	beq.w	8004f46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	f080 8139 	bcs.w	8004f46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	f000 8088 	beq.w	8004dfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1d9      	bne.n	8004cea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e1      	bne.n	8004d36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e3      	bne.n	8004d72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dca:	f023 0310 	bic.w	r3, r3, #16
 8004dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e3      	bne.n	8004db8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fd f828 	bl	8001e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8b6 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e10:	e099      	b.n	8004f46 <HAL_UART_IRQHandler+0x50e>
 8004e12:	bf00      	nop
 8004e14:	0800505b 	.word	0x0800505b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 808b 	beq.w	8004f4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e62:	647a      	str	r2, [r7, #68]	; 0x44
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e3      	bne.n	8004e3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	623b      	str	r3, [r7, #32]
   return(result);
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3314      	adds	r3, #20
 8004e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e3      	bne.n	8004e76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	617b      	str	r3, [r7, #20]
   return(result);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e3      	bne.n	8004ebc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f83e 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f00:	e023      	b.n	8004f4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_UART_IRQHandler+0x4ea>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8b1 	bl	8005082 <UART_Transmit_IT>
    return;
 8004f20:	e014      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <HAL_UART_IRQHandler+0x514>
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8f1 	bl	8005122 <UART_EndTransmit_IT>
    return;
 8004f40:	e004      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
    return;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
      return;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <HAL_UART_IRQHandler+0x514>
      return;
 8004f4a:	bf00      	nop
  }
}
 8004f4c:	37e8      	adds	r7, #232	; 0xe8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop

08004f54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b095      	sub	sp, #84	; 0x54
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fbc:	643a      	str	r2, [r7, #64]	; 0x40
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	2b01      	cmp	r3, #1
 800500a:	d119      	bne.n	8005040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	60bb      	str	r3, [r7, #8]
   return(result);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0310 	bic.w	r3, r3, #16
 8005022:	647b      	str	r3, [r7, #68]	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502c:	61ba      	str	r2, [r7, #24]
 800502e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6979      	ldr	r1, [r7, #20]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	613b      	str	r3, [r7, #16]
   return(result);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800504e:	bf00      	nop
 8005050:	3754      	adds	r7, #84	; 0x54
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ff77 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b21      	cmp	r3, #33	; 0x21
 8005094:	d13e      	bne.n	8005114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	d114      	bne.n	80050ca <UART_Transmit_IT+0x48>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	621a      	str	r2, [r3, #32]
 80050c8:	e008      	b.n	80050dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6211      	str	r1, [r2, #32]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4619      	mov	r1, r3
 80050ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10f      	bne.n	8005110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800510e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e000      	b.n	8005116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005114:	2302      	movs	r3, #2
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fab2 	bl	80016ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b08c      	sub	sp, #48	; 0x30
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b22      	cmp	r3, #34	; 0x22
 8005164:	f040 80ab 	bne.w	80052be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d117      	bne.n	80051a2 <UART_Receive_IT+0x50>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005190:	b29a      	uxth	r2, r3
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	1c9a      	adds	r2, r3, #2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28
 80051a0:	e026      	b.n	80051f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b4:	d007      	beq.n	80051c6 <UART_Receive_IT+0x74>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <UART_Receive_IT+0x82>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d106      	bne.n	80051d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e008      	b.n	80051e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4619      	mov	r1, r3
 80051fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15a      	bne.n	80052ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0220 	bic.w	r2, r2, #32
 8005212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2b01      	cmp	r3, #1
 8005242:	d135      	bne.n	80052b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	613b      	str	r3, [r7, #16]
   return(result);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	623a      	str	r2, [r7, #32]
 800526c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	69f9      	ldr	r1, [r7, #28]
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	61bb      	str	r3, [r7, #24]
   return(result);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b10      	cmp	r3, #16
 800528a:	d10a      	bne.n	80052a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fe67 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
 80052ae:	e002      	b.n	80052b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fe4f 	bl	8004f54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e002      	b.n	80052c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3730      	adds	r7, #48	; 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052cc:	b0c0      	sub	sp, #256	; 0x100
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	68d9      	ldr	r1, [r3, #12]
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	ea40 0301 	orr.w	r3, r0, r1
 80052f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	431a      	orrs	r2, r3
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	431a      	orrs	r2, r3
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005320:	f021 010c 	bic.w	r1, r1, #12
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800532e:	430b      	orrs	r3, r1
 8005330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	6999      	ldr	r1, [r3, #24]
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	ea40 0301 	orr.w	r3, r0, r1
 800534e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b8f      	ldr	r3, [pc, #572]	; (8005594 <UART_SetConfig+0x2cc>)
 8005358:	429a      	cmp	r2, r3
 800535a:	d005      	beq.n	8005368 <UART_SetConfig+0xa0>
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b8d      	ldr	r3, [pc, #564]	; (8005598 <UART_SetConfig+0x2d0>)
 8005364:	429a      	cmp	r2, r3
 8005366:	d104      	bne.n	8005372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7ff f84a 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 800536c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005370:	e003      	b.n	800537a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005372:	f7ff f831 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005376:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	f040 810c 	bne.w	80055a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005392:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800539a:	4622      	mov	r2, r4
 800539c:	462b      	mov	r3, r5
 800539e:	1891      	adds	r1, r2, r2
 80053a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80053a2:	415b      	adcs	r3, r3
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053aa:	4621      	mov	r1, r4
 80053ac:	eb12 0801 	adds.w	r8, r2, r1
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb43 0901 	adc.w	r9, r3, r1
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ca:	4690      	mov	r8, r2
 80053cc:	4699      	mov	r9, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	eb18 0303 	adds.w	r3, r8, r3
 80053d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053d8:	462b      	mov	r3, r5
 80053da:	eb49 0303 	adc.w	r3, r9, r3
 80053de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053f6:	460b      	mov	r3, r1
 80053f8:	18db      	adds	r3, r3, r3
 80053fa:	653b      	str	r3, [r7, #80]	; 0x50
 80053fc:	4613      	mov	r3, r2
 80053fe:	eb42 0303 	adc.w	r3, r2, r3
 8005402:	657b      	str	r3, [r7, #84]	; 0x54
 8005404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800540c:	f7fb fb7e 	bl	8000b0c <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4b61      	ldr	r3, [pc, #388]	; (800559c <UART_SetConfig+0x2d4>)
 8005416:	fba3 2302 	umull	r2, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	011c      	lsls	r4, r3, #4
 800541e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005422:	2200      	movs	r2, #0
 8005424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005428:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800542c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	1891      	adds	r1, r2, r2
 8005436:	64b9      	str	r1, [r7, #72]	; 0x48
 8005438:	415b      	adcs	r3, r3
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005440:	4641      	mov	r1, r8
 8005442:	eb12 0a01 	adds.w	sl, r2, r1
 8005446:	4649      	mov	r1, r9
 8005448:	eb43 0b01 	adc.w	fp, r3, r1
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800545c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005460:	4692      	mov	sl, r2
 8005462:	469b      	mov	fp, r3
 8005464:	4643      	mov	r3, r8
 8005466:	eb1a 0303 	adds.w	r3, sl, r3
 800546a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800546e:	464b      	mov	r3, r9
 8005470:	eb4b 0303 	adc.w	r3, fp, r3
 8005474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800548c:	460b      	mov	r3, r1
 800548e:	18db      	adds	r3, r3, r3
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
 8005492:	4613      	mov	r3, r2
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
 800549a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800549e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054a2:	f7fb fb33 	bl	8000b0c <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	4b3b      	ldr	r3, [pc, #236]	; (800559c <UART_SetConfig+0x2d4>)
 80054ae:	fba3 2301 	umull	r2, r3, r3, r1
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2264      	movs	r2, #100	; 0x64
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	1acb      	subs	r3, r1, r3
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <UART_SetConfig+0x2d4>)
 80054c4:	fba3 2302 	umull	r2, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054d0:	441c      	add	r4, r3
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80054ec:	415b      	adcs	r3, r3
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054f4:	4641      	mov	r1, r8
 80054f6:	1851      	adds	r1, r2, r1
 80054f8:	6339      	str	r1, [r7, #48]	; 0x30
 80054fa:	4649      	mov	r1, r9
 80054fc:	414b      	adcs	r3, r1
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800550c:	4659      	mov	r1, fp
 800550e:	00cb      	lsls	r3, r1, #3
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005516:	4651      	mov	r1, sl
 8005518:	00ca      	lsls	r2, r1, #3
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	4603      	mov	r3, r0
 8005520:	4642      	mov	r2, r8
 8005522:	189b      	adds	r3, r3, r2
 8005524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005528:	464b      	mov	r3, r9
 800552a:	460a      	mov	r2, r1
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005540:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800555a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800555e:	f7fb fad5 	bl	8000b0c <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <UART_SetConfig+0x2d4>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	; 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	3332      	adds	r3, #50	; 0x32
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <UART_SetConfig+0x2d4>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4422      	add	r2, r4
 800558e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005590:	e105      	b.n	800579e <UART_SetConfig+0x4d6>
 8005592:	bf00      	nop
 8005594:	40011000 	.word	0x40011000
 8005598:	40011400 	.word	0x40011400
 800559c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055b2:	4642      	mov	r2, r8
 80055b4:	464b      	mov	r3, r9
 80055b6:	1891      	adds	r1, r2, r2
 80055b8:	6239      	str	r1, [r7, #32]
 80055ba:	415b      	adcs	r3, r3
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055c2:	4641      	mov	r1, r8
 80055c4:	1854      	adds	r4, r2, r1
 80055c6:	4649      	mov	r1, r9
 80055c8:	eb43 0501 	adc.w	r5, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	00eb      	lsls	r3, r5, #3
 80055d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055da:	00e2      	lsls	r2, r4, #3
 80055dc:	4614      	mov	r4, r2
 80055de:	461d      	mov	r5, r3
 80055e0:	4643      	mov	r3, r8
 80055e2:	18e3      	adds	r3, r4, r3
 80055e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055e8:	464b      	mov	r3, r9
 80055ea:	eb45 0303 	adc.w	r3, r5, r3
 80055ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800560e:	4629      	mov	r1, r5
 8005610:	008b      	lsls	r3, r1, #2
 8005612:	4621      	mov	r1, r4
 8005614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005618:	4621      	mov	r1, r4
 800561a:	008a      	lsls	r2, r1, #2
 800561c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005620:	f7fb fa74 	bl	8000b0c <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4b60      	ldr	r3, [pc, #384]	; (80057ac <UART_SetConfig+0x4e4>)
 800562a:	fba3 2302 	umull	r2, r3, r3, r2
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	011c      	lsls	r4, r3, #4
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800563c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	61b9      	str	r1, [r7, #24]
 800564c:	415b      	adcs	r3, r3
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005654:	4641      	mov	r1, r8
 8005656:	1851      	adds	r1, r2, r1
 8005658:	6139      	str	r1, [r7, #16]
 800565a:	4649      	mov	r1, r9
 800565c:	414b      	adcs	r3, r1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800566c:	4659      	mov	r1, fp
 800566e:	00cb      	lsls	r3, r1, #3
 8005670:	4651      	mov	r1, sl
 8005672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005676:	4651      	mov	r1, sl
 8005678:	00ca      	lsls	r2, r1, #3
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	4603      	mov	r3, r0
 8005680:	4642      	mov	r2, r8
 8005682:	189b      	adds	r3, r3, r2
 8005684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005688:	464b      	mov	r3, r9
 800568a:	460a      	mov	r2, r1
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	67bb      	str	r3, [r7, #120]	; 0x78
 800569e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056ac:	4649      	mov	r1, r9
 80056ae:	008b      	lsls	r3, r1, #2
 80056b0:	4641      	mov	r1, r8
 80056b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b6:	4641      	mov	r1, r8
 80056b8:	008a      	lsls	r2, r1, #2
 80056ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056be:	f7fb fa25 	bl	8000b0c <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4b39      	ldr	r3, [pc, #228]	; (80057ac <UART_SetConfig+0x4e4>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	3332      	adds	r3, #50	; 0x32
 80056da:	4a34      	ldr	r2, [pc, #208]	; (80057ac <UART_SetConfig+0x4e4>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e6:	441c      	add	r4, r3
 80056e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ec:	2200      	movs	r2, #0
 80056ee:	673b      	str	r3, [r7, #112]	; 0x70
 80056f0:	677a      	str	r2, [r7, #116]	; 0x74
 80056f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056f6:	4642      	mov	r2, r8
 80056f8:	464b      	mov	r3, r9
 80056fa:	1891      	adds	r1, r2, r2
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	415b      	adcs	r3, r3
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005706:	4641      	mov	r1, r8
 8005708:	1851      	adds	r1, r2, r1
 800570a:	6039      	str	r1, [r7, #0]
 800570c:	4649      	mov	r1, r9
 800570e:	414b      	adcs	r3, r1
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800571e:	4659      	mov	r1, fp
 8005720:	00cb      	lsls	r3, r1, #3
 8005722:	4651      	mov	r1, sl
 8005724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005728:	4651      	mov	r1, sl
 800572a:	00ca      	lsls	r2, r1, #3
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	4603      	mov	r3, r0
 8005732:	4642      	mov	r2, r8
 8005734:	189b      	adds	r3, r3, r2
 8005736:	66bb      	str	r3, [r7, #104]	; 0x68
 8005738:	464b      	mov	r3, r9
 800573a:	460a      	mov	r2, r1
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	663b      	str	r3, [r7, #96]	; 0x60
 800574c:	667a      	str	r2, [r7, #100]	; 0x64
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800575a:	4649      	mov	r1, r9
 800575c:	008b      	lsls	r3, r1, #2
 800575e:	4641      	mov	r1, r8
 8005760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005764:	4641      	mov	r1, r8
 8005766:	008a      	lsls	r2, r1, #2
 8005768:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800576c:	f7fb f9ce 	bl	8000b0c <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <UART_SetConfig+0x4e4>)
 8005776:	fba3 1302 	umull	r1, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	2164      	movs	r1, #100	; 0x64
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	3332      	adds	r3, #50	; 0x32
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <UART_SetConfig+0x4e4>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4422      	add	r2, r4
 800579c:	609a      	str	r2, [r3, #8]
}
 800579e:	bf00      	nop
 80057a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057a4:	46bd      	mov	sp, r7
 80057a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057aa:	bf00      	nop
 80057ac:	51eb851f 	.word	0x51eb851f

080057b0 <__errno>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	; (80057b8 <__errno+0x8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000010 	.word	0x20000010

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4d0d      	ldr	r5, [pc, #52]	; (80057f4 <__libc_init_array+0x38>)
 80057c0:	4c0d      	ldr	r4, [pc, #52]	; (80057f8 <__libc_init_array+0x3c>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	2600      	movs	r6, #0
 80057c8:	42a6      	cmp	r6, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	4d0b      	ldr	r5, [pc, #44]	; (80057fc <__libc_init_array+0x40>)
 80057ce:	4c0c      	ldr	r4, [pc, #48]	; (8005800 <__libc_init_array+0x44>)
 80057d0:	f001 fa00 	bl	8006bd4 <_init>
 80057d4:	1b64      	subs	r4, r4, r5
 80057d6:	10a4      	asrs	r4, r4, #2
 80057d8:	2600      	movs	r6, #0
 80057da:	42a6      	cmp	r6, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e4:	4798      	blx	r3
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ee:	4798      	blx	r3
 80057f0:	3601      	adds	r6, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	08006d1c 	.word	0x08006d1c
 80057f8:	08006d1c 	.word	0x08006d1c
 80057fc:	08006d1c 	.word	0x08006d1c
 8005800:	08006d20 	.word	0x08006d20

08005804 <memset>:
 8005804:	4402      	add	r2, r0
 8005806:	4603      	mov	r3, r0
 8005808:	4293      	cmp	r3, r2
 800580a:	d100      	bne.n	800580e <memset+0xa>
 800580c:	4770      	bx	lr
 800580e:	f803 1b01 	strb.w	r1, [r3], #1
 8005812:	e7f9      	b.n	8005808 <memset+0x4>

08005814 <iprintf>:
 8005814:	b40f      	push	{r0, r1, r2, r3}
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <iprintf+0x2c>)
 8005818:	b513      	push	{r0, r1, r4, lr}
 800581a:	681c      	ldr	r4, [r3, #0]
 800581c:	b124      	cbz	r4, 8005828 <iprintf+0x14>
 800581e:	69a3      	ldr	r3, [r4, #24]
 8005820:	b913      	cbnz	r3, 8005828 <iprintf+0x14>
 8005822:	4620      	mov	r0, r4
 8005824:	f000 fa7e 	bl	8005d24 <__sinit>
 8005828:	ab05      	add	r3, sp, #20
 800582a:	9a04      	ldr	r2, [sp, #16]
 800582c:	68a1      	ldr	r1, [r4, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fde3 	bl	80063fc <_vfiprintf_r>
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800583c:	b004      	add	sp, #16
 800583e:	4770      	bx	lr
 8005840:	20000010 	.word	0x20000010

08005844 <_puts_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	460e      	mov	r6, r1
 8005848:	4605      	mov	r5, r0
 800584a:	b118      	cbz	r0, 8005854 <_puts_r+0x10>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	b90b      	cbnz	r3, 8005854 <_puts_r+0x10>
 8005850:	f000 fa68 	bl	8005d24 <__sinit>
 8005854:	69ab      	ldr	r3, [r5, #24]
 8005856:	68ac      	ldr	r4, [r5, #8]
 8005858:	b913      	cbnz	r3, 8005860 <_puts_r+0x1c>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 fa62 	bl	8005d24 <__sinit>
 8005860:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <_puts_r+0xd0>)
 8005862:	429c      	cmp	r4, r3
 8005864:	d120      	bne.n	80058a8 <_puts_r+0x64>
 8005866:	686c      	ldr	r4, [r5, #4]
 8005868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800586a:	07db      	lsls	r3, r3, #31
 800586c:	d405      	bmi.n	800587a <_puts_r+0x36>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	0598      	lsls	r0, r3, #22
 8005872:	d402      	bmi.n	800587a <_puts_r+0x36>
 8005874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005876:	f000 faf3 	bl	8005e60 <__retarget_lock_acquire_recursive>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	0719      	lsls	r1, r3, #28
 800587e:	d51d      	bpl.n	80058bc <_puts_r+0x78>
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	b1db      	cbz	r3, 80058bc <_puts_r+0x78>
 8005884:	3e01      	subs	r6, #1
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800588c:	3b01      	subs	r3, #1
 800588e:	60a3      	str	r3, [r4, #8]
 8005890:	bb39      	cbnz	r1, 80058e2 <_puts_r+0x9e>
 8005892:	2b00      	cmp	r3, #0
 8005894:	da38      	bge.n	8005908 <_puts_r+0xc4>
 8005896:	4622      	mov	r2, r4
 8005898:	210a      	movs	r1, #10
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f868 	bl	8005970 <__swbuf_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d011      	beq.n	80058c8 <_puts_r+0x84>
 80058a4:	250a      	movs	r5, #10
 80058a6:	e011      	b.n	80058cc <_puts_r+0x88>
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <_puts_r+0xd4>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d101      	bne.n	80058b2 <_puts_r+0x6e>
 80058ae:	68ac      	ldr	r4, [r5, #8]
 80058b0:	e7da      	b.n	8005868 <_puts_r+0x24>
 80058b2:	4b1a      	ldr	r3, [pc, #104]	; (800591c <_puts_r+0xd8>)
 80058b4:	429c      	cmp	r4, r3
 80058b6:	bf08      	it	eq
 80058b8:	68ec      	ldreq	r4, [r5, #12]
 80058ba:	e7d5      	b.n	8005868 <_puts_r+0x24>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f8a8 	bl	8005a14 <__swsetup_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0dd      	beq.n	8005884 <_puts_r+0x40>
 80058c8:	f04f 35ff 	mov.w	r5, #4294967295
 80058cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ce:	07da      	lsls	r2, r3, #31
 80058d0:	d405      	bmi.n	80058de <_puts_r+0x9a>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	059b      	lsls	r3, r3, #22
 80058d6:	d402      	bmi.n	80058de <_puts_r+0x9a>
 80058d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058da:	f000 fac2 	bl	8005e62 <__retarget_lock_release_recursive>
 80058de:	4628      	mov	r0, r5
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da04      	bge.n	80058f0 <_puts_r+0xac>
 80058e6:	69a2      	ldr	r2, [r4, #24]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dc06      	bgt.n	80058fa <_puts_r+0xb6>
 80058ec:	290a      	cmp	r1, #10
 80058ee:	d004      	beq.n	80058fa <_puts_r+0xb6>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	7019      	strb	r1, [r3, #0]
 80058f8:	e7c5      	b.n	8005886 <_puts_r+0x42>
 80058fa:	4622      	mov	r2, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 f837 	bl	8005970 <__swbuf_r>
 8005902:	3001      	adds	r0, #1
 8005904:	d1bf      	bne.n	8005886 <_puts_r+0x42>
 8005906:	e7df      	b.n	80058c8 <_puts_r+0x84>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	250a      	movs	r5, #10
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	701d      	strb	r5, [r3, #0]
 8005912:	e7db      	b.n	80058cc <_puts_r+0x88>
 8005914:	08006ca0 	.word	0x08006ca0
 8005918:	08006cc0 	.word	0x08006cc0
 800591c:	08006c80 	.word	0x08006c80

08005920 <puts>:
 8005920:	4b02      	ldr	r3, [pc, #8]	; (800592c <puts+0xc>)
 8005922:	4601      	mov	r1, r0
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	f7ff bf8d 	b.w	8005844 <_puts_r>
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010

08005930 <siprintf>:
 8005930:	b40e      	push	{r1, r2, r3}
 8005932:	b500      	push	{lr}
 8005934:	b09c      	sub	sp, #112	; 0x70
 8005936:	ab1d      	add	r3, sp, #116	; 0x74
 8005938:	9002      	str	r0, [sp, #8]
 800593a:	9006      	str	r0, [sp, #24]
 800593c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005940:	4809      	ldr	r0, [pc, #36]	; (8005968 <siprintf+0x38>)
 8005942:	9107      	str	r1, [sp, #28]
 8005944:	9104      	str	r1, [sp, #16]
 8005946:	4909      	ldr	r1, [pc, #36]	; (800596c <siprintf+0x3c>)
 8005948:	f853 2b04 	ldr.w	r2, [r3], #4
 800594c:	9105      	str	r1, [sp, #20]
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	a902      	add	r1, sp, #8
 8005954:	f000 fc28 	bl	80061a8 <_svfiprintf_r>
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	b01c      	add	sp, #112	; 0x70
 8005960:	f85d eb04 	ldr.w	lr, [sp], #4
 8005964:	b003      	add	sp, #12
 8005966:	4770      	bx	lr
 8005968:	20000010 	.word	0x20000010
 800596c:	ffff0208 	.word	0xffff0208

08005970 <__swbuf_r>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	460e      	mov	r6, r1
 8005974:	4614      	mov	r4, r2
 8005976:	4605      	mov	r5, r0
 8005978:	b118      	cbz	r0, 8005982 <__swbuf_r+0x12>
 800597a:	6983      	ldr	r3, [r0, #24]
 800597c:	b90b      	cbnz	r3, 8005982 <__swbuf_r+0x12>
 800597e:	f000 f9d1 	bl	8005d24 <__sinit>
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <__swbuf_r+0x98>)
 8005984:	429c      	cmp	r4, r3
 8005986:	d12b      	bne.n	80059e0 <__swbuf_r+0x70>
 8005988:	686c      	ldr	r4, [r5, #4]
 800598a:	69a3      	ldr	r3, [r4, #24]
 800598c:	60a3      	str	r3, [r4, #8]
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	071a      	lsls	r2, r3, #28
 8005992:	d52f      	bpl.n	80059f4 <__swbuf_r+0x84>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	b36b      	cbz	r3, 80059f4 <__swbuf_r+0x84>
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1ac0      	subs	r0, r0, r3
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	b2f6      	uxtb	r6, r6
 80059a2:	4283      	cmp	r3, r0
 80059a4:	4637      	mov	r7, r6
 80059a6:	dc04      	bgt.n	80059b2 <__swbuf_r+0x42>
 80059a8:	4621      	mov	r1, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f926 	bl	8005bfc <_fflush_r>
 80059b0:	bb30      	cbnz	r0, 8005a00 <__swbuf_r+0x90>
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	6022      	str	r2, [r4, #0]
 80059be:	701e      	strb	r6, [r3, #0]
 80059c0:	6963      	ldr	r3, [r4, #20]
 80059c2:	3001      	adds	r0, #1
 80059c4:	4283      	cmp	r3, r0
 80059c6:	d004      	beq.n	80059d2 <__swbuf_r+0x62>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	07db      	lsls	r3, r3, #31
 80059cc:	d506      	bpl.n	80059dc <__swbuf_r+0x6c>
 80059ce:	2e0a      	cmp	r6, #10
 80059d0:	d104      	bne.n	80059dc <__swbuf_r+0x6c>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f911 	bl	8005bfc <_fflush_r>
 80059da:	b988      	cbnz	r0, 8005a00 <__swbuf_r+0x90>
 80059dc:	4638      	mov	r0, r7
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <__swbuf_r+0x9c>)
 80059e2:	429c      	cmp	r4, r3
 80059e4:	d101      	bne.n	80059ea <__swbuf_r+0x7a>
 80059e6:	68ac      	ldr	r4, [r5, #8]
 80059e8:	e7cf      	b.n	800598a <__swbuf_r+0x1a>
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <__swbuf_r+0xa0>)
 80059ec:	429c      	cmp	r4, r3
 80059ee:	bf08      	it	eq
 80059f0:	68ec      	ldreq	r4, [r5, #12]
 80059f2:	e7ca      	b.n	800598a <__swbuf_r+0x1a>
 80059f4:	4621      	mov	r1, r4
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 f80c 	bl	8005a14 <__swsetup_r>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d0cb      	beq.n	8005998 <__swbuf_r+0x28>
 8005a00:	f04f 37ff 	mov.w	r7, #4294967295
 8005a04:	e7ea      	b.n	80059dc <__swbuf_r+0x6c>
 8005a06:	bf00      	nop
 8005a08:	08006ca0 	.word	0x08006ca0
 8005a0c:	08006cc0 	.word	0x08006cc0
 8005a10:	08006c80 	.word	0x08006c80

08005a14 <__swsetup_r>:
 8005a14:	4b32      	ldr	r3, [pc, #200]	; (8005ae0 <__swsetup_r+0xcc>)
 8005a16:	b570      	push	{r4, r5, r6, lr}
 8005a18:	681d      	ldr	r5, [r3, #0]
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	b125      	cbz	r5, 8005a2a <__swsetup_r+0x16>
 8005a20:	69ab      	ldr	r3, [r5, #24]
 8005a22:	b913      	cbnz	r3, 8005a2a <__swsetup_r+0x16>
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 f97d 	bl	8005d24 <__sinit>
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <__swsetup_r+0xd0>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d10f      	bne.n	8005a50 <__swsetup_r+0x3c>
 8005a30:	686c      	ldr	r4, [r5, #4]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a38:	0719      	lsls	r1, r3, #28
 8005a3a:	d42c      	bmi.n	8005a96 <__swsetup_r+0x82>
 8005a3c:	06dd      	lsls	r5, r3, #27
 8005a3e:	d411      	bmi.n	8005a64 <__swsetup_r+0x50>
 8005a40:	2309      	movs	r3, #9
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	e03e      	b.n	8005ace <__swsetup_r+0xba>
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <__swsetup_r+0xd4>)
 8005a52:	429c      	cmp	r4, r3
 8005a54:	d101      	bne.n	8005a5a <__swsetup_r+0x46>
 8005a56:	68ac      	ldr	r4, [r5, #8]
 8005a58:	e7eb      	b.n	8005a32 <__swsetup_r+0x1e>
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <__swsetup_r+0xd8>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	bf08      	it	eq
 8005a60:	68ec      	ldreq	r4, [r5, #12]
 8005a62:	e7e6      	b.n	8005a32 <__swsetup_r+0x1e>
 8005a64:	0758      	lsls	r0, r3, #29
 8005a66:	d512      	bpl.n	8005a8e <__swsetup_r+0x7a>
 8005a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a6a:	b141      	cbz	r1, 8005a7e <__swsetup_r+0x6a>
 8005a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d002      	beq.n	8005a7a <__swsetup_r+0x66>
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 fa5b 	bl	8005f30 <_free_r>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	2300      	movs	r3, #0
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	b94b      	cbnz	r3, 8005aae <__swsetup_r+0x9a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa4:	d003      	beq.n	8005aae <__swsetup_r+0x9a>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 fa01 	bl	8005eb0 <__smakebuf_r>
 8005aae:	89a0      	ldrh	r0, [r4, #12]
 8005ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ab4:	f010 0301 	ands.w	r3, r0, #1
 8005ab8:	d00a      	beq.n	8005ad0 <__swsetup_r+0xbc>
 8005aba:	2300      	movs	r3, #0
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	6963      	ldr	r3, [r4, #20]
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	61a3      	str	r3, [r4, #24]
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	b943      	cbnz	r3, 8005ada <__swsetup_r+0xc6>
 8005ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005acc:	d1ba      	bne.n	8005a44 <__swsetup_r+0x30>
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	0781      	lsls	r1, r0, #30
 8005ad2:	bf58      	it	pl
 8005ad4:	6963      	ldrpl	r3, [r4, #20]
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	e7f4      	b.n	8005ac4 <__swsetup_r+0xb0>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7f7      	b.n	8005ace <__swsetup_r+0xba>
 8005ade:	bf00      	nop
 8005ae0:	20000010 	.word	0x20000010
 8005ae4:	08006ca0 	.word	0x08006ca0
 8005ae8:	08006cc0 	.word	0x08006cc0
 8005aec:	08006c80 	.word	0x08006c80

08005af0 <__sflush_r>:
 8005af0:	898a      	ldrh	r2, [r1, #12]
 8005af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af6:	4605      	mov	r5, r0
 8005af8:	0710      	lsls	r0, r2, #28
 8005afa:	460c      	mov	r4, r1
 8005afc:	d458      	bmi.n	8005bb0 <__sflush_r+0xc0>
 8005afe:	684b      	ldr	r3, [r1, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dc05      	bgt.n	8005b10 <__sflush_r+0x20>
 8005b04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	dc02      	bgt.n	8005b10 <__sflush_r+0x20>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	d0f9      	beq.n	8005b0a <__sflush_r+0x1a>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b1c:	682f      	ldr	r7, [r5, #0]
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	d032      	beq.n	8005b88 <__sflush_r+0x98>
 8005b22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	075a      	lsls	r2, r3, #29
 8005b28:	d505      	bpl.n	8005b36 <__sflush_r+0x46>
 8005b2a:	6863      	ldr	r3, [r4, #4]
 8005b2c:	1ac0      	subs	r0, r0, r3
 8005b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b30:	b10b      	cbz	r3, 8005b36 <__sflush_r+0x46>
 8005b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b34:	1ac0      	subs	r0, r0, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b3c:	6a21      	ldr	r1, [r4, #32]
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b0      	blx	r6
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	d106      	bne.n	8005b56 <__sflush_r+0x66>
 8005b48:	6829      	ldr	r1, [r5, #0]
 8005b4a:	291d      	cmp	r1, #29
 8005b4c:	d82c      	bhi.n	8005ba8 <__sflush_r+0xb8>
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <__sflush_r+0x108>)
 8005b50:	40ca      	lsrs	r2, r1
 8005b52:	07d6      	lsls	r6, r2, #31
 8005b54:	d528      	bpl.n	8005ba8 <__sflush_r+0xb8>
 8005b56:	2200      	movs	r2, #0
 8005b58:	6062      	str	r2, [r4, #4]
 8005b5a:	04d9      	lsls	r1, r3, #19
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	6022      	str	r2, [r4, #0]
 8005b60:	d504      	bpl.n	8005b6c <__sflush_r+0x7c>
 8005b62:	1c42      	adds	r2, r0, #1
 8005b64:	d101      	bne.n	8005b6a <__sflush_r+0x7a>
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	b903      	cbnz	r3, 8005b6c <__sflush_r+0x7c>
 8005b6a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b6e:	602f      	str	r7, [r5, #0]
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d0ca      	beq.n	8005b0a <__sflush_r+0x1a>
 8005b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <__sflush_r+0x92>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f9d7 	bl	8005f30 <_free_r>
 8005b82:	2000      	movs	r0, #0
 8005b84:	6360      	str	r0, [r4, #52]	; 0x34
 8005b86:	e7c1      	b.n	8005b0c <__sflush_r+0x1c>
 8005b88:	6a21      	ldr	r1, [r4, #32]
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b0      	blx	r6
 8005b90:	1c41      	adds	r1, r0, #1
 8005b92:	d1c7      	bne.n	8005b24 <__sflush_r+0x34>
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0c4      	beq.n	8005b24 <__sflush_r+0x34>
 8005b9a:	2b1d      	cmp	r3, #29
 8005b9c:	d001      	beq.n	8005ba2 <__sflush_r+0xb2>
 8005b9e:	2b16      	cmp	r3, #22
 8005ba0:	d101      	bne.n	8005ba6 <__sflush_r+0xb6>
 8005ba2:	602f      	str	r7, [r5, #0]
 8005ba4:	e7b1      	b.n	8005b0a <__sflush_r+0x1a>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	e7ad      	b.n	8005b0c <__sflush_r+0x1c>
 8005bb0:	690f      	ldr	r7, [r1, #16]
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	d0a9      	beq.n	8005b0a <__sflush_r+0x1a>
 8005bb6:	0793      	lsls	r3, r2, #30
 8005bb8:	680e      	ldr	r6, [r1, #0]
 8005bba:	bf08      	it	eq
 8005bbc:	694b      	ldreq	r3, [r1, #20]
 8005bbe:	600f      	str	r7, [r1, #0]
 8005bc0:	bf18      	it	ne
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	eba6 0807 	sub.w	r8, r6, r7
 8005bc8:	608b      	str	r3, [r1, #8]
 8005bca:	f1b8 0f00 	cmp.w	r8, #0
 8005bce:	dd9c      	ble.n	8005b0a <__sflush_r+0x1a>
 8005bd0:	6a21      	ldr	r1, [r4, #32]
 8005bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bd4:	4643      	mov	r3, r8
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b0      	blx	r6
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	dc06      	bgt.n	8005bee <__sflush_r+0xfe>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	e78e      	b.n	8005b0c <__sflush_r+0x1c>
 8005bee:	4407      	add	r7, r0
 8005bf0:	eba8 0800 	sub.w	r8, r8, r0
 8005bf4:	e7e9      	b.n	8005bca <__sflush_r+0xda>
 8005bf6:	bf00      	nop
 8005bf8:	20400001 	.word	0x20400001

08005bfc <_fflush_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	690b      	ldr	r3, [r1, #16]
 8005c00:	4605      	mov	r5, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	b913      	cbnz	r3, 8005c0c <_fflush_r+0x10>
 8005c06:	2500      	movs	r5, #0
 8005c08:	4628      	mov	r0, r5
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	b118      	cbz	r0, 8005c16 <_fflush_r+0x1a>
 8005c0e:	6983      	ldr	r3, [r0, #24]
 8005c10:	b90b      	cbnz	r3, 8005c16 <_fflush_r+0x1a>
 8005c12:	f000 f887 	bl	8005d24 <__sinit>
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <_fflush_r+0x6c>)
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d11b      	bne.n	8005c54 <_fflush_r+0x58>
 8005c1c:	686c      	ldr	r4, [r5, #4]
 8005c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0ef      	beq.n	8005c06 <_fflush_r+0xa>
 8005c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c28:	07d0      	lsls	r0, r2, #31
 8005c2a:	d404      	bmi.n	8005c36 <_fflush_r+0x3a>
 8005c2c:	0599      	lsls	r1, r3, #22
 8005c2e:	d402      	bmi.n	8005c36 <_fflush_r+0x3a>
 8005c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c32:	f000 f915 	bl	8005e60 <__retarget_lock_acquire_recursive>
 8005c36:	4628      	mov	r0, r5
 8005c38:	4621      	mov	r1, r4
 8005c3a:	f7ff ff59 	bl	8005af0 <__sflush_r>
 8005c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c40:	07da      	lsls	r2, r3, #31
 8005c42:	4605      	mov	r5, r0
 8005c44:	d4e0      	bmi.n	8005c08 <_fflush_r+0xc>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	d4dd      	bmi.n	8005c08 <_fflush_r+0xc>
 8005c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4e:	f000 f908 	bl	8005e62 <__retarget_lock_release_recursive>
 8005c52:	e7d9      	b.n	8005c08 <_fflush_r+0xc>
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <_fflush_r+0x70>)
 8005c56:	429c      	cmp	r4, r3
 8005c58:	d101      	bne.n	8005c5e <_fflush_r+0x62>
 8005c5a:	68ac      	ldr	r4, [r5, #8]
 8005c5c:	e7df      	b.n	8005c1e <_fflush_r+0x22>
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <_fflush_r+0x74>)
 8005c60:	429c      	cmp	r4, r3
 8005c62:	bf08      	it	eq
 8005c64:	68ec      	ldreq	r4, [r5, #12]
 8005c66:	e7da      	b.n	8005c1e <_fflush_r+0x22>
 8005c68:	08006ca0 	.word	0x08006ca0
 8005c6c:	08006cc0 	.word	0x08006cc0
 8005c70:	08006c80 	.word	0x08006c80

08005c74 <std>:
 8005c74:	2300      	movs	r3, #0
 8005c76:	b510      	push	{r4, lr}
 8005c78:	4604      	mov	r4, r0
 8005c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c82:	6083      	str	r3, [r0, #8]
 8005c84:	8181      	strh	r1, [r0, #12]
 8005c86:	6643      	str	r3, [r0, #100]	; 0x64
 8005c88:	81c2      	strh	r2, [r0, #14]
 8005c8a:	6183      	str	r3, [r0, #24]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	2208      	movs	r2, #8
 8005c90:	305c      	adds	r0, #92	; 0x5c
 8005c92:	f7ff fdb7 	bl	8005804 <memset>
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <std+0x38>)
 8005c98:	6263      	str	r3, [r4, #36]	; 0x24
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <std+0x3c>)
 8005c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <std+0x40>)
 8005ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <std+0x44>)
 8005ca4:	6224      	str	r4, [r4, #32]
 8005ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	bf00      	nop
 8005cac:	080069a5 	.word	0x080069a5
 8005cb0:	080069c7 	.word	0x080069c7
 8005cb4:	080069ff 	.word	0x080069ff
 8005cb8:	08006a23 	.word	0x08006a23

08005cbc <_cleanup_r>:
 8005cbc:	4901      	ldr	r1, [pc, #4]	; (8005cc4 <_cleanup_r+0x8>)
 8005cbe:	f000 b8af 	b.w	8005e20 <_fwalk_reent>
 8005cc2:	bf00      	nop
 8005cc4:	08005bfd 	.word	0x08005bfd

08005cc8 <__sfmoreglue>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	2268      	movs	r2, #104	; 0x68
 8005ccc:	1e4d      	subs	r5, r1, #1
 8005cce:	4355      	muls	r5, r2
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cd6:	f000 f997 	bl	8006008 <_malloc_r>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	b140      	cbz	r0, 8005cf0 <__sfmoreglue+0x28>
 8005cde:	2100      	movs	r1, #0
 8005ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ce4:	300c      	adds	r0, #12
 8005ce6:	60a0      	str	r0, [r4, #8]
 8005ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cec:	f7ff fd8a 	bl	8005804 <memset>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}

08005cf4 <__sfp_lock_acquire>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__sfp_lock_acquire+0x8>)
 8005cf6:	f000 b8b3 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	200001a1 	.word	0x200001a1

08005d00 <__sfp_lock_release>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__sfp_lock_release+0x8>)
 8005d02:	f000 b8ae 	b.w	8005e62 <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	200001a1 	.word	0x200001a1

08005d0c <__sinit_lock_acquire>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__sinit_lock_acquire+0x8>)
 8005d0e:	f000 b8a7 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	200001a2 	.word	0x200001a2

08005d18 <__sinit_lock_release>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__sinit_lock_release+0x8>)
 8005d1a:	f000 b8a2 	b.w	8005e62 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200001a2 	.word	0x200001a2

08005d24 <__sinit>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	4604      	mov	r4, r0
 8005d28:	f7ff fff0 	bl	8005d0c <__sinit_lock_acquire>
 8005d2c:	69a3      	ldr	r3, [r4, #24]
 8005d2e:	b11b      	cbz	r3, 8005d38 <__sinit+0x14>
 8005d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d34:	f7ff bff0 	b.w	8005d18 <__sinit_lock_release>
 8005d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <__sinit+0x68>)
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <__sinit+0x6c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	bf04      	itt	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	61a3      	streq	r3, [r4, #24]
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 f820 	bl	8005d94 <__sfp>
 8005d54:	6060      	str	r0, [r4, #4]
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 f81c 	bl	8005d94 <__sfp>
 8005d5c:	60a0      	str	r0, [r4, #8]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f818 	bl	8005d94 <__sfp>
 8005d64:	2200      	movs	r2, #0
 8005d66:	60e0      	str	r0, [r4, #12]
 8005d68:	2104      	movs	r1, #4
 8005d6a:	6860      	ldr	r0, [r4, #4]
 8005d6c:	f7ff ff82 	bl	8005c74 <std>
 8005d70:	68a0      	ldr	r0, [r4, #8]
 8005d72:	2201      	movs	r2, #1
 8005d74:	2109      	movs	r1, #9
 8005d76:	f7ff ff7d 	bl	8005c74 <std>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	2112      	movs	r1, #18
 8005d80:	f7ff ff78 	bl	8005c74 <std>
 8005d84:	2301      	movs	r3, #1
 8005d86:	61a3      	str	r3, [r4, #24]
 8005d88:	e7d2      	b.n	8005d30 <__sinit+0xc>
 8005d8a:	bf00      	nop
 8005d8c:	08006c7c 	.word	0x08006c7c
 8005d90:	08005cbd 	.word	0x08005cbd

08005d94 <__sfp>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	4607      	mov	r7, r0
 8005d98:	f7ff ffac 	bl	8005cf4 <__sfp_lock_acquire>
 8005d9c:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <__sfp+0x84>)
 8005d9e:	681e      	ldr	r6, [r3, #0]
 8005da0:	69b3      	ldr	r3, [r6, #24]
 8005da2:	b913      	cbnz	r3, 8005daa <__sfp+0x16>
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff ffbd 	bl	8005d24 <__sinit>
 8005daa:	3648      	adds	r6, #72	; 0x48
 8005dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	d503      	bpl.n	8005dbc <__sfp+0x28>
 8005db4:	6833      	ldr	r3, [r6, #0]
 8005db6:	b30b      	cbz	r3, 8005dfc <__sfp+0x68>
 8005db8:	6836      	ldr	r6, [r6, #0]
 8005dba:	e7f7      	b.n	8005dac <__sfp+0x18>
 8005dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dc0:	b9d5      	cbnz	r5, 8005df8 <__sfp+0x64>
 8005dc2:	4b16      	ldr	r3, [pc, #88]	; (8005e1c <__sfp+0x88>)
 8005dc4:	60e3      	str	r3, [r4, #12]
 8005dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dca:	6665      	str	r5, [r4, #100]	; 0x64
 8005dcc:	f000 f847 	bl	8005e5e <__retarget_lock_init_recursive>
 8005dd0:	f7ff ff96 	bl	8005d00 <__sfp_lock_release>
 8005dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ddc:	6025      	str	r5, [r4, #0]
 8005dde:	61a5      	str	r5, [r4, #24]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4629      	mov	r1, r5
 8005de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005de8:	f7ff fd0c 	bl	8005804 <memset>
 8005dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005df4:	4620      	mov	r0, r4
 8005df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df8:	3468      	adds	r4, #104	; 0x68
 8005dfa:	e7d9      	b.n	8005db0 <__sfp+0x1c>
 8005dfc:	2104      	movs	r1, #4
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f7ff ff62 	bl	8005cc8 <__sfmoreglue>
 8005e04:	4604      	mov	r4, r0
 8005e06:	6030      	str	r0, [r6, #0]
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d1d5      	bne.n	8005db8 <__sfp+0x24>
 8005e0c:	f7ff ff78 	bl	8005d00 <__sfp_lock_release>
 8005e10:	230c      	movs	r3, #12
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	e7ee      	b.n	8005df4 <__sfp+0x60>
 8005e16:	bf00      	nop
 8005e18:	08006c7c 	.word	0x08006c7c
 8005e1c:	ffff0001 	.word	0xffff0001

08005e20 <_fwalk_reent>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	4688      	mov	r8, r1
 8005e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e2c:	2700      	movs	r7, #0
 8005e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e32:	f1b9 0901 	subs.w	r9, r9, #1
 8005e36:	d505      	bpl.n	8005e44 <_fwalk_reent+0x24>
 8005e38:	6824      	ldr	r4, [r4, #0]
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d1f7      	bne.n	8005e2e <_fwalk_reent+0xe>
 8005e3e:	4638      	mov	r0, r7
 8005e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e44:	89ab      	ldrh	r3, [r5, #12]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d907      	bls.n	8005e5a <_fwalk_reent+0x3a>
 8005e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	d003      	beq.n	8005e5a <_fwalk_reent+0x3a>
 8005e52:	4629      	mov	r1, r5
 8005e54:	4630      	mov	r0, r6
 8005e56:	47c0      	blx	r8
 8005e58:	4307      	orrs	r7, r0
 8005e5a:	3568      	adds	r5, #104	; 0x68
 8005e5c:	e7e9      	b.n	8005e32 <_fwalk_reent+0x12>

08005e5e <__retarget_lock_init_recursive>:
 8005e5e:	4770      	bx	lr

08005e60 <__retarget_lock_acquire_recursive>:
 8005e60:	4770      	bx	lr

08005e62 <__retarget_lock_release_recursive>:
 8005e62:	4770      	bx	lr

08005e64 <__swhatbuf_r>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	460e      	mov	r6, r1
 8005e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	b096      	sub	sp, #88	; 0x58
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	da08      	bge.n	8005e88 <__swhatbuf_r+0x24>
 8005e76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	061a      	lsls	r2, r3, #24
 8005e80:	d410      	bmi.n	8005ea4 <__swhatbuf_r+0x40>
 8005e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e86:	e00e      	b.n	8005ea6 <__swhatbuf_r+0x42>
 8005e88:	466a      	mov	r2, sp
 8005e8a:	f000 fdf1 	bl	8006a70 <_fstat_r>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	dbf1      	blt.n	8005e76 <__swhatbuf_r+0x12>
 8005e92:	9a01      	ldr	r2, [sp, #4]
 8005e94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e9c:	425a      	negs	r2, r3
 8005e9e:	415a      	adcs	r2, r3
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	e7ee      	b.n	8005e82 <__swhatbuf_r+0x1e>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	b016      	add	sp, #88	; 0x58
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005eb0 <__smakebuf_r>:
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005eb4:	079d      	lsls	r5, r3, #30
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	d507      	bpl.n	8005ecc <__smakebuf_r+0x1c>
 8005ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	6123      	str	r3, [r4, #16]
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	6163      	str	r3, [r4, #20]
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	ab01      	add	r3, sp, #4
 8005ece:	466a      	mov	r2, sp
 8005ed0:	f7ff ffc8 	bl	8005e64 <__swhatbuf_r>
 8005ed4:	9900      	ldr	r1, [sp, #0]
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f000 f895 	bl	8006008 <_malloc_r>
 8005ede:	b948      	cbnz	r0, 8005ef4 <__smakebuf_r+0x44>
 8005ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee4:	059a      	lsls	r2, r3, #22
 8005ee6:	d4ef      	bmi.n	8005ec8 <__smakebuf_r+0x18>
 8005ee8:	f023 0303 	bic.w	r3, r3, #3
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	e7e3      	b.n	8005ebc <__smakebuf_r+0xc>
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <__smakebuf_r+0x7c>)
 8005ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	6020      	str	r0, [r4, #0]
 8005efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	9b00      	ldr	r3, [sp, #0]
 8005f04:	6163      	str	r3, [r4, #20]
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	6120      	str	r0, [r4, #16]
 8005f0a:	b15b      	cbz	r3, 8005f24 <__smakebuf_r+0x74>
 8005f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 fdbf 	bl	8006a94 <_isatty_r>
 8005f16:	b128      	cbz	r0, 8005f24 <__smakebuf_r+0x74>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	89a0      	ldrh	r0, [r4, #12]
 8005f26:	4305      	orrs	r5, r0
 8005f28:	81a5      	strh	r5, [r4, #12]
 8005f2a:	e7cd      	b.n	8005ec8 <__smakebuf_r+0x18>
 8005f2c:	08005cbd 	.word	0x08005cbd

08005f30 <_free_r>:
 8005f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d044      	beq.n	8005fc0 <_free_r+0x90>
 8005f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f3a:	9001      	str	r0, [sp, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f42:	bfb8      	it	lt
 8005f44:	18e4      	addlt	r4, r4, r3
 8005f46:	f000 fdef 	bl	8006b28 <__malloc_lock>
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <_free_r+0x94>)
 8005f4c:	9801      	ldr	r0, [sp, #4]
 8005f4e:	6813      	ldr	r3, [r2, #0]
 8005f50:	b933      	cbnz	r3, 8005f60 <_free_r+0x30>
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	6014      	str	r4, [r2, #0]
 8005f56:	b003      	add	sp, #12
 8005f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f5c:	f000 bdea 	b.w	8006b34 <__malloc_unlock>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d908      	bls.n	8005f76 <_free_r+0x46>
 8005f64:	6825      	ldr	r5, [r4, #0]
 8005f66:	1961      	adds	r1, r4, r5
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf01      	itttt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	1949      	addeq	r1, r1, r5
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	e7ed      	b.n	8005f52 <_free_r+0x22>
 8005f76:	461a      	mov	r2, r3
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b10b      	cbz	r3, 8005f80 <_free_r+0x50>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d9fa      	bls.n	8005f76 <_free_r+0x46>
 8005f80:	6811      	ldr	r1, [r2, #0]
 8005f82:	1855      	adds	r5, r2, r1
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	d10b      	bne.n	8005fa0 <_free_r+0x70>
 8005f88:	6824      	ldr	r4, [r4, #0]
 8005f8a:	4421      	add	r1, r4
 8005f8c:	1854      	adds	r4, r2, r1
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	d1e0      	bne.n	8005f56 <_free_r+0x26>
 8005f94:	681c      	ldr	r4, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	e7da      	b.n	8005f56 <_free_r+0x26>
 8005fa0:	d902      	bls.n	8005fa8 <_free_r+0x78>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	6003      	str	r3, [r0, #0]
 8005fa6:	e7d6      	b.n	8005f56 <_free_r+0x26>
 8005fa8:	6825      	ldr	r5, [r4, #0]
 8005faa:	1961      	adds	r1, r4, r5
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf04      	itt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	bf04      	itt	eq
 8005fb8:	1949      	addeq	r1, r1, r5
 8005fba:	6021      	streq	r1, [r4, #0]
 8005fbc:	6054      	str	r4, [r2, #4]
 8005fbe:	e7ca      	b.n	8005f56 <_free_r+0x26>
 8005fc0:	b003      	add	sp, #12
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	200001a4 	.word	0x200001a4

08005fc8 <sbrk_aligned>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0e      	ldr	r6, [pc, #56]	; (8006004 <sbrk_aligned+0x3c>)
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b911      	cbnz	r1, 8005fda <sbrk_aligned+0x12>
 8005fd4:	f000 fcd6 	bl	8006984 <_sbrk_r>
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fcd1 	bl	8006984 <_sbrk_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d00a      	beq.n	8005ffc <sbrk_aligned+0x34>
 8005fe6:	1cc4      	adds	r4, r0, #3
 8005fe8:	f024 0403 	bic.w	r4, r4, #3
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d007      	beq.n	8006000 <sbrk_aligned+0x38>
 8005ff0:	1a21      	subs	r1, r4, r0
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 fcc6 	bl	8006984 <_sbrk_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d101      	bne.n	8006000 <sbrk_aligned+0x38>
 8005ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8006000:	4620      	mov	r0, r4
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	200001a8 	.word	0x200001a8

08006008 <_malloc_r>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	1ccd      	adds	r5, r1, #3
 800600e:	f025 0503 	bic.w	r5, r5, #3
 8006012:	3508      	adds	r5, #8
 8006014:	2d0c      	cmp	r5, #12
 8006016:	bf38      	it	cc
 8006018:	250c      	movcc	r5, #12
 800601a:	2d00      	cmp	r5, #0
 800601c:	4607      	mov	r7, r0
 800601e:	db01      	blt.n	8006024 <_malloc_r+0x1c>
 8006020:	42a9      	cmp	r1, r5
 8006022:	d905      	bls.n	8006030 <_malloc_r+0x28>
 8006024:	230c      	movs	r3, #12
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	2600      	movs	r6, #0
 800602a:	4630      	mov	r0, r6
 800602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006030:	4e2e      	ldr	r6, [pc, #184]	; (80060ec <_malloc_r+0xe4>)
 8006032:	f000 fd79 	bl	8006b28 <__malloc_lock>
 8006036:	6833      	ldr	r3, [r6, #0]
 8006038:	461c      	mov	r4, r3
 800603a:	bb34      	cbnz	r4, 800608a <_malloc_r+0x82>
 800603c:	4629      	mov	r1, r5
 800603e:	4638      	mov	r0, r7
 8006040:	f7ff ffc2 	bl	8005fc8 <sbrk_aligned>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	4604      	mov	r4, r0
 8006048:	d14d      	bne.n	80060e6 <_malloc_r+0xde>
 800604a:	6834      	ldr	r4, [r6, #0]
 800604c:	4626      	mov	r6, r4
 800604e:	2e00      	cmp	r6, #0
 8006050:	d140      	bne.n	80060d4 <_malloc_r+0xcc>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	4631      	mov	r1, r6
 8006056:	4638      	mov	r0, r7
 8006058:	eb04 0803 	add.w	r8, r4, r3
 800605c:	f000 fc92 	bl	8006984 <_sbrk_r>
 8006060:	4580      	cmp	r8, r0
 8006062:	d13a      	bne.n	80060da <_malloc_r+0xd2>
 8006064:	6821      	ldr	r1, [r4, #0]
 8006066:	3503      	adds	r5, #3
 8006068:	1a6d      	subs	r5, r5, r1
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	4629      	mov	r1, r5
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff ffa5 	bl	8005fc8 <sbrk_aligned>
 800607e:	3001      	adds	r0, #1
 8006080:	d02b      	beq.n	80060da <_malloc_r+0xd2>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	442b      	add	r3, r5
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	e00e      	b.n	80060a8 <_malloc_r+0xa0>
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	1b52      	subs	r2, r2, r5
 800608e:	d41e      	bmi.n	80060ce <_malloc_r+0xc6>
 8006090:	2a0b      	cmp	r2, #11
 8006092:	d916      	bls.n	80060c2 <_malloc_r+0xba>
 8006094:	1961      	adds	r1, r4, r5
 8006096:	42a3      	cmp	r3, r4
 8006098:	6025      	str	r5, [r4, #0]
 800609a:	bf18      	it	ne
 800609c:	6059      	strne	r1, [r3, #4]
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	bf08      	it	eq
 80060a2:	6031      	streq	r1, [r6, #0]
 80060a4:	5162      	str	r2, [r4, r5]
 80060a6:	604b      	str	r3, [r1, #4]
 80060a8:	4638      	mov	r0, r7
 80060aa:	f104 060b 	add.w	r6, r4, #11
 80060ae:	f000 fd41 	bl	8006b34 <__malloc_unlock>
 80060b2:	f026 0607 	bic.w	r6, r6, #7
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	1af2      	subs	r2, r6, r3
 80060ba:	d0b6      	beq.n	800602a <_malloc_r+0x22>
 80060bc:	1b9b      	subs	r3, r3, r6
 80060be:	50a3      	str	r3, [r4, r2]
 80060c0:	e7b3      	b.n	800602a <_malloc_r+0x22>
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	bf0c      	ite	eq
 80060c8:	6032      	streq	r2, [r6, #0]
 80060ca:	605a      	strne	r2, [r3, #4]
 80060cc:	e7ec      	b.n	80060a8 <_malloc_r+0xa0>
 80060ce:	4623      	mov	r3, r4
 80060d0:	6864      	ldr	r4, [r4, #4]
 80060d2:	e7b2      	b.n	800603a <_malloc_r+0x32>
 80060d4:	4634      	mov	r4, r6
 80060d6:	6876      	ldr	r6, [r6, #4]
 80060d8:	e7b9      	b.n	800604e <_malloc_r+0x46>
 80060da:	230c      	movs	r3, #12
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	4638      	mov	r0, r7
 80060e0:	f000 fd28 	bl	8006b34 <__malloc_unlock>
 80060e4:	e7a1      	b.n	800602a <_malloc_r+0x22>
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	e7de      	b.n	80060a8 <_malloc_r+0xa0>
 80060ea:	bf00      	nop
 80060ec:	200001a4 	.word	0x200001a4

080060f0 <__ssputs_r>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	688e      	ldr	r6, [r1, #8]
 80060f6:	429e      	cmp	r6, r3
 80060f8:	4682      	mov	sl, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	4690      	mov	r8, r2
 80060fe:	461f      	mov	r7, r3
 8006100:	d838      	bhi.n	8006174 <__ssputs_r+0x84>
 8006102:	898a      	ldrh	r2, [r1, #12]
 8006104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006108:	d032      	beq.n	8006170 <__ssputs_r+0x80>
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	6909      	ldr	r1, [r1, #16]
 800610e:	eba5 0901 	sub.w	r9, r5, r1
 8006112:	6965      	ldr	r5, [r4, #20]
 8006114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800611c:	3301      	adds	r3, #1
 800611e:	444b      	add	r3, r9
 8006120:	106d      	asrs	r5, r5, #1
 8006122:	429d      	cmp	r5, r3
 8006124:	bf38      	it	cc
 8006126:	461d      	movcc	r5, r3
 8006128:	0553      	lsls	r3, r2, #21
 800612a:	d531      	bpl.n	8006190 <__ssputs_r+0xa0>
 800612c:	4629      	mov	r1, r5
 800612e:	f7ff ff6b 	bl	8006008 <_malloc_r>
 8006132:	4606      	mov	r6, r0
 8006134:	b950      	cbnz	r0, 800614c <__ssputs_r+0x5c>
 8006136:	230c      	movs	r3, #12
 8006138:	f8ca 3000 	str.w	r3, [sl]
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006142:	81a3      	strh	r3, [r4, #12]
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614c:	6921      	ldr	r1, [r4, #16]
 800614e:	464a      	mov	r2, r9
 8006150:	f000 fcc2 	bl	8006ad8 <memcpy>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	6126      	str	r6, [r4, #16]
 8006162:	6165      	str	r5, [r4, #20]
 8006164:	444e      	add	r6, r9
 8006166:	eba5 0509 	sub.w	r5, r5, r9
 800616a:	6026      	str	r6, [r4, #0]
 800616c:	60a5      	str	r5, [r4, #8]
 800616e:	463e      	mov	r6, r7
 8006170:	42be      	cmp	r6, r7
 8006172:	d900      	bls.n	8006176 <__ssputs_r+0x86>
 8006174:	463e      	mov	r6, r7
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	4632      	mov	r2, r6
 800617a:	4641      	mov	r1, r8
 800617c:	f000 fcba 	bl	8006af4 <memmove>
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	1b9b      	subs	r3, r3, r6
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4433      	add	r3, r6
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	2000      	movs	r0, #0
 800618e:	e7db      	b.n	8006148 <__ssputs_r+0x58>
 8006190:	462a      	mov	r2, r5
 8006192:	f000 fcd5 	bl	8006b40 <_realloc_r>
 8006196:	4606      	mov	r6, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d1e1      	bne.n	8006160 <__ssputs_r+0x70>
 800619c:	6921      	ldr	r1, [r4, #16]
 800619e:	4650      	mov	r0, sl
 80061a0:	f7ff fec6 	bl	8005f30 <_free_r>
 80061a4:	e7c7      	b.n	8006136 <__ssputs_r+0x46>
	...

080061a8 <_svfiprintf_r>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	4698      	mov	r8, r3
 80061ae:	898b      	ldrh	r3, [r1, #12]
 80061b0:	061b      	lsls	r3, r3, #24
 80061b2:	b09d      	sub	sp, #116	; 0x74
 80061b4:	4607      	mov	r7, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	d50e      	bpl.n	80061da <_svfiprintf_r+0x32>
 80061bc:	690b      	ldr	r3, [r1, #16]
 80061be:	b963      	cbnz	r3, 80061da <_svfiprintf_r+0x32>
 80061c0:	2140      	movs	r1, #64	; 0x40
 80061c2:	f7ff ff21 	bl	8006008 <_malloc_r>
 80061c6:	6028      	str	r0, [r5, #0]
 80061c8:	6128      	str	r0, [r5, #16]
 80061ca:	b920      	cbnz	r0, 80061d6 <_svfiprintf_r+0x2e>
 80061cc:	230c      	movs	r3, #12
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e0d1      	b.n	800637a <_svfiprintf_r+0x1d2>
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	616b      	str	r3, [r5, #20]
 80061da:	2300      	movs	r3, #0
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	2320      	movs	r3, #32
 80061e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e8:	2330      	movs	r3, #48	; 0x30
 80061ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006394 <_svfiprintf_r+0x1ec>
 80061ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f2:	f04f 0901 	mov.w	r9, #1
 80061f6:	4623      	mov	r3, r4
 80061f8:	469a      	mov	sl, r3
 80061fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fe:	b10a      	cbz	r2, 8006204 <_svfiprintf_r+0x5c>
 8006200:	2a25      	cmp	r2, #37	; 0x25
 8006202:	d1f9      	bne.n	80061f8 <_svfiprintf_r+0x50>
 8006204:	ebba 0b04 	subs.w	fp, sl, r4
 8006208:	d00b      	beq.n	8006222 <_svfiprintf_r+0x7a>
 800620a:	465b      	mov	r3, fp
 800620c:	4622      	mov	r2, r4
 800620e:	4629      	mov	r1, r5
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff ff6d 	bl	80060f0 <__ssputs_r>
 8006216:	3001      	adds	r0, #1
 8006218:	f000 80aa 	beq.w	8006370 <_svfiprintf_r+0x1c8>
 800621c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621e:	445a      	add	r2, fp
 8006220:	9209      	str	r2, [sp, #36]	; 0x24
 8006222:	f89a 3000 	ldrb.w	r3, [sl]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80a2 	beq.w	8006370 <_svfiprintf_r+0x1c8>
 800622c:	2300      	movs	r3, #0
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006236:	f10a 0a01 	add.w	sl, sl, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	9307      	str	r3, [sp, #28]
 800623e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006242:	931a      	str	r3, [sp, #104]	; 0x68
 8006244:	4654      	mov	r4, sl
 8006246:	2205      	movs	r2, #5
 8006248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624c:	4851      	ldr	r0, [pc, #324]	; (8006394 <_svfiprintf_r+0x1ec>)
 800624e:	f7f9 ffc7 	bl	80001e0 <memchr>
 8006252:	9a04      	ldr	r2, [sp, #16]
 8006254:	b9d8      	cbnz	r0, 800628e <_svfiprintf_r+0xe6>
 8006256:	06d0      	lsls	r0, r2, #27
 8006258:	bf44      	itt	mi
 800625a:	2320      	movmi	r3, #32
 800625c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006260:	0711      	lsls	r1, r2, #28
 8006262:	bf44      	itt	mi
 8006264:	232b      	movmi	r3, #43	; 0x2b
 8006266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800626a:	f89a 3000 	ldrb.w	r3, [sl]
 800626e:	2b2a      	cmp	r3, #42	; 0x2a
 8006270:	d015      	beq.n	800629e <_svfiprintf_r+0xf6>
 8006272:	9a07      	ldr	r2, [sp, #28]
 8006274:	4654      	mov	r4, sl
 8006276:	2000      	movs	r0, #0
 8006278:	f04f 0c0a 	mov.w	ip, #10
 800627c:	4621      	mov	r1, r4
 800627e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006282:	3b30      	subs	r3, #48	; 0x30
 8006284:	2b09      	cmp	r3, #9
 8006286:	d94e      	bls.n	8006326 <_svfiprintf_r+0x17e>
 8006288:	b1b0      	cbz	r0, 80062b8 <_svfiprintf_r+0x110>
 800628a:	9207      	str	r2, [sp, #28]
 800628c:	e014      	b.n	80062b8 <_svfiprintf_r+0x110>
 800628e:	eba0 0308 	sub.w	r3, r0, r8
 8006292:	fa09 f303 	lsl.w	r3, r9, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	46a2      	mov	sl, r4
 800629c:	e7d2      	b.n	8006244 <_svfiprintf_r+0x9c>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	1d19      	adds	r1, r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	9103      	str	r1, [sp, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfbb      	ittet	lt
 80062aa:	425b      	neglt	r3, r3
 80062ac:	f042 0202 	orrlt.w	r2, r2, #2
 80062b0:	9307      	strge	r3, [sp, #28]
 80062b2:	9307      	strlt	r3, [sp, #28]
 80062b4:	bfb8      	it	lt
 80062b6:	9204      	strlt	r2, [sp, #16]
 80062b8:	7823      	ldrb	r3, [r4, #0]
 80062ba:	2b2e      	cmp	r3, #46	; 0x2e
 80062bc:	d10c      	bne.n	80062d8 <_svfiprintf_r+0x130>
 80062be:	7863      	ldrb	r3, [r4, #1]
 80062c0:	2b2a      	cmp	r3, #42	; 0x2a
 80062c2:	d135      	bne.n	8006330 <_svfiprintf_r+0x188>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	9203      	str	r2, [sp, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bfb8      	it	lt
 80062d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d4:	3402      	adds	r4, #2
 80062d6:	9305      	str	r3, [sp, #20]
 80062d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063a4 <_svfiprintf_r+0x1fc>
 80062dc:	7821      	ldrb	r1, [r4, #0]
 80062de:	2203      	movs	r2, #3
 80062e0:	4650      	mov	r0, sl
 80062e2:	f7f9 ff7d 	bl	80001e0 <memchr>
 80062e6:	b140      	cbz	r0, 80062fa <_svfiprintf_r+0x152>
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	eba0 000a 	sub.w	r0, r0, sl
 80062ee:	fa03 f000 	lsl.w	r0, r3, r0
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	4303      	orrs	r3, r0
 80062f6:	3401      	adds	r4, #1
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fe:	4826      	ldr	r0, [pc, #152]	; (8006398 <_svfiprintf_r+0x1f0>)
 8006300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006304:	2206      	movs	r2, #6
 8006306:	f7f9 ff6b 	bl	80001e0 <memchr>
 800630a:	2800      	cmp	r0, #0
 800630c:	d038      	beq.n	8006380 <_svfiprintf_r+0x1d8>
 800630e:	4b23      	ldr	r3, [pc, #140]	; (800639c <_svfiprintf_r+0x1f4>)
 8006310:	bb1b      	cbnz	r3, 800635a <_svfiprintf_r+0x1b2>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	3307      	adds	r3, #7
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	3308      	adds	r3, #8
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006320:	4433      	add	r3, r6
 8006322:	9309      	str	r3, [sp, #36]	; 0x24
 8006324:	e767      	b.n	80061f6 <_svfiprintf_r+0x4e>
 8006326:	fb0c 3202 	mla	r2, ip, r2, r3
 800632a:	460c      	mov	r4, r1
 800632c:	2001      	movs	r0, #1
 800632e:	e7a5      	b.n	800627c <_svfiprintf_r+0xd4>
 8006330:	2300      	movs	r3, #0
 8006332:	3401      	adds	r4, #1
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	4619      	mov	r1, r3
 8006338:	f04f 0c0a 	mov.w	ip, #10
 800633c:	4620      	mov	r0, r4
 800633e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006342:	3a30      	subs	r2, #48	; 0x30
 8006344:	2a09      	cmp	r2, #9
 8006346:	d903      	bls.n	8006350 <_svfiprintf_r+0x1a8>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0c5      	beq.n	80062d8 <_svfiprintf_r+0x130>
 800634c:	9105      	str	r1, [sp, #20]
 800634e:	e7c3      	b.n	80062d8 <_svfiprintf_r+0x130>
 8006350:	fb0c 2101 	mla	r1, ip, r1, r2
 8006354:	4604      	mov	r4, r0
 8006356:	2301      	movs	r3, #1
 8006358:	e7f0      	b.n	800633c <_svfiprintf_r+0x194>
 800635a:	ab03      	add	r3, sp, #12
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	462a      	mov	r2, r5
 8006360:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <_svfiprintf_r+0x1f8>)
 8006362:	a904      	add	r1, sp, #16
 8006364:	4638      	mov	r0, r7
 8006366:	f3af 8000 	nop.w
 800636a:	1c42      	adds	r2, r0, #1
 800636c:	4606      	mov	r6, r0
 800636e:	d1d6      	bne.n	800631e <_svfiprintf_r+0x176>
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	065b      	lsls	r3, r3, #25
 8006374:	f53f af2c 	bmi.w	80061d0 <_svfiprintf_r+0x28>
 8006378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637a:	b01d      	add	sp, #116	; 0x74
 800637c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	462a      	mov	r2, r5
 8006386:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <_svfiprintf_r+0x1f8>)
 8006388:	a904      	add	r1, sp, #16
 800638a:	4638      	mov	r0, r7
 800638c:	f000 f9d4 	bl	8006738 <_printf_i>
 8006390:	e7eb      	b.n	800636a <_svfiprintf_r+0x1c2>
 8006392:	bf00      	nop
 8006394:	08006ce0 	.word	0x08006ce0
 8006398:	08006cea 	.word	0x08006cea
 800639c:	00000000 	.word	0x00000000
 80063a0:	080060f1 	.word	0x080060f1
 80063a4:	08006ce6 	.word	0x08006ce6

080063a8 <__sfputc_r>:
 80063a8:	6893      	ldr	r3, [r2, #8]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	b410      	push	{r4}
 80063b0:	6093      	str	r3, [r2, #8]
 80063b2:	da08      	bge.n	80063c6 <__sfputc_r+0x1e>
 80063b4:	6994      	ldr	r4, [r2, #24]
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	db01      	blt.n	80063be <__sfputc_r+0x16>
 80063ba:	290a      	cmp	r1, #10
 80063bc:	d103      	bne.n	80063c6 <__sfputc_r+0x1e>
 80063be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c2:	f7ff bad5 	b.w	8005970 <__swbuf_r>
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	1c58      	adds	r0, r3, #1
 80063ca:	6010      	str	r0, [r2, #0]
 80063cc:	7019      	strb	r1, [r3, #0]
 80063ce:	4608      	mov	r0, r1
 80063d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <__sfputs_r>:
 80063d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	4614      	mov	r4, r2
 80063de:	18d5      	adds	r5, r2, r3
 80063e0:	42ac      	cmp	r4, r5
 80063e2:	d101      	bne.n	80063e8 <__sfputs_r+0x12>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e007      	b.n	80063f8 <__sfputs_r+0x22>
 80063e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ec:	463a      	mov	r2, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff ffda 	bl	80063a8 <__sfputc_r>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d1f3      	bne.n	80063e0 <__sfputs_r+0xa>
 80063f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063fc <_vfiprintf_r>:
 80063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	460d      	mov	r5, r1
 8006402:	b09d      	sub	sp, #116	; 0x74
 8006404:	4614      	mov	r4, r2
 8006406:	4698      	mov	r8, r3
 8006408:	4606      	mov	r6, r0
 800640a:	b118      	cbz	r0, 8006414 <_vfiprintf_r+0x18>
 800640c:	6983      	ldr	r3, [r0, #24]
 800640e:	b90b      	cbnz	r3, 8006414 <_vfiprintf_r+0x18>
 8006410:	f7ff fc88 	bl	8005d24 <__sinit>
 8006414:	4b89      	ldr	r3, [pc, #548]	; (800663c <_vfiprintf_r+0x240>)
 8006416:	429d      	cmp	r5, r3
 8006418:	d11b      	bne.n	8006452 <_vfiprintf_r+0x56>
 800641a:	6875      	ldr	r5, [r6, #4]
 800641c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800641e:	07d9      	lsls	r1, r3, #31
 8006420:	d405      	bmi.n	800642e <_vfiprintf_r+0x32>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d402      	bmi.n	800642e <_vfiprintf_r+0x32>
 8006428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800642a:	f7ff fd19 	bl	8005e60 <__retarget_lock_acquire_recursive>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	071b      	lsls	r3, r3, #28
 8006432:	d501      	bpl.n	8006438 <_vfiprintf_r+0x3c>
 8006434:	692b      	ldr	r3, [r5, #16]
 8006436:	b9eb      	cbnz	r3, 8006474 <_vfiprintf_r+0x78>
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff faea 	bl	8005a14 <__swsetup_r>
 8006440:	b1c0      	cbz	r0, 8006474 <_vfiprintf_r+0x78>
 8006442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006444:	07dc      	lsls	r4, r3, #31
 8006446:	d50e      	bpl.n	8006466 <_vfiprintf_r+0x6a>
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	b01d      	add	sp, #116	; 0x74
 800644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006452:	4b7b      	ldr	r3, [pc, #492]	; (8006640 <_vfiprintf_r+0x244>)
 8006454:	429d      	cmp	r5, r3
 8006456:	d101      	bne.n	800645c <_vfiprintf_r+0x60>
 8006458:	68b5      	ldr	r5, [r6, #8]
 800645a:	e7df      	b.n	800641c <_vfiprintf_r+0x20>
 800645c:	4b79      	ldr	r3, [pc, #484]	; (8006644 <_vfiprintf_r+0x248>)
 800645e:	429d      	cmp	r5, r3
 8006460:	bf08      	it	eq
 8006462:	68f5      	ldreq	r5, [r6, #12]
 8006464:	e7da      	b.n	800641c <_vfiprintf_r+0x20>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	0598      	lsls	r0, r3, #22
 800646a:	d4ed      	bmi.n	8006448 <_vfiprintf_r+0x4c>
 800646c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800646e:	f7ff fcf8 	bl	8005e62 <__retarget_lock_release_recursive>
 8006472:	e7e9      	b.n	8006448 <_vfiprintf_r+0x4c>
 8006474:	2300      	movs	r3, #0
 8006476:	9309      	str	r3, [sp, #36]	; 0x24
 8006478:	2320      	movs	r3, #32
 800647a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800647e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006482:	2330      	movs	r3, #48	; 0x30
 8006484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006648 <_vfiprintf_r+0x24c>
 8006488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800648c:	f04f 0901 	mov.w	r9, #1
 8006490:	4623      	mov	r3, r4
 8006492:	469a      	mov	sl, r3
 8006494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006498:	b10a      	cbz	r2, 800649e <_vfiprintf_r+0xa2>
 800649a:	2a25      	cmp	r2, #37	; 0x25
 800649c:	d1f9      	bne.n	8006492 <_vfiprintf_r+0x96>
 800649e:	ebba 0b04 	subs.w	fp, sl, r4
 80064a2:	d00b      	beq.n	80064bc <_vfiprintf_r+0xc0>
 80064a4:	465b      	mov	r3, fp
 80064a6:	4622      	mov	r2, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7ff ff93 	bl	80063d6 <__sfputs_r>
 80064b0:	3001      	adds	r0, #1
 80064b2:	f000 80aa 	beq.w	800660a <_vfiprintf_r+0x20e>
 80064b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b8:	445a      	add	r2, fp
 80064ba:	9209      	str	r2, [sp, #36]	; 0x24
 80064bc:	f89a 3000 	ldrb.w	r3, [sl]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80a2 	beq.w	800660a <_vfiprintf_r+0x20e>
 80064c6:	2300      	movs	r3, #0
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d0:	f10a 0a01 	add.w	sl, sl, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064dc:	931a      	str	r3, [sp, #104]	; 0x68
 80064de:	4654      	mov	r4, sl
 80064e0:	2205      	movs	r2, #5
 80064e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e6:	4858      	ldr	r0, [pc, #352]	; (8006648 <_vfiprintf_r+0x24c>)
 80064e8:	f7f9 fe7a 	bl	80001e0 <memchr>
 80064ec:	9a04      	ldr	r2, [sp, #16]
 80064ee:	b9d8      	cbnz	r0, 8006528 <_vfiprintf_r+0x12c>
 80064f0:	06d1      	lsls	r1, r2, #27
 80064f2:	bf44      	itt	mi
 80064f4:	2320      	movmi	r3, #32
 80064f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064fa:	0713      	lsls	r3, r2, #28
 80064fc:	bf44      	itt	mi
 80064fe:	232b      	movmi	r3, #43	; 0x2b
 8006500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b2a      	cmp	r3, #42	; 0x2a
 800650a:	d015      	beq.n	8006538 <_vfiprintf_r+0x13c>
 800650c:	9a07      	ldr	r2, [sp, #28]
 800650e:	4654      	mov	r4, sl
 8006510:	2000      	movs	r0, #0
 8006512:	f04f 0c0a 	mov.w	ip, #10
 8006516:	4621      	mov	r1, r4
 8006518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800651c:	3b30      	subs	r3, #48	; 0x30
 800651e:	2b09      	cmp	r3, #9
 8006520:	d94e      	bls.n	80065c0 <_vfiprintf_r+0x1c4>
 8006522:	b1b0      	cbz	r0, 8006552 <_vfiprintf_r+0x156>
 8006524:	9207      	str	r2, [sp, #28]
 8006526:	e014      	b.n	8006552 <_vfiprintf_r+0x156>
 8006528:	eba0 0308 	sub.w	r3, r0, r8
 800652c:	fa09 f303 	lsl.w	r3, r9, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	46a2      	mov	sl, r4
 8006536:	e7d2      	b.n	80064de <_vfiprintf_r+0xe2>
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	1d19      	adds	r1, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	9103      	str	r1, [sp, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfbb      	ittet	lt
 8006544:	425b      	neglt	r3, r3
 8006546:	f042 0202 	orrlt.w	r2, r2, #2
 800654a:	9307      	strge	r3, [sp, #28]
 800654c:	9307      	strlt	r3, [sp, #28]
 800654e:	bfb8      	it	lt
 8006550:	9204      	strlt	r2, [sp, #16]
 8006552:	7823      	ldrb	r3, [r4, #0]
 8006554:	2b2e      	cmp	r3, #46	; 0x2e
 8006556:	d10c      	bne.n	8006572 <_vfiprintf_r+0x176>
 8006558:	7863      	ldrb	r3, [r4, #1]
 800655a:	2b2a      	cmp	r3, #42	; 0x2a
 800655c:	d135      	bne.n	80065ca <_vfiprintf_r+0x1ce>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9203      	str	r2, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	f04f 33ff 	movlt.w	r3, #4294967295
 800656e:	3402      	adds	r4, #2
 8006570:	9305      	str	r3, [sp, #20]
 8006572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006658 <_vfiprintf_r+0x25c>
 8006576:	7821      	ldrb	r1, [r4, #0]
 8006578:	2203      	movs	r2, #3
 800657a:	4650      	mov	r0, sl
 800657c:	f7f9 fe30 	bl	80001e0 <memchr>
 8006580:	b140      	cbz	r0, 8006594 <_vfiprintf_r+0x198>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	eba0 000a 	sub.w	r0, r0, sl
 8006588:	fa03 f000 	lsl.w	r0, r3, r0
 800658c:	9b04      	ldr	r3, [sp, #16]
 800658e:	4303      	orrs	r3, r0
 8006590:	3401      	adds	r4, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	482c      	ldr	r0, [pc, #176]	; (800664c <_vfiprintf_r+0x250>)
 800659a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800659e:	2206      	movs	r2, #6
 80065a0:	f7f9 fe1e 	bl	80001e0 <memchr>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d03f      	beq.n	8006628 <_vfiprintf_r+0x22c>
 80065a8:	4b29      	ldr	r3, [pc, #164]	; (8006650 <_vfiprintf_r+0x254>)
 80065aa:	bb1b      	cbnz	r3, 80065f4 <_vfiprintf_r+0x1f8>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	3307      	adds	r3, #7
 80065b0:	f023 0307 	bic.w	r3, r3, #7
 80065b4:	3308      	adds	r3, #8
 80065b6:	9303      	str	r3, [sp, #12]
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	443b      	add	r3, r7
 80065bc:	9309      	str	r3, [sp, #36]	; 0x24
 80065be:	e767      	b.n	8006490 <_vfiprintf_r+0x94>
 80065c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c4:	460c      	mov	r4, r1
 80065c6:	2001      	movs	r0, #1
 80065c8:	e7a5      	b.n	8006516 <_vfiprintf_r+0x11a>
 80065ca:	2300      	movs	r3, #0
 80065cc:	3401      	adds	r4, #1
 80065ce:	9305      	str	r3, [sp, #20]
 80065d0:	4619      	mov	r1, r3
 80065d2:	f04f 0c0a 	mov.w	ip, #10
 80065d6:	4620      	mov	r0, r4
 80065d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065dc:	3a30      	subs	r2, #48	; 0x30
 80065de:	2a09      	cmp	r2, #9
 80065e0:	d903      	bls.n	80065ea <_vfiprintf_r+0x1ee>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0c5      	beq.n	8006572 <_vfiprintf_r+0x176>
 80065e6:	9105      	str	r1, [sp, #20]
 80065e8:	e7c3      	b.n	8006572 <_vfiprintf_r+0x176>
 80065ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ee:	4604      	mov	r4, r0
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7f0      	b.n	80065d6 <_vfiprintf_r+0x1da>
 80065f4:	ab03      	add	r3, sp, #12
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	462a      	mov	r2, r5
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <_vfiprintf_r+0x258>)
 80065fc:	a904      	add	r1, sp, #16
 80065fe:	4630      	mov	r0, r6
 8006600:	f3af 8000 	nop.w
 8006604:	4607      	mov	r7, r0
 8006606:	1c78      	adds	r0, r7, #1
 8006608:	d1d6      	bne.n	80065b8 <_vfiprintf_r+0x1bc>
 800660a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660c:	07d9      	lsls	r1, r3, #31
 800660e:	d405      	bmi.n	800661c <_vfiprintf_r+0x220>
 8006610:	89ab      	ldrh	r3, [r5, #12]
 8006612:	059a      	lsls	r2, r3, #22
 8006614:	d402      	bmi.n	800661c <_vfiprintf_r+0x220>
 8006616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006618:	f7ff fc23 	bl	8005e62 <__retarget_lock_release_recursive>
 800661c:	89ab      	ldrh	r3, [r5, #12]
 800661e:	065b      	lsls	r3, r3, #25
 8006620:	f53f af12 	bmi.w	8006448 <_vfiprintf_r+0x4c>
 8006624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006626:	e711      	b.n	800644c <_vfiprintf_r+0x50>
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	462a      	mov	r2, r5
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_vfiprintf_r+0x258>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f880 	bl	8006738 <_printf_i>
 8006638:	e7e4      	b.n	8006604 <_vfiprintf_r+0x208>
 800663a:	bf00      	nop
 800663c:	08006ca0 	.word	0x08006ca0
 8006640:	08006cc0 	.word	0x08006cc0
 8006644:	08006c80 	.word	0x08006c80
 8006648:	08006ce0 	.word	0x08006ce0
 800664c:	08006cea 	.word	0x08006cea
 8006650:	00000000 	.word	0x00000000
 8006654:	080063d7 	.word	0x080063d7
 8006658:	08006ce6 	.word	0x08006ce6

0800665c <_printf_common>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	4616      	mov	r6, r2
 8006662:	4699      	mov	r9, r3
 8006664:	688a      	ldr	r2, [r1, #8]
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800666c:	4293      	cmp	r3, r2
 800666e:	bfb8      	it	lt
 8006670:	4613      	movlt	r3, r2
 8006672:	6033      	str	r3, [r6, #0]
 8006674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006678:	4607      	mov	r7, r0
 800667a:	460c      	mov	r4, r1
 800667c:	b10a      	cbz	r2, 8006682 <_printf_common+0x26>
 800667e:	3301      	adds	r3, #1
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	0699      	lsls	r1, r3, #26
 8006686:	bf42      	ittt	mi
 8006688:	6833      	ldrmi	r3, [r6, #0]
 800668a:	3302      	addmi	r3, #2
 800668c:	6033      	strmi	r3, [r6, #0]
 800668e:	6825      	ldr	r5, [r4, #0]
 8006690:	f015 0506 	ands.w	r5, r5, #6
 8006694:	d106      	bne.n	80066a4 <_printf_common+0x48>
 8006696:	f104 0a19 	add.w	sl, r4, #25
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	6832      	ldr	r2, [r6, #0]
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dc26      	bgt.n	80066f2 <_printf_common+0x96>
 80066a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066a8:	1e13      	subs	r3, r2, #0
 80066aa:	6822      	ldr	r2, [r4, #0]
 80066ac:	bf18      	it	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	0692      	lsls	r2, r2, #26
 80066b2:	d42b      	bmi.n	800670c <_printf_common+0xb0>
 80066b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b8:	4649      	mov	r1, r9
 80066ba:	4638      	mov	r0, r7
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d01e      	beq.n	8006700 <_printf_common+0xa4>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	68e5      	ldr	r5, [r4, #12]
 80066c6:	6832      	ldr	r2, [r6, #0]
 80066c8:	f003 0306 	and.w	r3, r3, #6
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	bf08      	it	eq
 80066d0:	1aad      	subeq	r5, r5, r2
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	bf0c      	ite	eq
 80066d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066dc:	2500      	movne	r5, #0
 80066de:	4293      	cmp	r3, r2
 80066e0:	bfc4      	itt	gt
 80066e2:	1a9b      	subgt	r3, r3, r2
 80066e4:	18ed      	addgt	r5, r5, r3
 80066e6:	2600      	movs	r6, #0
 80066e8:	341a      	adds	r4, #26
 80066ea:	42b5      	cmp	r5, r6
 80066ec:	d11a      	bne.n	8006724 <_printf_common+0xc8>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e008      	b.n	8006704 <_printf_common+0xa8>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4649      	mov	r1, r9
 80066f8:	4638      	mov	r0, r7
 80066fa:	47c0      	blx	r8
 80066fc:	3001      	adds	r0, #1
 80066fe:	d103      	bne.n	8006708 <_printf_common+0xac>
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	3501      	adds	r5, #1
 800670a:	e7c6      	b.n	800669a <_printf_common+0x3e>
 800670c:	18e1      	adds	r1, r4, r3
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	2030      	movs	r0, #48	; 0x30
 8006712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006716:	4422      	add	r2, r4
 8006718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800671c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006720:	3302      	adds	r3, #2
 8006722:	e7c7      	b.n	80066b4 <_printf_common+0x58>
 8006724:	2301      	movs	r3, #1
 8006726:	4622      	mov	r2, r4
 8006728:	4649      	mov	r1, r9
 800672a:	4638      	mov	r0, r7
 800672c:	47c0      	blx	r8
 800672e:	3001      	adds	r0, #1
 8006730:	d0e6      	beq.n	8006700 <_printf_common+0xa4>
 8006732:	3601      	adds	r6, #1
 8006734:	e7d9      	b.n	80066ea <_printf_common+0x8e>
	...

08006738 <_printf_i>:
 8006738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	7e0f      	ldrb	r7, [r1, #24]
 800673e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006740:	2f78      	cmp	r7, #120	; 0x78
 8006742:	4691      	mov	r9, r2
 8006744:	4680      	mov	r8, r0
 8006746:	460c      	mov	r4, r1
 8006748:	469a      	mov	sl, r3
 800674a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800674e:	d807      	bhi.n	8006760 <_printf_i+0x28>
 8006750:	2f62      	cmp	r7, #98	; 0x62
 8006752:	d80a      	bhi.n	800676a <_printf_i+0x32>
 8006754:	2f00      	cmp	r7, #0
 8006756:	f000 80d8 	beq.w	800690a <_printf_i+0x1d2>
 800675a:	2f58      	cmp	r7, #88	; 0x58
 800675c:	f000 80a3 	beq.w	80068a6 <_printf_i+0x16e>
 8006760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006768:	e03a      	b.n	80067e0 <_printf_i+0xa8>
 800676a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800676e:	2b15      	cmp	r3, #21
 8006770:	d8f6      	bhi.n	8006760 <_printf_i+0x28>
 8006772:	a101      	add	r1, pc, #4	; (adr r1, 8006778 <_printf_i+0x40>)
 8006774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006778:	080067d1 	.word	0x080067d1
 800677c:	080067e5 	.word	0x080067e5
 8006780:	08006761 	.word	0x08006761
 8006784:	08006761 	.word	0x08006761
 8006788:	08006761 	.word	0x08006761
 800678c:	08006761 	.word	0x08006761
 8006790:	080067e5 	.word	0x080067e5
 8006794:	08006761 	.word	0x08006761
 8006798:	08006761 	.word	0x08006761
 800679c:	08006761 	.word	0x08006761
 80067a0:	08006761 	.word	0x08006761
 80067a4:	080068f1 	.word	0x080068f1
 80067a8:	08006815 	.word	0x08006815
 80067ac:	080068d3 	.word	0x080068d3
 80067b0:	08006761 	.word	0x08006761
 80067b4:	08006761 	.word	0x08006761
 80067b8:	08006913 	.word	0x08006913
 80067bc:	08006761 	.word	0x08006761
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006761 	.word	0x08006761
 80067c8:	08006761 	.word	0x08006761
 80067cc:	080068db 	.word	0x080068db
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	602a      	str	r2, [r5, #0]
 80067d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0a3      	b.n	800692c <_printf_i+0x1f4>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	6829      	ldr	r1, [r5, #0]
 80067e8:	0606      	lsls	r6, r0, #24
 80067ea:	f101 0304 	add.w	r3, r1, #4
 80067ee:	d50a      	bpl.n	8006806 <_printf_i+0xce>
 80067f0:	680e      	ldr	r6, [r1, #0]
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	2e00      	cmp	r6, #0
 80067f6:	da03      	bge.n	8006800 <_printf_i+0xc8>
 80067f8:	232d      	movs	r3, #45	; 0x2d
 80067fa:	4276      	negs	r6, r6
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006800:	485e      	ldr	r0, [pc, #376]	; (800697c <_printf_i+0x244>)
 8006802:	230a      	movs	r3, #10
 8006804:	e019      	b.n	800683a <_printf_i+0x102>
 8006806:	680e      	ldr	r6, [r1, #0]
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800680e:	bf18      	it	ne
 8006810:	b236      	sxthne	r6, r6
 8006812:	e7ef      	b.n	80067f4 <_printf_i+0xbc>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	6029      	str	r1, [r5, #0]
 800681c:	0601      	lsls	r1, r0, #24
 800681e:	d501      	bpl.n	8006824 <_printf_i+0xec>
 8006820:	681e      	ldr	r6, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0xf2>
 8006824:	0646      	lsls	r6, r0, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0xe8>
 8006828:	881e      	ldrh	r6, [r3, #0]
 800682a:	4854      	ldr	r0, [pc, #336]	; (800697c <_printf_i+0x244>)
 800682c:	2f6f      	cmp	r7, #111	; 0x6f
 800682e:	bf0c      	ite	eq
 8006830:	2308      	moveq	r3, #8
 8006832:	230a      	movne	r3, #10
 8006834:	2100      	movs	r1, #0
 8006836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800683a:	6865      	ldr	r5, [r4, #4]
 800683c:	60a5      	str	r5, [r4, #8]
 800683e:	2d00      	cmp	r5, #0
 8006840:	bfa2      	ittt	ge
 8006842:	6821      	ldrge	r1, [r4, #0]
 8006844:	f021 0104 	bicge.w	r1, r1, #4
 8006848:	6021      	strge	r1, [r4, #0]
 800684a:	b90e      	cbnz	r6, 8006850 <_printf_i+0x118>
 800684c:	2d00      	cmp	r5, #0
 800684e:	d04d      	beq.n	80068ec <_printf_i+0x1b4>
 8006850:	4615      	mov	r5, r2
 8006852:	fbb6 f1f3 	udiv	r1, r6, r3
 8006856:	fb03 6711 	mls	r7, r3, r1, r6
 800685a:	5dc7      	ldrb	r7, [r0, r7]
 800685c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006860:	4637      	mov	r7, r6
 8006862:	42bb      	cmp	r3, r7
 8006864:	460e      	mov	r6, r1
 8006866:	d9f4      	bls.n	8006852 <_printf_i+0x11a>
 8006868:	2b08      	cmp	r3, #8
 800686a:	d10b      	bne.n	8006884 <_printf_i+0x14c>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07de      	lsls	r6, r3, #31
 8006870:	d508      	bpl.n	8006884 <_printf_i+0x14c>
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	6861      	ldr	r1, [r4, #4]
 8006876:	4299      	cmp	r1, r3
 8006878:	bfde      	ittt	le
 800687a:	2330      	movle	r3, #48	; 0x30
 800687c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006884:	1b52      	subs	r2, r2, r5
 8006886:	6122      	str	r2, [r4, #16]
 8006888:	f8cd a000 	str.w	sl, [sp]
 800688c:	464b      	mov	r3, r9
 800688e:	aa03      	add	r2, sp, #12
 8006890:	4621      	mov	r1, r4
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff fee2 	bl	800665c <_printf_common>
 8006898:	3001      	adds	r0, #1
 800689a:	d14c      	bne.n	8006936 <_printf_i+0x1fe>
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	b004      	add	sp, #16
 80068a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a6:	4835      	ldr	r0, [pc, #212]	; (800697c <_printf_i+0x244>)
 80068a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068ac:	6829      	ldr	r1, [r5, #0]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068b4:	6029      	str	r1, [r5, #0]
 80068b6:	061d      	lsls	r5, r3, #24
 80068b8:	d514      	bpl.n	80068e4 <_printf_i+0x1ac>
 80068ba:	07df      	lsls	r7, r3, #31
 80068bc:	bf44      	itt	mi
 80068be:	f043 0320 	orrmi.w	r3, r3, #32
 80068c2:	6023      	strmi	r3, [r4, #0]
 80068c4:	b91e      	cbnz	r6, 80068ce <_printf_i+0x196>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f023 0320 	bic.w	r3, r3, #32
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	2310      	movs	r3, #16
 80068d0:	e7b0      	b.n	8006834 <_printf_i+0xfc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f043 0320 	orr.w	r3, r3, #32
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	2378      	movs	r3, #120	; 0x78
 80068dc:	4828      	ldr	r0, [pc, #160]	; (8006980 <_printf_i+0x248>)
 80068de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e2:	e7e3      	b.n	80068ac <_printf_i+0x174>
 80068e4:	0659      	lsls	r1, r3, #25
 80068e6:	bf48      	it	mi
 80068e8:	b2b6      	uxthmi	r6, r6
 80068ea:	e7e6      	b.n	80068ba <_printf_i+0x182>
 80068ec:	4615      	mov	r5, r2
 80068ee:	e7bb      	b.n	8006868 <_printf_i+0x130>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	6826      	ldr	r6, [r4, #0]
 80068f4:	6961      	ldr	r1, [r4, #20]
 80068f6:	1d18      	adds	r0, r3, #4
 80068f8:	6028      	str	r0, [r5, #0]
 80068fa:	0635      	lsls	r5, r6, #24
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	d501      	bpl.n	8006904 <_printf_i+0x1cc>
 8006900:	6019      	str	r1, [r3, #0]
 8006902:	e002      	b.n	800690a <_printf_i+0x1d2>
 8006904:	0670      	lsls	r0, r6, #25
 8006906:	d5fb      	bpl.n	8006900 <_printf_i+0x1c8>
 8006908:	8019      	strh	r1, [r3, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	4615      	mov	r5, r2
 8006910:	e7ba      	b.n	8006888 <_printf_i+0x150>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	602a      	str	r2, [r5, #0]
 8006918:	681d      	ldr	r5, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	2100      	movs	r1, #0
 800691e:	4628      	mov	r0, r5
 8006920:	f7f9 fc5e 	bl	80001e0 <memchr>
 8006924:	b108      	cbz	r0, 800692a <_printf_i+0x1f2>
 8006926:	1b40      	subs	r0, r0, r5
 8006928:	6060      	str	r0, [r4, #4]
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	2300      	movs	r3, #0
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	e7a8      	b.n	8006888 <_printf_i+0x150>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	462a      	mov	r2, r5
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	47d0      	blx	sl
 8006940:	3001      	adds	r0, #1
 8006942:	d0ab      	beq.n	800689c <_printf_i+0x164>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	d413      	bmi.n	8006972 <_printf_i+0x23a>
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	4298      	cmp	r0, r3
 8006950:	bfb8      	it	lt
 8006952:	4618      	movlt	r0, r3
 8006954:	e7a4      	b.n	80068a0 <_printf_i+0x168>
 8006956:	2301      	movs	r3, #1
 8006958:	4632      	mov	r2, r6
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d09b      	beq.n	800689c <_printf_i+0x164>
 8006964:	3501      	adds	r5, #1
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	9903      	ldr	r1, [sp, #12]
 800696a:	1a5b      	subs	r3, r3, r1
 800696c:	42ab      	cmp	r3, r5
 800696e:	dcf2      	bgt.n	8006956 <_printf_i+0x21e>
 8006970:	e7eb      	b.n	800694a <_printf_i+0x212>
 8006972:	2500      	movs	r5, #0
 8006974:	f104 0619 	add.w	r6, r4, #25
 8006978:	e7f5      	b.n	8006966 <_printf_i+0x22e>
 800697a:	bf00      	nop
 800697c:	08006cf1 	.word	0x08006cf1
 8006980:	08006d02 	.word	0x08006d02

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_sbrk_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa ff7c 	bl	800188c <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200001ac 	.word	0x200001ac

080069a4 <__sread>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	460c      	mov	r4, r1
 80069a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ac:	f000 f8f8 	bl	8006ba0 <_read_r>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	bfab      	itete	ge
 80069b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069b6:	89a3      	ldrhlt	r3, [r4, #12]
 80069b8:	181b      	addge	r3, r3, r0
 80069ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069be:	bfac      	ite	ge
 80069c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80069c2:	81a3      	strhlt	r3, [r4, #12]
 80069c4:	bd10      	pop	{r4, pc}

080069c6 <__swrite>:
 80069c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ca:	461f      	mov	r7, r3
 80069cc:	898b      	ldrh	r3, [r1, #12]
 80069ce:	05db      	lsls	r3, r3, #23
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	4616      	mov	r6, r2
 80069d6:	d505      	bpl.n	80069e4 <__swrite+0x1e>
 80069d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069dc:	2302      	movs	r3, #2
 80069de:	2200      	movs	r2, #0
 80069e0:	f000 f868 	bl	8006ab4 <_lseek_r>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	4632      	mov	r2, r6
 80069f2:	463b      	mov	r3, r7
 80069f4:	4628      	mov	r0, r5
 80069f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069fa:	f000 b817 	b.w	8006a2c <_write_r>

080069fe <__sseek>:
 80069fe:	b510      	push	{r4, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a06:	f000 f855 	bl	8006ab4 <_lseek_r>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	bf15      	itete	ne
 8006a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a1a:	81a3      	strheq	r3, [r4, #12]
 8006a1c:	bf18      	it	ne
 8006a1e:	81a3      	strhne	r3, [r4, #12]
 8006a20:	bd10      	pop	{r4, pc}

08006a22 <__sclose>:
 8006a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a26:	f000 b813 	b.w	8006a50 <_close_r>
	...

08006a2c <_write_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d07      	ldr	r5, [pc, #28]	; (8006a4c <_write_r+0x20>)
 8006a30:	4604      	mov	r4, r0
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	602a      	str	r2, [r5, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fa fed5 	bl	80017ea <_write>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_write_r+0x1e>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_write_r+0x1e>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	200001ac 	.word	0x200001ac

08006a50 <_close_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d06      	ldr	r5, [pc, #24]	; (8006a6c <_close_r+0x1c>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f7fa fee1 	bl	8001822 <_close>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_close_r+0x1a>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_close_r+0x1a>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	200001ac 	.word	0x200001ac

08006a70 <_fstat_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	; (8006a90 <_fstat_r+0x20>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	f7fa fedc 	bl	800183a <_fstat>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d102      	bne.n	8006a8c <_fstat_r+0x1c>
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	b103      	cbz	r3, 8006a8c <_fstat_r+0x1c>
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
 8006a8e:	bf00      	nop
 8006a90:	200001ac 	.word	0x200001ac

08006a94 <_isatty_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d06      	ldr	r5, [pc, #24]	; (8006ab0 <_isatty_r+0x1c>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fa fedb 	bl	800185a <_isatty>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_isatty_r+0x1a>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_isatty_r+0x1a>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	200001ac 	.word	0x200001ac

08006ab4 <_lseek_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d07      	ldr	r5, [pc, #28]	; (8006ad4 <_lseek_r+0x20>)
 8006ab8:	4604      	mov	r4, r0
 8006aba:	4608      	mov	r0, r1
 8006abc:	4611      	mov	r1, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7fa fed4 	bl	8001870 <_lseek>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_lseek_r+0x1e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_lseek_r+0x1e>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	200001ac 	.word	0x200001ac

08006ad8 <memcpy>:
 8006ad8:	440a      	add	r2, r1
 8006ada:	4291      	cmp	r1, r2
 8006adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ae0:	d100      	bne.n	8006ae4 <memcpy+0xc>
 8006ae2:	4770      	bx	lr
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aee:	4291      	cmp	r1, r2
 8006af0:	d1f9      	bne.n	8006ae6 <memcpy+0xe>
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <memmove>:
 8006af4:	4288      	cmp	r0, r1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	eb01 0402 	add.w	r4, r1, r2
 8006afc:	d902      	bls.n	8006b04 <memmove+0x10>
 8006afe:	4284      	cmp	r4, r0
 8006b00:	4623      	mov	r3, r4
 8006b02:	d807      	bhi.n	8006b14 <memmove+0x20>
 8006b04:	1e43      	subs	r3, r0, #1
 8006b06:	42a1      	cmp	r1, r4
 8006b08:	d008      	beq.n	8006b1c <memmove+0x28>
 8006b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b12:	e7f8      	b.n	8006b06 <memmove+0x12>
 8006b14:	4402      	add	r2, r0
 8006b16:	4601      	mov	r1, r0
 8006b18:	428a      	cmp	r2, r1
 8006b1a:	d100      	bne.n	8006b1e <memmove+0x2a>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b26:	e7f7      	b.n	8006b18 <memmove+0x24>

08006b28 <__malloc_lock>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__malloc_lock+0x8>)
 8006b2a:	f7ff b999 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8006b2e:	bf00      	nop
 8006b30:	200001a0 	.word	0x200001a0

08006b34 <__malloc_unlock>:
 8006b34:	4801      	ldr	r0, [pc, #4]	; (8006b3c <__malloc_unlock+0x8>)
 8006b36:	f7ff b994 	b.w	8005e62 <__retarget_lock_release_recursive>
 8006b3a:	bf00      	nop
 8006b3c:	200001a0 	.word	0x200001a0

08006b40 <_realloc_r>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	4680      	mov	r8, r0
 8006b46:	4614      	mov	r4, r2
 8006b48:	460e      	mov	r6, r1
 8006b4a:	b921      	cbnz	r1, 8006b56 <_realloc_r+0x16>
 8006b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b50:	4611      	mov	r1, r2
 8006b52:	f7ff ba59 	b.w	8006008 <_malloc_r>
 8006b56:	b92a      	cbnz	r2, 8006b64 <_realloc_r+0x24>
 8006b58:	f7ff f9ea 	bl	8005f30 <_free_r>
 8006b5c:	4625      	mov	r5, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	f000 f82e 	bl	8006bc4 <_malloc_usable_size_r>
 8006b68:	4284      	cmp	r4, r0
 8006b6a:	4607      	mov	r7, r0
 8006b6c:	d802      	bhi.n	8006b74 <_realloc_r+0x34>
 8006b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b72:	d812      	bhi.n	8006b9a <_realloc_r+0x5a>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fa46 	bl	8006008 <_malloc_r>
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0ed      	beq.n	8006b5e <_realloc_r+0x1e>
 8006b82:	42bc      	cmp	r4, r7
 8006b84:	4622      	mov	r2, r4
 8006b86:	4631      	mov	r1, r6
 8006b88:	bf28      	it	cs
 8006b8a:	463a      	movcs	r2, r7
 8006b8c:	f7ff ffa4 	bl	8006ad8 <memcpy>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff f9cc 	bl	8005f30 <_free_r>
 8006b98:	e7e1      	b.n	8006b5e <_realloc_r+0x1e>
 8006b9a:	4635      	mov	r5, r6
 8006b9c:	e7df      	b.n	8006b5e <_realloc_r+0x1e>
	...

08006ba0 <_read_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	; (8006bc0 <_read_r+0x20>)
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fa fdfe 	bl	80017b0 <_read>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_read_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_read_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	200001ac 	.word	0x200001ac

08006bc4 <_malloc_usable_size_r>:
 8006bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc8:	1f18      	subs	r0, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfbc      	itt	lt
 8006bce:	580b      	ldrlt	r3, [r1, r0]
 8006bd0:	18c0      	addlt	r0, r0, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_init>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr

08006be0 <_fini>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr
